// SimpleExtrudePlugin
// Initial code generated by Softimage SDK Wizard
// Executed Thu Dec 23 22:39:30 UTC+0100 2010 by Gene
// 
// 
// Tip: To add a command to this plug-in, right-click in the 
// script editor and choose Tools > Add Command.

function XSILoadPlugin( in_reg )
{
	in_reg.Author = "Eugen Sares";
	in_reg.Name = "SimpleExtrudePlugin";
	in_reg.Major = 1;
	in_reg.Minor = 0;

	in_reg.RegisterOperator("SimpleExtrude");
	in_reg.RegisterCommand("ApplySimpleExtrude","ApplySimpleExtrude");
	//RegistrationInsertionPoint - do not remove this line
	in_reg.RegisterMenu(siMenuAnchorPoints.siMenuTbModelCreatePolygonMeshID,'SimpleExtrude_Menu', false, true)

	return true;
}

function XSIUnloadPlugin( in_reg )
{
	var strPluginName;
	strPluginName = in_reg.Name;
	Application.LogMessage(strPluginName + " has been unloaded.",siVerbose);
	return true;
}

function ApplySimpleExtrude_Init( in_ctxt )
{
	var oCmd;
	oCmd = in_ctxt.Source;
	oCmd.Description = "Create an instance of SimpleExtrude operator";
	oCmd.SetFlag(siNoLogging,false);

	// TODO: You may want to add some arguments to this command so that the operator
	// can be applied to objects without depending on their specific names.
	// Tip: the Collection ArgumentHandler is very useful
	return true;
}


//______________________________________________________________________________

function ApplySimpleExtrude_Execute(  )
{
	Application.LogMessage("ApplySimpleExtrude_Execute called",siVerbose);

	var oCrvList = Selection(0);

	var oRoot = Application.ActiveSceneRoot;
	oExtrusion = oRoot.AddPolygonMesh();
	oExtrusion.Name = "polymsh_extruded";
	
	var newOp = XSIFactory.CreateObject("SimpleExtrude");
	newOp.AddOutputPort(oExtrusion.ActivePrimitive, "OutputPort");
	newOp.AddInputPort(oCrvList.ActivePrimitive, "InCurvePort");
	newOp.Connect();
	return newOp;
}


//______________________________________________________________________________

function SimpleExtrude_Define( in_ctxt )
{
	var oCustomOperator;
	var oPDef;
	oCustomOperator = in_ctxt.Source;
	oPDef = XSIFactory.CreateParamDef("radius",siFloat,siClassifUnknown,siPersistable | siAnimatable | siKeyable,"","",0.1,0,1000,0,1000);
	oCustomOperator.AddParameter(oPDef);
	oPDef = XSIFactory.CreateParamDef("subdivu",siInt4,siClassifUnknown,siPersistable | siAnimatable | siKeyable,"","",6,3,100,3,100);
	oCustomOperator.AddParameter(oPDef);
	oPDef = XSIFactory.CreateParamDef("subdivv",siInt4,siClassifUnknown,siPersistable | siAnimatable | siKeyable,"","",6,3,100,3,100);
	oCustomOperator.AddParameter(oPDef);
	oPDef = XSIFactory.CreateParamDef("rotation",siFloat,siClassifUnknown,siPersistable | siAnimatable | siKeyable,"","",0,0,360,0,360);
	oCustomOperator.AddParameter(oPDef);

	oCustomOperator.AlwaysEvaluate = false;
	oCustomOperator.Debug = 1;
	return true;
}

function SimpleExtrude_Init( in_ctxt )
{
	Application.LogMessage("SimpleExtrude_Init called",siVerboseMsg);
	return true;
}

function SimpleExtrude_Term( in_ctxt )
{
	Application.LogMessage("SimpleExtrude_Term called",siVerboseMsg);
	return true;
}


//______________________________________________________________________________

function SimpleExtrude_Update( in_ctxt )
{
	Application.LogMessage("SimpleExtrude_Update called",siVerboseMsg);
	//var input0 = in_ctxt.GetInputValue(0);
	
	// Get Params
	var radius = in_ctxt.GetParameterValue("radius");
	var subdivu = in_ctxt.GetParameterValue("subdivu");
	var subdivv = in_ctxt.GetParameterValue("subdivv");
	var rotation = in_ctxt.GetParameterValue("rotation");

	// Get Port connections
	output = in_ctxt.OutputTarget;
	var geomOut = output.Geometry;
	var cInCurves = in_ctxt.GetInputValue("InCurvePort").Geometry.Curves;

	// Create Point and Polygon arrays
	
	var aAllVertices = new Array();
	var aAllPolygons = new Array();
	
	var aVertices = new Array();
	var aPolygons = new Array();
	
	var pointCount = 0;


	// Loop through all Subcurves
	for(var subCrvIdx = 0; subCrvIdx < cInCurves.count; subCrvIdx++)
	{
		var oCurve = cInCurves.item(subCrvIdx);
		
		//var vP = XSIMath.CreateVector3();

		var aValues = new VBArray(oCurve.EvaluatePositionFromPercentage( 0.0 ));
		var oPosition = aValues.getItem(0);
		var oUTangent = aValues.getItem(1);
		var oNormal = aValues.getItem(2);
		var oBiNormal = aValues.getItem(3);

		aAllVertices.push(oPosition.x);
		aAllVertices.push(oPosition.y);
		aAllVertices.push(oPosition.z);
		
		var aValues = new VBArray(oCurve.EvaluatePositionFromPercentage( 100.0 ));
		var oPosition = aValues.getItem(0);
		var oUTangent = aValues.getItem(1);
		var oNormal = aValues.getItem(2);
		var oBiNormal = aValues.getItem(3);

		aAllVertices.push(oPosition.x);
		aAllVertices.push(oPosition.y);
		aAllVertices.push(oPosition.z);
		
		aAllVertices.push(0);
		aAllVertices.push(0);
		aAllVertices.push(0);
		

		//aPolygons = [3,0,1,2];
		aPolygons[0] = 3;
		aPolygons[1] = pointCount;
		aPolygons[2] = pointCount + 1;
		aPolygons[3] = pointCount + 2;
		
		pointCount += 3;
		
		aAllPolygons = aAllPolygons.concat(aPolygons);
		
	}

logVertexArray("aVertices: ", aVertices, 1000);
LogMessage("aAllPolygons: " + aAllPolygons);
	// Set polymesh data
	geomOut.Set(aAllVertices, aAllPolygons);

	return true;
}


//______________________________________________________________________________

// Tip: Use the "Refresh" option on the Property Page context menu to 
// reload your script changes and re-execute the DefineLayout callback.
function SimpleExtrude_DefineLayout( in_ctxt )
{
	var oLayout,oItem;
	oLayout = in_ctxt.Source;
	oLayout.Clear();
	oLayout.AddItem("radius");
	oLayout.AddItem("sides");
	return true;
}


function SimpleExtrude_OnInit( )
{
	Application.LogMessage("SimpleExtrude_OnInit called",siVerbose);
}


function SimpleExtrude_OnClosed( )
{
	Application.LogMessage("SimpleExtrude_OnClosed called",siVerbose);
}


function SimpleExtrude_radius_OnChanged( )
{
	Application.LogMessage("SimpleExtrude_radius_OnChanged called",siVerbose);
	var oParam;
	oParam = PPG.radius;
	var paramVal;
	paramVal = oParam.Value;
	Application.LogMessage("New value: " + paramVal,siVerbose);
}


function SimpleExtrude_subdivu_OnChanged( )
{
	Application.LogMessage("SimpleExtrude_subdivu_OnChanged called",siVerbose);
	var oParam;
	oParam = PPG.subdivu;
	var paramVal;
	paramVal = oParam.Value;
	Application.LogMessage("New value: " + paramVal,siVerbose);
}


function SimpleExtrude_subdivv_OnChanged( )
{
	Application.LogMessage("SimpleExtrude_subdivv_OnChanged called",siVerbose);
	var oParam;
	oParam = PPG.subdivv;
	var paramVal;
	paramVal = oParam.Value;
	Application.LogMessage("New value: " + paramVal,siVerbose);
}


function SimpleExtrude_rotation_OnChanged( )
{
	Application.LogMessage("SimpleExtrude_rotation_OnChanged called",siVerbose);
	var oParam;
	oParam = PPG.rotation;
	var paramVal;
	paramVal = oParam.Value;
	Application.LogMessage("New value: " + paramVal,siVerbose);
}


function SimpleExtrude_Menu_Init( in_ctxt )
{
	oMenu = in_ctxt.Source;
    oMenu.AddCommandItem("Simple Extrude","ApplySimpleExtrude");
    return true;
}


function logVertexArray(logString, aPoints, dp)
{
	LogMessage(logString);
	
	for ( var i = 0; i < aPoints.length; i += 4 )
	{
		var x = aPoints[i];
		var y = aPoints[i + 1];
		var z = aPoints[i + 2];
		LogMessage( "[" + i/4 + "]: x = " + Math.round(x*dp)/dp + "; y = " + Math.round(y*dp)/dp + "; z = " + Math.round(z*dp)/dp );

	}
	
	//LogMessage("");
}


