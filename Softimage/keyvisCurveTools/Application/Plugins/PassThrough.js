//______________________________________________________________________________
// PassThroughPlugin
// Initial code generated by Softimage SDK Wizard
// Executed Tue Dec 7 19:29:54 UTC+0100 2010 by Gene
// 
// 
// Tip: To add a command to this plug-in, right-click in the 
// script editor and choose Tools > Add Command.
//______________________________________________________________________________

function XSILoadPlugin( in_reg )
{
	in_reg.Author = "Eugen Sares";
	in_reg.Name = "PassThroughPlugin";
	in_reg.Major = 1;
	in_reg.Minor = 0;

	in_reg.RegisterOperator("PassThrough");
	in_reg.RegisterCommand("ApplyPassThrough","ApplyPassThrough");
	in_reg.RegisterMenu(siMenuTbModelModifyCurveID,"ApplyPassThrough_Menu",false,false);
	//RegistrationInsertionPoint - do not remove this line

	return true;
}


//______________________________________________________________________________

function XSIUnloadPlugin( in_reg )
{
	var strPluginName;
	strPluginName = in_reg.Name;
	Application.LogMessage(strPluginName + " has been unloaded.",siVerbose);
	return true;
}


//______________________________________________________________________________

function ApplyPassThrough_Init( in_ctxt )
{
	var oCmd;
	oCmd = in_ctxt.Source;
	oCmd.Description = "Create an instance of PassThrough operator";
	oCmd.SetFlag(siNoLogging,false);

	// TODO: You may want to add some arguments to this command so that the operator
	// can be applied to objects without depending on their specific names.
	// Tip: the Collection ArgumentHandler is very useful
	var oArgs = oCmd.Arguments;
	oArgs.AddWithHandler("args", "Collection");
	
	return true;
}


//______________________________________________________________________________

function ApplyPassThrough_Execute( args )
{

	Application.LogMessage("ApplyPassThrough_Execute called",siVerbose);
	
	var oCrvList = args(0);
LogMessage(oCrvList.Type);
	// TODO: This generated code works by hardcoding the exact names of the
	// input and output objects.
	// If you want to operator to be applied to objects with different names
	// you way want to generalise this code to determine the objects
	// based on the Selection or the arguments to this command
	// 
	// Note: The AddCustomOp command is an alternative way to build the operator
//	var newOp = XSIFactory.CreateObject("PassThrough");
//	newOp.AddOutputPort("text.crvlist");
	
	// AddCustomOp( Type, OutputObjs, [InputObjs], [Name], [ConstructionMode] )
	newOp = AddCustomOp("PassThrough", oCrvList.ActivePrimitive, oCrvList.ActivePrimitive);
	
	//newOp.Connect();
	return newOp;
}


//______________________________________________________________________________

function PassThrough_Define( in_ctxt )
{
	var oCustomOperator;
	var oPDef;
	oCustomOperator = in_ctxt.Source;

	oCustomOperator.AlwaysEvaluate = false;
	oCustomOperator.Debug = 1;
	return true;
}


//______________________________________________________________________________

function PassThrough_Init( in_ctxt )
{
	Application.LogMessage("PassThrough_Init called",siVerboseMsg);
	return true;
}


//______________________________________________________________________________

function PassThrough_Term( in_ctxt )
{
	Application.LogMessage("PassThrough_Term called",siVerboseMsg);
	return true;
}


//______________________________________________________________________________

function PassThrough_Update( in_ctxt )
{
	Application.LogMessage("PassThrough_Update called",siVerboseMsg);

	var outCrvListGeom = in_ctxt.OutputTarget.Geometry;
	
	var inCrvListGeom = in_ctxt.GetInputValue("Incrvlist").Geometry;	// see SDK Explorer


	// Get inCrvListGeom (NurbsCurveList)
	var VBdata = inCrvListGeom.Get2( siSINurbs ); var data = VBdata.toArray();

	var numAllSubcurves = data[0];
	var VBdata1 = new VBArray(data[1]); var aAllPoints = VBdata1.toArray();
	var VBdata2 = new VBArray(data[2]); var aAllNumPoints =  VBdata2.toArray();
	var VBdata3 = new VBArray(data[3]); var aAllKnots= VBdata3.toArray();
	aAllKnots = removeUndefinedElementsFromArray(aAllKnots);
	var VBdata4 = new VBArray(data[4]); var aAllNumKnots = VBdata4.toArray();
	var VBdata5 = new VBArray(data[5]); var aAllIsClosed = VBdata5.toArray();
	var VBdata6 = new VBArray(data[6]); var aAllDegree = VBdata6.toArray();
	var VBdata7 = new VBArray(data[7]); var aAllParameterization = VBdata7.toArray();
	
LogMessage("passing through...");
	// Set output CurveList
	outCrvListGeom.Set(
		numAllSubcurves,		// 0. number of Subcurves in the Curvelist
		aAllPoints, 			// 1. Array
		aAllNumPoints, 			// 2. Array, number of Control Points per Subcurve
		aAllKnots, 				// 3. Array
		aAllNumKnots, 			// 4. Array
		aAllIsClosed, 			// 5. Array
		aAllDegree, 			// 6. Array
		aAllParameterization, 	// 7. Array
		siSINurbs) ;			// 8. NurbsFormat: 0 = siSINurbs, 1 = siIGESNurbs
	
	//output = in_ctxt.OutputTarget;
LogMessage("Set!");
	return true;
}


//______________________________________________________________________________
// Function to remove empty items from a JScript Array
// e.g. NurbsCurveList.Get2 returns "dirty" Knot Arrays
function removeUndefinedElementsFromArray(dirtyArr)
{
	var arr = new Array();
	for(var i = 0; i < dirtyArr.length; i++)
	{
		if(dirtyArr[i] != undefined) arr.push( dirtyArr[i] );
	}
	return arr;
}


//______________________________________________________________________________

function ApplyPassThrough_Menu_Init( in_ctxt )
{
	var oMenu;
	oMenu = in_ctxt.Source;
	oMenu.AddCommandItem("Pass Through","ApplyPassThrough");
	return true;
}

//______________________________________________________________________________