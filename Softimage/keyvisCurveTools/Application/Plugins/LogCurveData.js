// LogCurveDataPlugin
// Initial code generated by Softimage SDK Wizard
// Executed Tue Mar 30 09:17:23 UTC+0200 2010 by Gene
// 
// Tip: To add a command to this plug-in, right-click in the 
// script editor and choose Tools > Add Command.
// 
// Tip: To get help on a callback, highlight the callback name
// (for example, "Init", "Define", or "Execute") and press F1.

//________________________________________________________________________
function XSILoadPlugin( in_reg )
{
	in_reg.Author = "Gene";
	in_reg.Name = "LogCurveDataPlugin";
	in_reg.Major = 1;
	in_reg.Minor = 0;

	in_reg.RegisterCommand("LogCurveData","LogCurveData");
	//RegistrationInsertionPoint - do not remove this line

	return true;
}

//________________________________________________________________________
function XSIUnloadPlugin( in_reg )
{
	var strPluginName;
	strPluginName = in_reg.Name;
	Application.LogMessage(strPluginName + " has been unloaded.",siVerbose);
	return true;
}

//________________________________________________________________________
function LogCurveData_Init( in_ctxt )
{
	var oCmd;
	oCmd = in_ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	return true;
}

//________________________________________________________________________
function LogCurveData_Execute(  )
{

	Application.LogMessage("LogCurveData_Execute called",siVerbose);
	// 
// Logs NurbsCurve data of a Subcurve
// from the Softimage SDK help
// modified 01.2010 by Eugen

	LogMessage( "===============================================================" );
	LogMessage( "NURBSCURVE INFO" );

	dp = 1000;	// decimal precision

	do
	{
		var oSel = Application.Selection;
		if(oSel.Count == 0)
		{	
			LogMessage("Please select a CurveList or Subcurve first.");
			break;
		}
		
		var oObj = oSel.Item(0);
		//LogMessage("CurveList Name: " + curve.Name);
		//LogMessage("CurveList Type: " + curve.Type);
		//LogMessage("CurveList ClassName: " + ClassName(curve));

		if(oObj.Type == "subcrvSubComponent")
		{
			var oSubComponents = oObj.SubComponent;
			//var oParent = oSubComponents.Parent3DObject;
			var oComponentColl = oSubComponents.ComponentCollection;
			LogMessage(oComponentColl.Count + " Subcurves selected");
			for(var i = 0; i < oComponentColl.Count; i++)	// var i makes i a local variable!
			{
				var subcrv = oComponentColl.Item(i);
				LogMessage( "===============================================================" );
				Logmessage("Subcurve: [" + subcrv.Index + "]");
				LogCurveData(oComponentColl.Item(i));
			}
			break;
		}
		
		if(oObj.Type == "crvlist")
		{
			LogMessage("CurveList selected. Only the first Subcurve is logged.");
			LogMessage("(If you want to log one or more Subcurves, select them first.)");
			var curves = oObj.ActivePrimitive.Geometry.Curves;
			LogMessage("Number of Subcurves: " + curves.Count);
			LogCurveData(oObj.ActivePrimitive.Geometry.Curves(0));
			break;
		}
		
		if(oObj.Type == "pntSubComponent")
		{
			// get ControlPointCollection
			var oPoints = oObj.SubComponent.ComponentCollection;
			LogMessage(oPoints.Count + " Points selected.");
			for(var i = 0; i < oPoints.Count; i++)
			{
				oPoint = oPoints.item(i);
				//LogMessage(oPoint.Type);	// ControlPoint
				var x = oPoint.x;
				var y = oPoint.y;
				var z = oPoint.z;
				var w = oPoint.w;
				LogMessage( "[" + oPoint.Index + "]: x = " + Math.round(x*dp)/dp + "; y = " + Math.round(y*dp)/dp + "; z = " + Math.round(z*dp)/dp + "; w = " + Math.round(w*dp)/dp );
			}
			
		}

	} while(false);
	// 
	return true;
}

//________________________________________________________________________

function LogCurveData(oCrv)	// Arg: NurbsCurve
{
	var vbOutput = new VBArray(oCrv.Get2( siSINurbs) );
	var aOutput = vbOutput.toArray();

	var vbCtrlPts = new VBArray( aOutput[0] );
	var vbKnots = new VBArray( aOutput[1] );
	var bClosed = aOutput[2];
	var lDegree = aOutput[3];
	var eParFactor = aOutput[4];

	ctrlPtsArray = vbCtrlPts.toArray();
	LogMessage("Number of Control Points: " + ctrlPtsArray.length/4);
	//LogMessage( "Control Points:" );
	for ( var i = 0; i <= vbCtrlPts.ubound(2); i++ )
	{
		var x = vbCtrlPts.getItem(0,i);
		var y = vbCtrlPts.getItem(1,i);
		var z = vbCtrlPts.getItem(2,i);
		var w = vbCtrlPts.getItem(3,i);
	   LogMessage( "[" + i + "]: x = " + Math.round(x*dp)/dp + "; y = " + Math.round(y*dp)/dp + "; z = " + Math.round(z*dp)/dp + "; w = " + Math.round(w*dp)/dp );
	}
	
	/*for(i = 0; i < ctrlPtsArray.length; i++)
	{
		LogMessage("ctrlPtsArray[" + i + "]: " + ctrlPtsArray[i]);
	}*/
	//LogMessage("JScript Array: " + ctrlPtsArray.toString());

	LogMessage( "---------------------------------------------------------------" );
	knotsArray = vbKnots.toArray();
	LogMessage("Number of Knots: " + knotsArray.length);
	//LogMessage( "Knots:" );
	var sKnotArray = "";
	for ( var j = 0; j <= vbKnots.ubound(1); j++ )
	{
		var knotValue = Math.round(vbKnots.getItem(j)*dp)/dp;
		if ( j == 0 ) sKnotArray = "Knot Vector: " + knotValue.toString(10);
		else sKnotArray = sKnotArray + ", " + knotValue.toString(10);
	}
	LogMessage( sKnotArray );

	/*for(i = 0; i < knotsArray.length; i++)
	{
		LogMessage("knotArray[" + i + "]: " + knotsArray[i]);
	}*/
	//LogMessage("JScript Array: " + knotsArray.toString());

	LogMessage( "---------------------------------------------------------------" );
	if ( bClosed )
	{
	   LogMessage( oCrv + " is closed." );
	}
	else
	{
	   LogMessage( oCrv + " is not closed." );
	}

	LogMessage( "---------------------------------------------------------------" );
	LogMessage( "Degree of " + oCrv + " is " + lDegree + "." );

	LogMessage( "---------------------------------------------------------------" );
	switch( eParFactor )
	{
	   case siUniformParameterization :
		   LogMessage( oCrv + "'s knot parameterization is uniform." );
		   break;
	   case siNonUniformParameterization :
		   LogMessage( oCrv + "'s knot parameterization is non-uniform." );
		   break;
	   case siChordLengthParameterization :
		   LogMessage( oCrv + "'s knot parameterization is chord-length." );
		   break;
	   default :
		   LogMessage( oCrv + "'s knot parameterization is centripetal." );
	}
	
	LogMessage( "---------------------------------------------------------------" );
	LogMessage( "Curve Length: " + oCrv.Length);
	LogMessage( "" );
}
