<?xml version="1.0" ?><QMenuComponents QMenu_Version="0.95"><QMenu_MenuItems><QMenu_MenuItem UID="{F5072D80-32BC-4C37-8A53-E49FCE233E22}" category="Preferences" language="Python" name="Extrude duplicated Polygons" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ): #Don't rename this function
	return Application.Preferences.GetPreferenceValue(&quot;duplicate.polygons&quot;)

def Switch_Execute( oContext ): #Don't rename this function
	Application.SetValue (&quot;Preferences.duplicate.polygons&quot;, not Switch_Init( oContext ))</QMenu_MenuItem><QMenu_MenuItem UID="{600BFCD0-B35A-484C-92A9-A07E88ECDC9E}" category="Property Editing" language="Python" name="+10%" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*1.1,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*1.1,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{5A080599-B35D-496D-AF32-79A5C0B2C19A}" category="Property Editing" language="Python" name="+50%" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*1.5,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*1.5,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{2A2A718A-45C5-4915-89D2-300F2983ADBD}" category="Property Editing" language="Python" name="+100%" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*2,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*2,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{A9925149-B67F-44E8-8A48-1E3D48F8D349}" category="Property Editing" language="Python" name="-10%" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*0.9,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*0.9,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{209B0599-191C-4200-9CD0-ACA396092F39}" category="Property Editing" language="Python" name="-50%" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 0.5
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{E1F6DDCE-A513-435F-A257-60FAB0C8504B}" category="Property Editing" language="Python" name="0.1" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.1,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,0.1,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{4925E044-51FB-48F5-B739-B03DE62D5391}" category="Property Editing" language="Python" name="0.5" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.5,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,0.5,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{4EF91A5A-2247-4B6B-97EA-E7F02ABCBA90}" category="Property Editing" language="Python" name="1" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,1,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,1,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{15DA3968-F89C-4689-BD9A-E26F6FF490A8}" category="Property Editing" language="Python" name="5" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,5,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,5,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{9591E5E9-2F5D-4231-AD10-207845ECA773}" category="Property Editing" language="Python" name="10" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,10,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,10,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{2E390DE6-C99F-4CE9-BEF7-09C6B0293132}" category="Property Editing" language="Python" name="0" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,0,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{88F73183-D9C5-45A8-8687-E40CB503C9CB}" category="Preferences" language="Python" name="Raycast Select in Shaded Mode" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ):
	return Application.Preferences.GetPreferenceValue(&quot;Select.rectraycast&quot;) 

def Switch_Execute( oContext ):
	Application.SetValue(&quot;preferences.Select.rectraycast&quot;, not Switch_Init(oContext))</QMenu_MenuItem><QMenu_MenuItem UID="{4EB1CD1E-889B-432C-BE1F-93C2C8F17C17}" category="Views" language="Python" name="Top View" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Top\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{B3D74639-4CBB-4960-A1BB-E62D410F3C04}" category="Preferences" language="Python" name="Raycast Select - Include Backfacing Polygons" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ):
	return Application.Preferences.GetPreferenceValue(&quot;Select.raycastbackfacing&quot;)

def Switch_Execute( oContext ):
	Application.SetValue(&quot;preferences.Select.raycastbackfacing&quot;, not Switch_Init(oContext))
</QMenu_MenuItem><QMenu_MenuItem UID="{95298997-82E6-4492-AB83-66E37F9E677E}" category="Preferences" language="Python" name="Orbit Around Selection" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) == 2
	return State

def Switch_Execute( oContext ): #Don't rename this function
	if Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) != 2:
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 2, &quot;&quot;)
	else: 
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 0, &quot;&quot;)


</QMenu_MenuItem><QMenu_MenuItem UID="{B826C60E-698E-48EF-9335-67E3CB8659E1}" category="Preferences" language="Python" name="Orbit Around Selection - Components only" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ): #Don't rename this function
	return Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;)

def Switch_Execute( oContext ): #Don't rename this function
	Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, not Switch_Init(oContext), &quot;&quot;)




</QMenu_MenuItem><QMenu_MenuItem UID="{7968F3BA-75B3-40BD-BAEB-ED0ACC726810}" category="Clusters Editing" language="Python" name="Merge Clusters with same Material" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	Sel = Application.Selection
	oSel = list()
	for Obj in Sel:
		oSel.append(Obj)
	  
	for oObj in oSel:
		if (oObj.Type == &quot;poly&quot;) and (Application.ClassName(oObj) == &quot;X3DObject&quot;):
			delClusters = list()
			Clusters = oObj.ActivePrimitive.Geometry.Clusters
			polyClusters = list()
			for oCluster in Clusters:
				if oCluster.Type == &quot;poly&quot; and len(oCluster.Elements) != 0:
					polyClusters.append (oCluster)
		 
			
			for polyCluster in polyClusters:
				currentmat = polyCluster.Material
				#Application.LogMessage(currentmat)

				for oCheckCluster in polyClusters:
					if oCheckCluster != polyCluster and len(oCheckCluster.Elements) != 0:
						if oCheckCluster.Material.IsEqualTo(polyCluster.Material):
							#Application.LogMessage(&quot;Processing cluster: &quot; + oCheckCluster.Name)
							clusterElements = oCheckCluster.Elements
							Application.DeselectAll()
							Application.SelectMembers(oCheckCluster.FullName,True,False)
							Application.AddToSelection(polyCluster.FullName,&quot;ASITIS&quot;,False)
							Application.AddToCluster(&quot;&quot;, &quot;siRemoveFromExistingClusters&quot;)
			
			
			for Cluster in oObj.ActivePrimitive.Geometry.Clusters:
				if len(Cluster.Elements) == 0:
					Application.DeleteObj(Cluster.FullName)

	Application.DeselectAll()
	Application.SelectObj(oSel)
</QMenu_MenuItem><QMenu_MenuItem UID="{A289B561-86A8-448C-A2C2-AF2A7910B388}" category="Views" language="Python" name="User View" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;User\&quot;)&quot;)
	eval(stri)</QMenu_MenuItem><QMenu_MenuItem UID="{A428F6F5-2698-434B-9AD3-B7465180A7BB}" category="Views" language="Python" name="Right View" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Right\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{931C26F0-85D0-4C4D-9F62-F3DF52FDCC76}" category="Views" language="Python" name="Back View" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Front\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (3,True,&quot;&quot;, viewIndices[oView])

</QMenu_MenuItem><QMenu_MenuItem UID="{DE274524-8865-450D-AEAC-15F36AC9BC7C}" category="Views" language="Python" name="Front View" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Front\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])
</QMenu_MenuItem><QMenu_MenuItem UID="{3DCF9D6F-1506-4C4E-ADEF-A050D6785753}" category="Property Editing" language="Python" name="None" scanDepth="999999999" switch="False" type="QMenu_MenuItem"># Set selected Parameter(s) to None

def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,&quot;&quot;,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,&quot;&quot;,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{0FF4812D-9FED-423E-BB70-D55B8405E7D1}" category="Property Editing" language="Python" name="-1" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,-1,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,-1,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{C9E3FD92-C31B-40B0-8FEC-42E85815443A}" category="Views" language="Python" name="Bottom View" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Top\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (2,True,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{92A65447-9566-4966-8298-F16E4B49E027}" category="Views" language="Python" name="LeftView" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Right\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (1,True,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{78CCC962-B39D-4660-9146-6E86B3A6F3FC}" category="Property Editing" language="Python" name="+1" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				#print oObj
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					#print FullParamName
					#print (str(Application.Dictionary.GetObject(FullParamName).Type))
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						#print CurrentVal
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal+1,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal+1,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{158043D7-F83A-4354-A388-25499A8A40D7}" category="Views" language="Python" name="Wireframe Display Mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;wireframe&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{7CDC9723-3CCE-4B0D-8CF0-C4F7A1BF496D}" category="Views" language="Python" name="Bounding Box Display mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;bbox&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{1A0B0054-7B2B-4CAB-9FDA-88AE6C50ABC1}" category="Views" language="Python" name="Depth Cue Dispay Mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;depthcue&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{A420F1E1-130C-4DC9-A5A9-29DDE8F0FD4E}" category="Views" language="Python" name="Hidden Line Display Mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;hiddenline&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{C3268273-A56D-4CD7-ACCC-73855708929E}" category="Views" language="Python" name="Constant Display Mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;constant&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{4107A687-A5A3-49E9-B1B8-C151B6BA3E9E}" category="Views" language="Python" name="Shaded Display Mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;shaded&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{EDA55C73-2437-4BDC-B3ED-E9B4989D1184}" category="Views" language="Python" name="Textured Display Mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;textured&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{7F26382E-264C-4514-B2E8-F99F0F3FC42B}" category="Views" language="Python" name="Textured Decal Display Mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;texturedecal&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{27A16EB1-1AED-4989-A05F-6246E5B9D0AB}" category="Views" language="Python" name="Realtime Display Mode" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;realtimeshaders&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{9B136484-FDBE-4DC3-BEA1-A6AEB55292C0}" category="Curve Modeling" language="Python" name="Align Bezier Handles" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,2)
</QMenu_MenuItem><QMenu_MenuItem UID="{90ED438E-4BF8-4966-94FC-561006A3DC83}" category="Curve Modeling" language="Python" name="Align Bezier Handles Forward to Back" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,0)
</QMenu_MenuItem><QMenu_MenuItem UID="{83805112-1BC5-4793-AD0E-2F5E2B65DC5D}" category="Curve Modeling" language="Python" name="Align Bezier Handles Back to Forward" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,1)
</QMenu_MenuItem><QMenu_MenuItem UID="{C3A0D53C-95AD-44D4-986D-F5AA85EF55F8}" category="Curve Modeling" language="Python" name="Make Bezier-Knots Corners" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,7)
</QMenu_MenuItem><QMenu_MenuItem UID="{5A6AF53C-934E-425E-9A5F-432A8C09BB85}" category="Curve Modeling" language="Python" name="Make Knot Segments Linear" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,5)
</QMenu_MenuItem><QMenu_MenuItem UID="{35793D82-F980-4BCF-8640-F70ED5D864DC}" category="Preferences" language="Python" name="Inspect Duplicate Preferences" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.InspectObj(&quot;preferences.duplicate&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{C7E00458-F6F6-4380-BD12-1664CFE14CE1}" category="Preferences" language="Python" name="Inspect Selection Preferences" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.InspectObj(&quot;preferences.select&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{0DF2B85B-F3D0-4651-B068-2CE3FBB43464}" category="Preferences" language="Python" name="Inspect Camera Preferences" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.InspectObj(&quot;preferences.Camera&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{77516267-5DB1-4B09-BD63-E7C908A9F802}" category="Curve Modeling" language="Python" name="Extract Edges as Curve" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	sel = Application.Selection(0)
	ImmedMode = 0
	if Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) == True:
		ImmedMode = 1
	result= Application.ApplyGenOp(&quot;ExtractEdgeLoopOp&quot;, &quot;&quot;, sel, &quot;&quot;, ImmedMode, &quot;&quot;, &quot;&quot;)
	Application.InspectObj(result)
	
	</QMenu_MenuItem><QMenu_MenuItem UID="{EAACAC55-6BFC-47DB-A38D-B1393A9B1790}" category="Curve Modeling" language="Python" name="Remove Knot" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	ImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	curveList = list()
	for knot in Application.Selection:
		if knot.Type == &quot;knotSubComponent&quot;:
			curveList.append(knot.SubComponent.Parent3DObject) #Add curve to list of curves
			Application.SetCurveKnotMultiplicity(knot, 0, ImmedMode)
				
</QMenu_MenuItem><QMenu_MenuItem UID="{60964B90-56F0-426E-A6F4-AD782C00CEDE}" category="Curve Modeling" language="Python" name="Set Curve Knot Multiplicity" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	#ImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	#Application.LogMessage(&quot;ImmedMode at start is: &quot; + str(ImmedMode))
	knots = list()
	Sel = Application.Selection
	for obj in Sel:
		if obj.Type == &quot;knotSubComponent&quot;:
			knots.append(obj)
	
	#Application.Preferences.SetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot;, False )
	#NewImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	#Application.LogMessage (&quot;ImmedMode before applying Op is: &quot; + str(NewImmedMode))
	
	Op = Application.ApplyTopoOp(&quot;SetNurbsCrvKnotMultiplicity&quot;, knots, 3, &quot;siImmediatetOperation&quot;, &quot;&quot;)
	#Result = Application.SetCurveKnotMultiplicity(knots,3,&quot;siPersistentOperation&quot;)
	#Application.LogMessage(&quot;Created operator: &quot; + str(Op))

	#Application.InspectObj(Op,&quot;&quot;,&quot;&quot;,4,False)

	Application.AutoInspect(Op)
	


	&quot;&quot;&quot;
	if Result != None:
		
		if ImmedMode == True: #Was the ImmediateMode enabled when operation was started?
			ReturnVal = Application.InspectObj(Result[0],&quot;&quot;,&quot;&quot;,4,True)
			if ReturnVal == True: #User has canceled?
				Application.DeleteObj(Result)
			else:
				Application.FreezeModeling(Result)
		else: #We are not in ImmediateMode, this is simpler...
			keyState = Application.GetKeyboardState() #Get currently pressed modifier keys (if any)
			bCtrlDown = keyState[1] == 2 #Is Ctrl pressed?
			bAutoInspect = Application.GetUserPref( &quot;AutoInspectEnabled&quot; )
			if bAutoInspect and bCtrlDown==False or bAutoInspect==False and bCtrlDown:
				Application.InspectObj(Result,&quot;&quot;,&quot;&quot;,1,False)
		
	#except:
		#pass
	
	#Application.Preferences.SetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot;,ImmedMode )
	&quot;&quot;&quot;</QMenu_MenuItem><QMenu_MenuItem UID="{BD131248-60F5-4F08-B36D-6A3E653D917D}" category="Curve Modeling" language="Python" name="Tweak Curve" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.Commands( &quot;Direct Manip Tool&quot;  ).Execute()</QMenu_MenuItem><QMenu_MenuItem UID="{7478B26A-F53A-46BA-85DE-5A3E6DB0D44A}" category="Preferences" language="Python" name="Log Verbose Messages" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ): #Don't rename this function
	return Application.Preferences.GetPreferenceValue(&quot;scripting.msglogverbose&quot;)

def Switch_Execute(oContext ): #Don't rename this function
	Application.SetValue(&quot;preferences.scripting.msglogverbose&quot;, not Switch_Init(oContext), &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{309B038B-571C-4387-886C-5C3AA5B392BB}" category="Preferences" language="Python" name="Log Messages" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ): #Don't rename this function
	return Application.Preferences.GetPreferenceValue(&quot;scripting.msglog&quot;) 

def Switch_Execute( oContext ): #Don't rename this function
	Application.SetValue(&quot;preferences.scripting.msglog&quot;, not Switch_Init(oContext), &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{1B90F769-A049-4BE4-8B5F-DDEE1959FB1F}" category="Preferences" language="Python" name="Show Hyperlinks" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ): #Don't rename this function
	return Application.Preferences.GetPreferenceValue(&quot;scripting.cmdlinks&quot;)

def Switch_Execute(oContext): #Don't rename this function
	Application.SetValue(&quot;preferences.scripting.cmdlinks&quot;, not Switch_Init(oContext), &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{E943EF1E-292F-4616-8021-1BE3DB242D73}" category="Preferences" language="Python" name="Log Messages Real-Time" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init( oContext ): #Don't rename this function
	return Application.Preferences.GetPreferenceValue(&quot;scripting.msglogrealtime&quot;)

def Switch_Execute( oContext): #Don't rename this function
	Application.SetValue(&quot;preferences.scripting.msglogrealtime&quot;, not Switch_Init(oContext), &quot;&quot;)


</QMenu_MenuItem><QMenu_MenuItem UID="{E20A9874-315E-4A28-B974-8B10562F5FE5}" category="Preferences" language="Python" name="Edit QMenus" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	CustomParams = Application.FindObjects( &quot;&quot;, &quot;{76332571-D242-11d0-B69C-00AA003B3EA6}&quot; )
	for CP in CustomParams:
		if CP.Type == (&quot;QMenuConfigurator&quot;):
			Application.InspectObj (CP)
			return
			</QMenu_MenuItem><QMenu_MenuItem UID="{8FFC36A5-A7B1-4ED4-9E2A-C97D995D05D7}" category="Preferences" language="Python" name="QPop enabled" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init ( oContext ): #Don't rename this function
	return Application.GetValue(&quot;preferences.QMenu.QMenuEnabled&quot;)

def Switch_Execute ( oContext ): #Don't rename this function
	Application.SetValue(&quot;preferences.QMenu.QMenuEnabled&quot;, not Switch_Init(oContext))

</QMenu_MenuItem><QMenu_MenuItem UID="{172FAF42-33B0-478A-B484-89BB85CA4C44}" category="Curve Modeling" language="Python" name="Make Knots Bezier" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext ): #Dont rename this function 
	Application.SetCurveKnotMultiplicity(Application.Selection, 3, &quot;siPersistentOperation&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{75359886-6E92-4272-857A-860D7788E6C3}" category="Curve Modeling" language="Python" name="Make Knots Non-Bezier" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.SetCurveKnotMultiplicity(Application.Selection, 1, &quot;siPersistentOperation&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{D441A422-08A7-476C-8BBE-CBBFD000D88B}" category="Curve Modeling" language="Python" name="Insert Bezier Knot" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext ): #Dont rename this function 
	Application.InsertCurveKnot(Application.Selection, 3, &quot;siPersistentOperation&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{8150C63E-85ED-475F-A98A-4BF6D9BFEDB7}" category="Property Editing" language="Python" name="Rename" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Application.InspectObj(Application.Selection, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
</QMenu_MenuItem><QMenu_MenuItem UID="{ABE9DEF0-4BA7-43C2-87A5-462CDDD1FFF7}" category="Selection" language="Python" name="Info Selection..." scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext ): #Dont rename this function 
	Application.InfoSelection(Application.Selection.GetAsText())</QMenu_MenuItem><QMenu_MenuItem UID="{46F00479-493B-4023-ADFA-025B76F8A5D8}" category="Selection" language="Python" name="Inspect Materials..." scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Dont rename this function 
	Mats = list()
	for oObj in Application.Selection:
		try:
			Mats.append(oObj.Material)
		except:
			pass

	Application.InspectObj(Mats)</QMenu_MenuItem><QMenu_MenuItem UID="{8BDE72CB-0FFB-47EB-99C7-0C4D21FEB169}" category="Primitives" language="Python" name="Mesh Disc" scanDepth="999999999" switch="False" type="QMenu_MenuItem"># For whatever reason the Disc mesh primitive is the only one that does not come with it's
# own command for generation, so we have to provide a scripted menu item for it

def Script_Execute (oContext): #Dont rename this function 
	Application.CreatePrim(&quot;Disc&quot;, &quot;MeshSurface&quot;, &quot;&quot;, &quot;&quot;)
</QMenu_MenuItem><QMenu_MenuItem UID="{13A18DC4-BA9E-4872-8F1A-D82E4AE8DD45}" category="Surface Modeling" language="Python" name="Insert Knot Curve" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.Commands(&quot;Insert Surface Knot&quot;).Execute()</QMenu_MenuItem><QMenu_MenuItem UID="{D566DFA7-AC84-46C0-80F7-C91C3DCA2C2B}" category="Surface Modeling" language="Python" name="Remove Knot Curve" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.Commands(&quot;Remove Surface Knot&quot;).Execute()

</QMenu_MenuItem><QMenu_MenuItem UID="{68215A00-FD29-4018-9B0C-0AE7044AA89A}" category="Curve Modeling" language="Python" name="Create Empty Curve" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	result = Application.SICreateCurve()
	Application.SelectObj(result)
</QMenu_MenuItem><QMenu_MenuItem UID="{41E18FBE-6CDC-490B-A732-0ACB5CAC9905}" category="Curve Modeling" language="Python" name="Draw Cubic Curve by CVs" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.CVNURBSCurveTool()</QMenu_MenuItem><QMenu_MenuItem UID="{22B18005-02E5-4EA1-BD03-9C8B37AC165A}" category="Curve Modeling" language="Python" name="Draw Cubic Curve by Bezier-Knots" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.BezierCurveTool()
</QMenu_MenuItem><QMenu_MenuItem UID="{D65D5C04-1A76-4181-849F-6CF77AC855ED}" category="Curve Modeling" language="Python" name="Draw Linear Curve" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.LinearCurveTool()
</QMenu_MenuItem><QMenu_MenuItem UID="{BD705E06-AD0D-4B18-95FC-FBCFF74E776C}" category="Curve Modeling" language="Python" name="Draw Cubic Curve By Knot-Points" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.NURBSCurveTool()
</QMenu_MenuItem><QMenu_MenuItem UID="{BFDA267D-7F10-45B0-A0A4-B1E80DF8809C}" category="Views" language="Python" name="Camera Display Options" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	CamDisplayOptionsPropName =  (oCam.FullName + &quot;.camdisp&quot;)
	Application.InspectObj(CamDisplayOptionsPropName)</QMenu_MenuItem><QMenu_MenuItem UID="{77C83FB4-67AF-46D9-883B-44B947E57CFB}" category="Dummy Items - Do not delete!" language="Python" name="Dummy_LightSelector" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	oLight = Application.Dictionary.GetObject(&quot;LIGHTNAME&quot;,False)
	objList = [oLight]
	keyPressed = Application.GetKeyboardState()[1]
	bCtrlDown = (keyPressed == 2 or keyPressed == 3)
	bAutoInspect = Application.GetValue('preferences.Interaction.autoinspect')
	if keyPressed == 1 or keyPressed == 3:
		try:
			Application.AddToSelection(objList, &quot;&quot;, False)
		except:
			Application.LogMessage(&quot;Could not add LIGHTNAME to current selection .It might already be selected.&quot;)
			
	else:
		Application.SelectObj(&quot;LIGHTNAME&quot;,&quot;&quot;,&quot;&quot;)
	if bAutoInspect and bCtrlDown == False:
		Application.InspectObj(&quot;LIGHTNAME&quot;)
	if (bAutoInspect == False and bCtrlDown == True):
		Application.InspectObj(&quot;LIGHTNAME&quot;)

	
	</QMenu_MenuItem><QMenu_MenuItem UID="{933CAE45-38B0-4C23-AD9A-F0E342E1E724}" category="Dummy Items - Do not delete!" language="Python" name="Dummy_CameraSelector" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	oLight = Application.Dictionary.GetObject(&quot;CAMNAME&quot;,False)
	objList = [oLight]
	keyPressed = Application.GetKeyboardState()[1]
	bCtrlDown = (keyPressed == 2 or keyPressed == 3)
	bAutoInspect = Application.GetValue('preferences.Interaction.autoinspect')
	if keyPressed == 1 or keyPressed == 3:
		try:
			Application.AddToSelection(objList, &quot;&quot;, False)
		except:
			Application.LogMessage(&quot;Could not add CAMNAME to current selection .It might already be selected.&quot;)
			
	else:
		Application.SelectObj(&quot;CAMNAME&quot;,&quot;&quot;,&quot;&quot;)
	if bAutoInspect and bCtrlDown == False:
		Application.InspectObj(&quot;CAMNAME&quot;)
	if (bAutoInspect == False and bCtrlDown == True):
		Application.InspectObj(&quot;CAMNAME&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{5DD25E3F-7B5D-49FB-B917-DA9A6D09AF79}" category="Views" language="Python" name="Open Cache Manager" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;Cache Manager&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{A4D68777-4713-43F6-888D-86F2D541F822}" category="Views" language="Python" name="Open Scene Search" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;Scene Search&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{A74255B8-5119-428A-98B1-FD3EBEF39E1F}" category="Views" language="Python" name="Open Scene Debugger" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;Scene Debugger&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{291E1358-4818-4063-8D2E-AAE00BECE2CA}" category="Views" language="Python" name="Open External Files Manager" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;External Files Manager&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{82C8FA4D-F577-4F5E-B200-19115B3A1CBE}" category="Views" language="Python" name="Open Browser" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;Browser&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{90B7A610-306E-4D35-903D-B4183E63190F}" category="Views" language="Python" name="Open Render Manager" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;Render Manager&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{E0B34A05-01E2-430D-B3BB-6C17514687F4}" category="Views" language="Python" name="Open Material Manager" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;Material Manager&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{4ACB1F09-E6A1-4D2E-91F2-C6A54E66E304}" category="Views" language="Python" name="Open Texture Editor" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;Texture Editor&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{1F6BB74C-D655-443E-9CA6-542601F6EFCC}" category="Group Editing" language="Python" name="Remove Group" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.RemoveGroup()
</QMenu_MenuItem><QMenu_MenuItem UID="{622CC2C8-92FC-4634-AE00-AE316FE09601}" category="Group Editing" language="Python" name="Add To Group" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.AddToGroup()</QMenu_MenuItem><QMenu_MenuItem UID="{90E838C9-3809-4BA1-89F5-862DD2AAE4FB}" category="Group Editing" language="Python" name="Remove From Group" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.RemoveFromGroup()</QMenu_MenuItem><QMenu_MenuItem UID="{6190BF22-280B-4AEF-B857-BA1B2CB8F601}" category="Views" language="Python" name="Backface Culling" scanDepth="999999999" switch="True" type="QMenu_MenuItem">def Switch_Init ( oContext ): #Don't rename this function
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	A = Application.GetValue (oCam.FullName + &quot;.camdisp.culbackface&quot;)
	return A

def Switch_Execute ( oContext ): #Don't rename this function
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	A = Application.GetValue (oCam.FullName + &quot;.camdisp.culbackface&quot;)
	Application.SetValue (oCam.FullName + &quot;.camdisp.culbackface&quot;, (not A))
</QMenu_MenuItem><QMenu_MenuItem UID="{7117CEBC-4E9B-4A72-92D5-F563A07532CA}" category="Shading Nodes" language="Python" name="Phong Shader" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	View = oContext.CurrentXSIView
	if (View != None) and (View.Type  == &quot;Render Tree&quot;):
		ActiveMaterial = View.GetAttributeValue(&quot;container&quot;)
		if ActiveMaterial != &quot;&quot;: #returned Material container is of type string
			Application.CreateShaderFromProgID(&quot;Softimage.material-phong.1.0&quot;, ActiveMaterial, &quot;Phong&quot;)
</QMenu_MenuItem><QMenu_MenuItem UID="{9B00F40D-E627-4643-B722-E2119F6ECB09}" category="Shading Nodes" language="Python" name="Blinn Shader" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	View = oContext.CurrentXSIView
	if (View != None) and (View.Type  == &quot;Render Tree&quot;):
		ActiveMaterial = View.GetAttributeValue(&quot;container&quot;)
		if ActiveMaterial != &quot;&quot;: #returned Material container is of type string
			Application.CreateShaderFromProgID(&quot;Softimage.material-blinn.1.0&quot;, ActiveMaterial, &quot;Blinn&quot;)
</QMenu_MenuItem><QMenu_MenuItem UID="{159AFFB3-916A-4CF8-8644-5D6255DE7285}" category="Shading Nodes" language="Python" name="Architectural Shader" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	View = oContext.CurrentXSIView
	if (View != None) and (View.Type  == &quot;Render Tree&quot;):
		ActiveMaterial = View.GetAttributeValue(&quot;container&quot;)
		if ActiveMaterial != &quot;&quot;: #returned Material container is of type string
			Application.CreateShaderFromProgID(&quot;Softimage.mia_material_phen.1.0&quot;, ActiveMaterial , &quot;Architectural&quot;)
</QMenu_MenuItem><QMenu_MenuItem UID="{5914622E-7069-4911-8767-FD66710547BA}" category="Property Editing" language="Python" name="+33%" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 1.333333333333
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{73E6CF32-491C-4A12-854E-468DBFB2E333}" category="Property Editing" language="Python" name="-33%" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 0.666666666666
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{E2536774-6B56-482F-897F-595628DE44A6}" category="Property Editing" language="Python" name="0.33" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.33,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,0.33,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{D2222195-06B4-420F-93E7-909A56B322F1}" category="Property Editing" language="Python" name="*2" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 2
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{493E0AA0-C1E6-489E-AB61-5A66AD9EE8E4}" category="Property Editing" language="Python" name="*10" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 10
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{7EDA832C-F97A-415A-B048-23446C85300C}" category="Property Editing" language="Python" name="100" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 100
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							Application.SetValue (Parameter.FullName,Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{48C4D193-C330-40DF-8939-A91108F5DD8C}" category="Property Editing" language="Python" name="*3" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 3
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{C5A13FAA-4BBF-406A-B3F4-8904305182CB}" category="Property Editing" language="Python" name="*1.5" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 1.5
	MarkedParams = Application.GetMarking()
	#print (&quot;Marked Params are: &quot; + str(MarkedParams))
	#print (&quot;X3DObjects are: &quot; + str(oContext.X3DObjects))
	if MarkedParams != None:

		if len(MarkedParams) &gt; 0:

			for oObj in oContext.X3DObjects:

				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					#print (&quot;Object Type is: &quot; + Application.Dictionary.GetObject(FullParamName).Type )
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						#print (&quot;Full Param Name is: &quot; + FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{15D548EE-722F-438D-9348-782C718AF0DF}" category="Property Editing" language="Python" name="*100" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute ( oContext ): #Don't rename this function
	#Application.QMenuRefreshSelectionContextObject(9999999)
	Factor = 100
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in oContext.X3DObjects:
				for oParam in MarkedParams:
					FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
					if Application.Dictionary.GetObject(FullParamName).Type == &quot;Parameter&quot;:
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,CurrentVal*Factor,&quot;&quot;)
					else:
						Params = Application.Dictionary.GetObject(FullParamName)
						for Parameter in Params.Parameters:
							CurrentVal = Application.GetValue(Parameter.FullName)
							Application.SetValue (Parameter.FullName,CurrentVal*Factor,&quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{8D891A70-DB90-425F-B36F-F6F4B46483DA}" category="Views" language="Python" name="Open Plugin Manager" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Application.OpenView(&quot;Plugin Manager&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{E754BB16-7104-40BB-A3D3-16D98644567C}" category="Dummy Items - Do not delete!" language="Python" name="Dummy_CreateICENode" scanDepth="999999999" switch="False" type="QMenu_MenuItem"># Dynamic ICE menu code generated from Dummy_CreateICENode
# If you want to write your own menu items for use in the ICE Tree window it would be much less complicated. 
# Most of the code below is handling the dynamic menu item creation and destruction 
# (depending on which key was pressed by the user when menu item was clicked)

def Script_Execute (oContext): #Dont rename this function 
	siWarning = 4
	ClickedMenuItemNumber = oContext.ClickedMenuItemNumber #Get the clicked menu item number
	oClickedMenu = oContext.ClickedMenu #Get the Menu object in which user has clicked
	oView = oContext.CurrentXSIView #Get the current Softimage view object
	if (oView != None) and (oView.Type  == &quot;ICE Tree&quot;): #Are we working in an ICE Tree view?
		ActiveIceOpFullName = oView.GetAttributeValue(&quot;container&quot;) #Get the ICE Op
		if ActiveIceOpFullName != &quot;&quot;: #Value type of returned ICE container is &quot;string&quot;, make sure it's not empty before we continue...
			
			# If Shift was pressed, add the recently created ICE node as a new Menu item
			# Lets see if the user pressed any modifier keys. When ALt was pressed while clicking the menu item, delete the clicked menu item.
			
			keyState = Application.GetKeyboardState() #Get currently pressed modifier keys (Shift, Ctrl, Alt)

			if keyState[1] == 1: #Is Shift pressed? -&gt; Try adding the last created ICE/Render node to the clicked QMenu in case its Softimage 2012 or higher
				if oContext.SoftimageMainVersion &gt;= 10: #Adding menu items from recently created ICE nodes only works in XSI 2012 and later
					globalQMenuItems = oContext.MenuItems
					if (len(oContext.LastICENodes)&gt;0): #Do we have a recently created ICE node in the list?
						LastCreatedNodeString = oContext.LastICENodes[len(oContext.LastICENodes)-1] #Get Node creation command and Preset name from the recorded list of recently created ICE nodes
						print (&quot;Last Created Node String was: &quot; + LastCreatedNodeString)
						LastCreatedNodeData = LastCreatedNodeString.split(&quot;;&quot;) #Convert the string to a list separated by &quot;;&quot;
						SelectedNodeFullName = oView.GetAttributeValue(&quot;selection&quot;) #Get the last ICE node's name in the scene
						if SelectedNodeFullName != &quot;&quot;:
							print (&quot;SelectedNodes full name is: &quot; + str(SelectedNodeFullName))
							oSelectedNode = Application.Dictionary.GetObject(SelectedNodeFullName) #Get the actual Node object from the name by looking it up in the dictionary
						if oSelectedNode != None: #We have an actual object?
							SelectedNodeName = oSelectedNode.Name
							NewMenuItem = Application.QMenuGetByName(&quot;MenuItem&quot;, SelectedNodeName)
							if NewMenuItem == None:
								IceCommand = LastCreatedNodeData[0] #Get node creation command that was used create the last ICE node (commands differ depending on type of node created, like compounds or base nodes)
								Application.LogMessage(&quot;Last ICECOMMAND was :&quot; + str(IceCommand))
								Preset = LastCreatedNodeData[1] #Get ICE node's preset file path
								
								#Get the dummy code
								DummyMenuItem =  Application.QMenuGetByName(&quot;MenuItem&quot;,&quot;Dummy_CreateICENode&quot;)
								MenuItemCode = DummyMenuItem.Code
				
								#Concatenate the keywords, they should not appear in one string here so they are not accidentally replaced by the menu's code
								MenuItemCode = DummyMenuItem.Code
								MenuItemCode = MenuItemCode.replace((&quot;ICE&quot; + &quot;COMMAND&quot;), IceCommand) 
								MenuItemCode = MenuItemCode.replace((&quot;PRE&quot; + &quot;SET&quot;), Preset)
								print (&quot;/n&quot;)
								print &quot;##################&quot;
								print (MenuItemCode)
								print &quot;##################&quot;

								#Assemble new menu item from data we have aquired
								NewMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
								NewMenuItem.Code = MenuItemCode
								NewMenuItem.Name = SelectedNodeName
								NewMenuItem.Category = &quot;ICE&quot;
														
								Application.LogMessage(&quot;Shift key was pressed -&gt; Adding a new menu item for most recently created ICE Node &quot; + SelectedNodeName )
								globalQMenuItems.addMenuItem(NewMenuItem) #Also store it in the global list of menu items in case user wants to safe the file
							else:
								Application.LogMessage(&quot;Shift key was pressed -&gt; Adding an already existing menu item for most recently created ICE Node &quot; + SelectedNodeName )
							
							oClickedMenu.insertMenuItem( ClickedMenuItemNumber , NewMenuItem ) #Store the new menu item in the clicked menu
							
								
						else:
							Application.LogMessage(&quot;No ICE node was selected to derive the new Menu Item's name from. Create A new node, leave it selected and try again please.&quot;,siWarning)
				else:
					Application.LogMessage(&quot;Sorry, creating menu items for ICE nodes only works in Softimage 2012&quot;, siWarning)

			#Was/is  the Alt key pressed? -&gt; Remove the clicked Menu Item from the QMenu
			if (keyState[1] == 4): 
				oClickedMenu.removeMenuItemAtIndex (ClickedMenuItemNumber)
			
			#Neither Alt nor Shift keys are pressed, execute the menu item normally
			if (keyState[1] != 1 and keyState[1] != 4): 
				Application.ICECOMMAND (&quot;PRESET&quot;, ActiveIceOpFullName)</QMenu_MenuItem><QMenu_MenuItem UID="{5DF913AD-02B1-474D-9985-BFED47EB22C3}" category="Dummy Items - Do not delete!" language="Python" name="Dummy_CreateFirstICENode" scanDepth="999999999" switch="False" type="QMenu_MenuItem"># Dynamic ICE menu code generated from Dummy_CreateFirstICENode
# If you want to write your own menu items for use in the ICE Tree window it would be much less complicated than this example. 
# Most of the code below is handling the dynamic menu item creation and destruction 
# (depending on which key was pressed by the user when the menu item was clicked)

def Script_Execute (oContext): #Dont rename this function 
	siWarning = 4
	ClickedMenuItemNumber = oContext.ClickedMenuItemNumber #Get the clicked menu item number
	oClickedMenu = oContext.ClickedMenu #Get the Menu object in which user has clicked
	oView = oContext.CurrentXSIView #Get the current Softimage view object
	if (oView != None) and (oView.Type  == &quot;ICE Tree&quot;): #Are we working in an ICE Tree view?
		ActiveIceOpFullName = oView.GetAttributeValue(&quot;container&quot;) #Get the ICE Op
		if ActiveIceOpFullName != &quot;&quot;: #Value type of returned ICE container is &quot;string&quot;, make sure it's not empty before we continue...
			
			# If Shift was pressed, add the recently created ICE node as a new Menu item
			# Lets see if the user pressed any modifier keys. When ALt was pressed while clicking the menu item, delete the clicked menu item.
			
			keyState = Application.GetKeyboardState() #Get currently pressed modifier keys (Shift, Ctrl, Alt)

			if keyState[1] == 1: #Is Shift pressed? -&gt; Try adding the last created ICE/Render node to the clicked QMenu in case its Softimage 2012 or higher
				if oContext.SoftimageMainVersion &gt;= 10: #Adding menu items from recently created ICE nodes only works in XSI 2012 and later
					globalQMenuItems = oContext.MenuItems
					if (len(oContext.LastICENodes)&gt;0): #Do we have a recently created ICE node in the list?
						LastCreatedNodeString = oContext.LastICENodes[len(oContext.LastICENodes)-1] #Get Node creation command and Preset name from the recorded list of recently created ICE nodes
						print (&quot;Last Created Node String was: &quot; + LastCreatedNodeString)
						LastCreatedNodeData = LastCreatedNodeString.split(&quot;;&quot;) #Convert the string to a list separated by &quot;;&quot;
						SelectedNodeFullName = oView.GetAttributeValue(&quot;selection&quot;) #Get the last ICE node's name in the scene
						if SelectedNodeFullName != &quot;&quot;:
							print (&quot;SelectedNodes full name is: &quot; + str(SelectedNodeFullName))
							oSelectedNode = Application.Dictionary.GetObject(SelectedNodeFullName) #Get the actual Node object from the name by looking it up in the dictionary
						if oSelectedNode != None: #We have an actual object?
							SelectedNodeName = oSelectedNode.Name
							NewMenuItem = Application.QMenuGetByName(&quot;MenuItem&quot;, SelectedNodeName)
							if NewMenuItem == None:
								IceCommand = LastCreatedNodeData[0] #Get node creation command that was used create the last ICE node (commands differ depending on type of node created, like compounds or base nodes)
								Application.LogMessage(&quot;Last ICECOMMAND was :&quot; + str(IceCommand))
								Preset = LastCreatedNodeData[1] #Get ICE node's preset file path
								
								#Get the dummy code
								DummyMenuItem =  Application.QMenuGetByName(&quot;MenuItem&quot;,&quot;Dummy_CreateICENode&quot;)
								MenuItemCode = DummyMenuItem.Code
				
								#Concatenate the keywords, they should not appear in one string here so they are not accidentally replaced by the menu's code
								MenuItemCode = DummyMenuItem.Code
								MenuItemCode = MenuItemCode.replace((&quot;ICE&quot; + &quot;COMMAND&quot;), IceCommand) 
								MenuItemCode = MenuItemCode.replace((&quot;PRE&quot; + &quot;SET&quot;), Preset)
								print (&quot;/n&quot;)
								print &quot;##################&quot;
								print (MenuItemCode)
								print &quot;##################&quot;

								#Assemble new menu item from data we have aquired
								NewMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
								NewMenuItem.Code = MenuItemCode
								NewMenuItem.Name = SelectedNodeName
								NewMenuItem.Category = &quot;ICE&quot;
														
								Application.LogMessage(&quot;Shift key was pressed -&gt; Adding a new menu item for most recently created ICE Node &quot; + SelectedNodeName )
								globalQMenuItems.addMenuItem(NewMenuItem) #Also store it in the global list of menu items in case user wants to safe the file
							else:
								Application.LogMessage(&quot;Shift key was pressed -&gt; Adding an already existing menu item for most recently created ICE Node &quot; + SelectedNodeName )
							
							oClickedMenu.insertMenuItem( ClickedMenuItemNumber , NewMenuItem ) #Store the new menu item in the clicked menu
							
								
						else:
							Application.LogMessage(&quot;No ICE node was selected to derive the new Menu Item's name from. Create A new node, leave it selected and try again please.&quot;,siWarning)
				else:
					Application.LogMessage(&quot;Sorry, creating menu items for ICE nodes only works in Softimage 2012&quot;, siWarning)

			#Was/is  the Alt key pressed? -&gt; Default ICE Menu item cannot be removed
			if (keyState[1] == 4):
				Application.LogMessage(&quot;Alt-key was pressed, but default ICE node menu item cannot be removed from this menu.&quot;, siWarning)
</QMenu_MenuItem><QMenu_MenuItem UID="{00A4B31F-6DDB-4480-96C9-EBF8054845FB}" category="ICE Nodes" language="Python" name="Create ICE Tree" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Sel = Application.Selection.GetAsText()
	from win32com.client import constants as c
	for obj in oContext.X3DObjects:
		Application.ApplyOp(&quot;ICETree&quot;, obj , c.siNode , &quot;&quot;, &quot;&quot;, 0)
	
	#Refresh the view
	oContext.CurrentXSIView.SetAttributeValue(&quot;refresh&quot;, &quot;&quot;)
	</QMenu_MenuItem><QMenu_MenuItem UID="{518AE4A7-1AAF-40DF-A253-7096BF793BEA}" category="ICE Nodes" language="Python" name="Create Simulated ICE Tree" scanDepth="999999999" switch="False" type="QMenu_MenuItem">def Script_Execute (oContext): #Dont rename this function 
	Sel = Application.Selection.GetAsText()
	from win32com.client import constants as c
	for obj in oContext.X3DObjects:
		Application.CreateSimulatedICETree ( obj , c.siNode , &quot;&quot;)
	
	#Refresh the view
	oContext.CurrentXSIView.SetAttributeValue(&quot;refresh&quot;, &quot;&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{F28C0A20-3BC1-4714-A842-3684B20443E7}" category="Dummy Items - Do not delete!" language="Python" name="Dummy_CreateFirstShadingNode" scanDepth="999999999" switch="False" type="QMenu_MenuItem"># Dynamic ICE menu code generated from Dummy_CreateICENode
# If you want to write your own menu items for use in the ICE Tree window it would be much less complicated. 
# Most of the code below is handling the dynamic menu item creation and destruction 
# (depending on which key was pressed by the user when menu item was clicked)

def Script_Execute (oContext): #Dont rename this function 
	siWarning = 4
	ClickedMenuItemNumber = oContext.ClickedMenuItemNumber #Get the clicked menu item number
	oClickedMenu = oContext.ClickedMenu #Get the Menu object in which user has clicked
	oView = oContext.CurrentXSIView #Get the current Softimage view object
	if (oView != None) and (oView.Type  == &quot;Render Tree&quot;): #Are we working in an ICE Tree view?
		ActiveIceOpFullName = oView.GetAttributeValue(&quot;container&quot;) #Get the ICE Op
		if ActiveIceOpFullName != &quot;&quot;: #Value type of returned ICE container is &quot;string&quot;, make sure it's not empty before we continue...
			
			# If Shift was pressed, add the recently created ICE node as a new Menu item
			# Lets see if the user pressed any modifier keys. When ALt was pressed while clicking the menu item, delete the clicked menu item.
			
			keyState = Application.GetKeyboardState() #Get currently pressed modifier keys (Shift, Ctrl, Alt)

			if keyState[1] == 1: #Is Shift pressed? -&gt; Try adding the last created ICE/Render node to the clicked QMenu in case its Softimage 2012 or higher
				if oContext.SoftimageMainVersion &gt;= 10: #Adding menu items from recently created ICE nodes only works in XSI 2012 and later
					globalQMenuItems = oContext.MenuItems
					if (len(oContext.LastICENodes)&gt;0): #Do we have a recently created ICE node in the list?
						LastCreatedNodeString = oContext.LastICENodes[len(oContext.LastICENodes)-1] #Get Node creation command and Preset name from the recorded list of recently created ICE nodes
						print (&quot;Last Created Node String was: &quot; + LastCreatedNodeString)
						LastCreatedNodeData = LastCreatedNodeString.split(&quot;;&quot;) #Convert the string to a list separated by &quot;;&quot;
						SelectedNodeFullName = oView.GetAttributeValue(&quot;selection&quot;) #Get the last ICE node's name in the scene
						if SelectedNodeFullName != &quot;&quot;:
							print (&quot;SelectedNodes full name is: &quot; + str(SelectedNodeFullName))
							oSelectedNode = Application.Dictionary.GetObject(SelectedNodeFullName) #Get the actual Node object from the name by looking it up in the dictionary
						if oSelectedNode != None: #We have an actual object?
							SelectedNodeName = oSelectedNode.Name
							NewMenuItem = Application.QMenuGetByName(&quot;MenuItem&quot;, SelectedNodeName)
							if NewMenuItem == None:
								IceCommand = LastCreatedNodeData[0] #Get node creation command that was used create the last ICE node (commands differ depending on type of node created, like compounds or base nodes)
								Application.LogMessage(&quot;Last ICECOMMAND was :&quot; + str(IceCommand))
								Preset = LastCreatedNodeData[1] #Get ICE node's preset file path
								
								#Get the dummy code
								DummyMenuItem =  Application.QMenuGetByName(&quot;MenuItem&quot;,&quot;Dummy_CreateICENode&quot;)
								MenuItemCode = DummyMenuItem.Code
				
								#Concatenate the keywords, they should not appear in one string here so they are not accidentally replaced by the menu's code
								MenuItemCode = DummyMenuItem.Code
								MenuItemCode = MenuItemCode.replace((&quot;ICE&quot; + &quot;COMMAND&quot;), IceCommand) 
								MenuItemCode = MenuItemCode.replace((&quot;PRE&quot; + &quot;SET&quot;), Preset)
								print (&quot;/n&quot;)
								print &quot;##################&quot;
								print (MenuItemCode)
								print &quot;##################&quot;

								#Assemble new menu item from data we have aquired
								NewMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
								NewMenuItem.Code = MenuItemCode
								NewMenuItem.Name = SelectedNodeName
								NewMenuItem.Category = &quot;ICE&quot;
														
								Application.LogMessage(&quot;Shift key was pressed -&gt; Adding a new menu item for most recently created ICE Node &quot; + SelectedNodeName )
								globalQMenuItems.addMenuItem(NewMenuItem) #Also store it in the global list of menu items in case user wants to safe the file
							else:
								Application.LogMessage(&quot;Shift key was pressed -&gt; Adding an already existing menu item for most recently created ICE Node &quot; + SelectedNodeName )
							
							oClickedMenu.insertMenuItem( ClickedMenuItemNumber , NewMenuItem ) #Store the new menu item in the clicked menu
							
								
						else:
							Application.LogMessage(&quot;No ICE node was selected to derive the new Menu Item's name from. Create A new node, leave it selected and try again please.&quot;,siWarning)
				else:
					Application.LogMessage(&quot;Sorry, creating menu items for ICE nodes only works in Softimage 2012&quot;, siWarning)

			#Was/is  the Alt key pressed? -&gt; Remove the clicked Menu Item from the QMenu
			if (keyState[1] == 4): 
				oClickedMenu.removeMenuItemAtIndex (ClickedMenuItemNumber)
			
			#Neither Alt nor Shift keys are pressed, execute the menu item normally
			if (keyState[1] != 1 and keyState[1] != 4): 
				Application.ICECOMMAND (&quot;PRESET&quot;, ActiveIceOpFullName)</QMenu_MenuItem></QMenu_MenuItems><QMenu_Menus><QMenu_Menu executeCode="False" items="Command;Mark Hard Edge Vertex;{50830560-31B5-11D0-82E7-00A0243E268D}:{71CFB7B5-2B33-11D4-B840-009027BC6587};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Weld Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{8B4285B7-97C9-4893-A914-EA36F20E509F};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Weld Points to Target;{50830560-31B5-11D0-82E7-00A0243E268D}:{E5F394BB-72F7-49AC-B3A9-E1F7AE5E9D48};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Filter Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{AD25FA37-856E-4AA4-83F3-352713319986};Command;Paint Push Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0EB424E5-84F7-11D4-8094-00A0C9ED67BD};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B}" language="Python" name="Edit Polymesh Points" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Mark Hard Edge Vertex;{50830560-31B5-11D0-82E7-00A0243E268D}:{71CFB7B5-2B33-11D4-B840-009027BC6587};Command;Set Edge Crease Value;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E9FEE12-2D9E-11D4-B841-009027BC6587};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Select Edge Loop;{50830560-31B5-11D0-82E7-00A0243E268D}:{A6ED1DB7-45B1-11D6-80CD-00A0C9ED67BD};Command;Select Boundary Edge Loop;{50830560-31B5-11D0-82E7-00A0243E268D}:{5432F035-CC9F-44B1-BFF3-9F4609B35057};Command;Select Parallel Edge Loop;{50830560-31B5-11D0-82E7-00A0243E268D}:{7C6E8253-85C0-4020-989E-774D582FE9D8};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Subdivide Edge;{50830560-31B5-11D0-82E7-00A0243E268D}:{8F1FA2AF-3635-11D4-A8AF-00C04F8EDF15};Command;Split Edge;{50830560-31B5-11D0-82E7-00A0243E268D}:{904FB220-46B2-11D4-8C28-009027BC3A0E};Command;Dissolve &amp; Clean Adjacent Vertices;{50830560-31B5-11D0-82E7-00A0243E268D}:{1D09DE94-79BA-4ADD-8F8A-ED34588877AA};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Filter Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{053894C2-8E7C-4F76-B1BB-283C34E3C420};Command;Collapse;{50830560-31B5-11D0-82E7-00A0243E268D}:{7F392188-2520-11D4-97F2-0800360BFF02};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Weld Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{61467638-32CE-48C9-971C-904D60579F1A};Command;Edge Loop Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{4B3745D7-9FB9-4F6E-B7F3-4C2B5DB61A3B};Command;Bridge Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{3AEF5A2C-40E4-4B08-AE6D-ABBC7C199907}" language="Python" name="Edit Polymesh Edges" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Dissolve &amp; Clean Adjacent Vertices;{50830560-31B5-11D0-82E7-00A0243E268D}:{1D09DE94-79BA-4ADD-8F8A-ED34588877AA};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Inset Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{61DB5CAA-03FB-497F-8AAC-A9BB5B6C72BE};Command;Offset Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{A3F7B88C-7B09-4B70-B55D-54B6D6D01BC5};Command;Local Subdivision;{50830560-31B5-11D0-82E7-00A0243E268D}:{F8842CA7-78FD-11D4-B851-009027BC6587};Command;Dice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{86B4DB7E-3569-4FD0-B8D3-05C11AA054D5};Command;Invert Selected Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{11BEB110-85B1-11D4-8C31-009027BC3A0E};Command;Dice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{86B4DB7E-3569-4FD0-B8D3-05C11AA054D5};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Disconnect Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{8582A7F9-EF44-4C3E-8C38-472BFD0C8414};Command;Polygon Detach;{50830560-31B5-11D0-82E7-00A0243E268D}:{4F25DC5B-7EE8-487C-B639-D1E7946A53FC};Command;Polygon Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{598E1068-B64F-47F4-8F08-99443D94B0B5};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Filter Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{1067D621-96FC-4DED-983F-E83C4D121372};Command;Polygon Reduction;{50830560-31B5-11D0-82E7-00A0243E268D}:{0488BE6A-6E7E-416B-9CAE-2A6A987BF75C};Command;Slice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{3FCF7E6F-5E01-4932-9D1A-201A269255C5};Command;Split Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{52964382-BCB8-11D4-8C4B-009027BC3A0E};Command;Subdivide Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{BC8CCEEF-370F-11D4-A8B0-00C04F8EDF15};Command;Quadrangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E71C2255-9AAF-4FF4-ABAC-4A6855C97C78};Command;Triangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{FB5B671D-C1A0-4DB6-8FF9-950A5029C2CD};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Bridge Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{95983629-72EA-11D4-A8C2-00C04F8EDF15};Command;Symmetrize Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{669FD6AA-D338-4311-9B7E-CB4A923311D1};Command;Duplicate Polygons Along Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{D1343A2C-97E5-4236-9F41-3DBD21CAD8CB}" language="Python" name="Edit Polymesh Polygons" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Unhide All Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{7BC3B51D-8FCA-4546-B99F-BDC4AE964409};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Mesh Merge;{50830560-31B5-11D0-82E7-00A0243E268D}:{AB9A5C20-5839-11D4-8C2A-009027BC3A0E};Command;Mesh Blend;{50830560-31B5-11D0-82E7-00A0243E268D}:{EB16D9E0-5CC1-11D4-8C2C-009027BC3A0E};Command;Boolean Union;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E8-8E7A-11D4-8094-00A0C9ED67BD};Command;Boolean Intersection;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E9-8E7A-11D4-8094-00A0C9ED67BD};Command;Boolean Difference;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E7-8E7A-11D4-8094-00A0C9ED67BD}" language="Python" name="Edit Polymeshes (multiple)" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Isolate Selected;{50830560-31B5-11D0-82E7-00A0243E268D}:{153189E9-79CF-4333-89A2-35D123A8B003};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Realtime Display Mode;{27A16EB1-1AED-4989-A05F-6246E5B9D0AB};QMenu_MenuItem;Textured Decal Display Mode;{7F26382E-264C-4514-B2E8-F99F0F3FC42B};QMenu_MenuItem;Textured Display Mode;{EDA55C73-2437-4BDC-B3ED-E9B4989D1184};QMenu_MenuItem;Shaded Display Mode;{4107A687-A5A3-49E9-B1B8-C151B6BA3E9E};QMenu_MenuItem;Constant Display Mode;{C3268273-A56D-4CD7-ACCC-73855708929E};QMenu_MenuItem;Hidden Line Display Mode;{A420F1E1-130C-4DC9-A5A9-29DDE8F0FD4E};QMenu_MenuItem;Depth Cue Dispay Mode;{1A0B0054-7B2B-4CAB-9FDA-88AE6C50ABC1};QMenu_MenuItem;Wireframe Display Mode;{158043D7-F83A-4354-A388-25499A8A40D7};QMenu_MenuItem;Bounding Box Display mode;{7CDC9723-3CCE-4B0D-8CF0-C4F7A1BF496D};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Backface Culling;{6190BF22-280B-4AEF-B857-BA1B2CB8F601};Command;Toggle Headlight Display Mode;{50830560-31B5-11D0-82E7-00A0243E268D}:{24D69496-C507-4447-AB77-AB60904B17DC};Command;Toggle Wire On Shaded Display;{50830560-31B5-11D0-82E7-00A0243E268D}:{2218CD14-9A9A-49CA-A33F-B61A4710BFE8};Command;Toggle Shaded Display Mode;{50830560-31B5-11D0-82E7-00A0243E268D}:{CEBDE6E3-7C57-4349-B4E9-83234DFB91D3};Command;Show/Hide Grid;{50830560-31B5-11D0-82E7-00A0243E268D}:{E56444F0-99A6-11D1-84BF-00AA00135F7B};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Maximize/Restore Current Viewport;{50830560-31B5-11D0-82E7-00A0243E268D}:{2343C950-0D21-11D3-BFE5-00A0248F9397}" language="Python" name="Display Modes" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Unhide All Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{7BC3B51D-8FCA-4546-B99F-BDC4AE964409};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Duplicate Multiple Mesh Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{6F74FAC0-5E7A-11D4-8C2C-009027BC3A0E};Command;Duplicate Single Mesh Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{AF4EDB50-5E63-11D4-8C2C-009027BC3A0E};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Slice Polygons Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{6CA134E9-64EA-494B-A7EE-E47BF8D16931};Command;Split Polygon Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{C6737510-67EA-11D4-8C2D-009027BC3A0E};Command;Add Vertex Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{64578190-B32E-11D4-8C47-009027BC3A0E};Command;Disconnect Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{8582A7F9-EF44-4C3E-8C38-472BFD0C8414};Command;Extrude Component Along Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{C8436D81-4851-11D4-B7F3-0008C7A011A6};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_Menu;Preferences &gt; Tools &gt; Polygon;{31423471-BD77-4358-A781-2EBE82B97357};QMenu_Menu;Preferences &gt; Commands &gt; Duplicate Options;{89244854-A7DB-4273-AB42-6950F4D6B0A9};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B};Command;Tweak Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0D41FF0C-8AF4-4E18-9C1B-83277ACF12EF};Command;Add Polygon Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{EFC008C0-3317-11D4-8C24-009027BC3A0E};Command;Add Edge Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{87F68420-4782-11D4-8C27-009027BC3A0E};Command;Collapse;{50830560-31B5-11D0-82E7-00A0243E268D}:{7F392188-2520-11D4-97F2-0800360BFF02};Command;Bevel;{50830560-31B5-11D0-82E7-00A0243E268D}:{9589E229-4BB4-11D4-A8B7-00C04F8EDF15};Command;Extrude Comp. Axis;{50830560-31B5-11D0-82E7-00A0243E268D}:{9E734592-4B92-11D4-B7F3-0008C7A011A6}" language="Python" name="Edit Polymesh (general)" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Filter Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{053894C2-8E7C-4F76-B1BB-283C34E3C420};Command;Filter Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{AD25FA37-856E-4AA4-83F3-352713319986};Command;Filter Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{1067D621-96FC-4DED-983F-E83C4D121372};Command;Polygon Reduction;{50830560-31B5-11D0-82E7-00A0243E268D}:{0488BE6A-6E7E-416B-9CAE-2A6A987BF75C};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Invert All Normals;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC71-F6B6-11D2-AC7E-00A02485CECB};Command;Invert Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{8DE9E423-B5F0-11D4-87B1-00A0C9ED6CE2};Command;Symmetrize Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{669FD6AA-D338-4311-9B7E-CB4A923311D1};Command;Quadrangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E71C2255-9AAF-4FF4-ABAC-4A6855C97C78};Command;Triangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{FB5B671D-C1A0-4DB6-8FF9-950A5029C2CD};Command;Paint Push Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0EB424E5-84F7-11D4-8094-00A0C9ED67BD};Command;Dice Object;{50830560-31B5-11D0-82E7-00A0243E268D}:{6AF65230-4EDA-42EB-9AC5-192F4F3916BA};Command;Subdivide;{50830560-31B5-11D0-82E7-00A0243E268D}:{60D7DF7E-B5B0-11D4-814F-00A0C9AC19A9};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;PolyMesh Subdivide With Center;{50830560-31B5-11D0-82E7-00A0243E268D}:{412F8EE6-C4E2-11D4-B863-009027BC6587}" language="Python" name="Edit Polymesh" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Tweak Curve;{BD131248-60F5-4F08-B36D-6A3E653D917D};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Add Point on Curve Tool by CVs;{50830560-31B5-11D0-82E7-00A0243E268D}:{2BB0233A-293A-44DF-8A83-FEEA941BCE9B};Command;Add Point on Curve Tool by Bezier-Knot Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{E5AB5B29-A386-4CC5-A040-34956CD44199};Command;Add Point on Curve Tool by Knot Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{46353ACD-408A-4F3F-A0BB-0244A6CC9AF5};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Delete Point on Curve Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{56F7ECF0-CD24-11D3-A9BA-009027BC65D7};Command;Raise Nurbs Curve Degree;{50830560-31B5-11D0-82E7-00A0243E268D}:{8C80C39D-F376-45DD-BE99-510CD7820EB3};Command;Insert Curve Knot;{50830560-31B5-11D0-82E7-00A0243E268D}:{E0A2FA73-6831-47AF-A7E0-428E416F041B};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Curve Extract Segment;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9A-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Curve (general)" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Align Bezier Handles;{9B136484-FDBE-4DC3-BEA1-A6AEB55292C0};QMenu_MenuItem;Align Bezier Handles Back to Forward;{83805112-1BC5-4793-AD0E-2F5E2B65DC5D};QMenu_MenuItem;Align Bezier Handles Forward to Back;{90ED438E-4BF8-4966-94FC-561006A3DC83};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Make Knots Bezier;{172FAF42-33B0-478A-B484-89BB85CA4C44};QMenu_MenuItem;Make Bezier-Knots Corners;{C3A0D53C-95AD-44D4-986D-F5AA85EF55F8};QMenu_MenuItem;Make Knot Segments Linear;{5A6AF53C-934E-425E-9A5F-432A8C09BB85};QMenu_MenuItem;Make Knots Non-Bezier;{75359886-6E92-4272-857A-860D7788E6C3};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Set Curve Knot Multiplicity;{60964B90-56F0-426E-A6F4-AD782C00CEDE};QMenu_MenuItem;Remove Knot;{EAACAC55-6BFC-47DB-A38D-B1393A9B1790};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Curve Stitch;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9F-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Curve Knot" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Insert Bezier Knot;{D441A422-08A7-476C-8BBE-CBBFD000D88B};Command;Insert Curve Knot;{50830560-31B5-11D0-82E7-00A0243E268D}:{E0A2FA73-6831-47AF-A7E0-428E416F041B}" language="Python" name="Edit NURBS Curve IsoPoint" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Subcurve Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{CB8498F3-CA7B-403B-9C97-BB79D465C2DE}" language="Python" name="Edit NURBS Curve Subcurve" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Light Inspector (+CTRL to select only)" scanDepth="999999999" type="QMenu_Menu">#The following code adds a menu item per light in the scene to the bottom of the menu 
# which selects the respective light (or inspects it when ctrl key is pressed at the same time)

def QMenu_Menu_Execute(  oContext ):	#Don't rename this function!
	self = oContext.ThisQMenuObject
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the mneu after subsequent calls
	Lights = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;light&quot;, &quot;&quot;, True)
	oDummyMenuItem = Application.QMenuGetByName(&quot;MenuItem&quot;,&quot;Dummy_LightSelector&quot;)
	DummyCode = oDummyMenuItem.Code

	for oLight in Lights:
		oLightMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
		LightSpecificCode = DummyCode.replace(&quot;LIGHTNAME&quot;, oLight.FullName)
		oLightMenuItem.Name = oLight.FullName
		oLightMenuItem.code = LightSpecificCode #Set the code in the Menu Item we have concatenated above
		self.appendTempMenuItem (oLightMenuItem) #Add the menu item to the list of temporary menu items of this menu</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_Menu;Preferences &gt; Tools &gt; Camera;{36BB97E4-BA3C-4D80-8C06-5AF8D81EC02D};Command;Visibility Options (All Cameras);{50830560-31B5-11D0-82E7-00A0243E268D}:{DD9D2CC1-4154-11D3-B7B3-0008C7A011A6};Command;Camera Visibility Options;{50830560-31B5-11D0-82E7-00A0243E268D}:{6FF26830-0D57-11D3-BFE5-00A0248F9397};QMenu_MenuItem;Camera Display Options;{BFDA267D-7F10-45B0-A0A4-B1E80DF8809C};QMenu_Menu;New Camera;{8E3D69E6-75AC-4057-838A-652625C1784B};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Top View;{4EB1CD1E-889B-432C-BE1F-93C2C8F17C17};QMenu_MenuItem;Right View;{A428F6F5-2698-434B-9AD3-B7465180A7BB};QMenu_MenuItem;Front View;{DE274524-8865-450D-AEAC-15F36AC9BC7C};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Bottom View;{C9E3FD92-C31B-40B0-8FEC-42E85815443A};QMenu_MenuItem;LeftView;{92A65447-9566-4966-8298-F16E4B49E027};QMenu_MenuItem;Back View;{931C26F0-85D0-4C4D-9F62-F3DF52FDCC76};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;User View;{A289B561-86A8-448C-A2C2-AF2A7910B388}" language="Python" name="Set View to..." scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Remove All Shaders;{50830560-31B5-11D0-82E7-00A0243E268D}:{4E4E7D06-F0D9-11D2-AA72-00AA0068D2C0};Command;Remove Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{4E4E7D04-F0D9-11D2-AA72-00AA0068D2C0};Command;Modify Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{1C73F400-24E8-11D3-BFFA-00A0248F9397};Command;SelectMaterials;{50830560-31B5-11D0-82E7-00A0243E268D}:{31E095B8-43C8-4BCD-8B4B-192CDCA534FF};QMenu_MenuItem;Merge Clusters with same Material;{7968F3BA-75B3-40BD-BAEB-ED0ACC726810}" language="Python" name="Edit Shading Nodes" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute (  oContext ):	#Don't rename this function!
	oLO = Application.Desktop.ActiveLayout;
	i = 0
	#Application.LogMessage(oLO.Views(i).Name)
	#Application.LogMessage(oLO.Views(i).GetAttributeValue(&quot;selection&quot;));
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;+100%;{2A2A718A-45C5-4915-89D2-300F2983ADBD};QMenu_MenuItem;+50%;{5A080599-B35D-496D-AF32-79A5C0B2C19A};QMenu_MenuItem;+33%;{5914622E-7069-4911-8767-FD66710547BA};QMenu_MenuItem;+10%;{600BFCD0-B35A-484C-92A9-A07E88ECDC9E};QMenu_MenuItem;+1;{78CCC962-B39D-4660-9146-6E86B3A6F3FC}" language="Python" name="Property Editing - Add Percentage" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute (  oContext ):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;-1;{0FF4812D-9FED-423E-BB70-D55B8405E7D1};QMenu_MenuItem;-10%;{A9925149-B67F-44E8-8A48-1E3D48F8D349};QMenu_MenuItem;-33%;{73E6CF32-491C-4A12-854E-468DBFB2E333};QMenu_MenuItem;-50%;{209B0599-191C-4200-9CD0-ACA396092F39}" language="Python" name="Property Editing - Subtract Percentage" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute (  oContext ):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;100;{7EDA832C-F97A-415A-B048-23446C85300C};QMenu_MenuItem;10;{9591E5E9-2F5D-4231-AD10-207845ECA773};QMenu_MenuItem;5;{15DA3968-F89C-4689-BD9A-E26F6FF490A8};QMenu_MenuItem;1;{4EF91A5A-2247-4B6B-97EA-E7F02ABCBA90};QMenu_MenuItem;0.33;{E2536774-6B56-482F-897F-595628DE44A6};QMenu_MenuItem;0.5;{4925E044-51FB-48F5-B739-B03DE62D5391};QMenu_MenuItem;0.1;{E1F6DDCE-A513-435F-A257-60FAB0C8504B};QMenu_MenuItem;0;{2E390DE6-C99F-4CE9-BEF7-09C6B0293132};QMenu_MenuItem;-1;{0FF4812D-9FED-423E-BB70-D55B8405E7D1};QMenu_MenuItem;None;{3DCF9D6F-1506-4C4E-ADEF-A050D6785753}" language="Python" name="Property Editing - Set Value" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Camera Inspector (+CTRL to select only)" scanDepth="999999999" type="QMenu_Menu">#The following code adds a menu item per camera in the scene to the bottom of the menu 
# which selects the respective light (or inspects it when ctrl key is pressed at the same time)

def QMenu_Menu_Execute(  oContext ):	#Don't rename this function!
	self = oContext.ThisQMenuObject
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cameras = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;camera&quot;, &quot;&quot;, True)
	oDummyMenuItem = Application.QMenuGetByName(&quot;MenuItem&quot;,&quot;Dummy_CameraSelector&quot;)
	DummyCode = oDummyMenuItem.Code

	for oCam in Cameras:
		oCamMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
		CameraSpecificCode = DummyCode.replace(&quot;CAMNAME&quot;, oCam.FullName)
		oCamMenuItem.Name = oCam.FullName
		oCamMenuItem.Code = CameraSpecificCode #Set the code in the Menu Item we have concatenated above
		self.appendTempMenuItem (oCamMenuItem) #Add the menu item to the list of temporary menu items of this menu</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Light Associate;{50830560-31B5-11D0-82E7-00A0243E268D}:{B9CBDE2A-4730-11D6-80CE-00A0C9ED67BD};QMenu_Menu;Edit Shading Nodes;{E0B2F257-1F76-4764-B0EB-5DF72EA9FE75}" language="Python" name="Shading Properties" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute (  oContext ):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Orbit Around Selection - Components only;{B826C60E-698E-48EF-9335-67E3CB8659E1};QMenu_MenuItem;Orbit Around Selection;{95298997-82E6-4492-AB83-66E37F9E677E};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Inspect Camera Preferences;{0DF2B85B-F3D0-4651-B068-2CE3FBB43464}" language="Python" name="Preferences &gt; Tools &gt; Camera" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Look Through Spotlight" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):	#Don't rename this function!
	self =  oContext.ThisQMenuObject
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;Light&quot;, &quot;&quot;, True)
	
	for oCam in Cams:
		if Application.GetValue(oCam.FullName + &quot;.light.Type&quot;) == 2:
			oCamItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			oCamItem.Name = oCam.FullName

			Code = ('def Script_Execute (oContext):\n\toVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )\n')
			Code+= ('\toView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)\n')
			Code += ('\toVM.SetAttributeValue(&quot;activecamera:&quot; + oView + &quot;\&quot;,&quot;' + oCam.FullName + '&quot;)\n')

			oCamItem.code = Code
			self.appendTempMenuItem (oCamItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Look Through Camera" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):	#Don't rename this function!
	self = oContext.ThisQMenuObject
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;Camera&quot;, &quot;&quot;, True)

	for oCam in Cams:
		oCamItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
		oCamItem.Name = oCam.FullName

		Code = ('def Script_Execute ( oContext ):\n\t')
		Code += ('oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )\n\t')
		Code += ('oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)\n\t')
		Code += ('oVM.SetAttributeValue(&quot;activecamera:&quot; + oView + &quot;\&quot;,&quot;' + oCam.FullName + '&quot;)\n')

		oCamItem.code = Code
		self.appendTempMenuItem (oCamItem)</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Raycast Select in Shaded Mode;{88F73183-D9C5-45A8-8687-E40CB503C9CB};QMenu_MenuItem;Raycast Select - Include Backfacing Polygons;{B3D74639-4CBB-4960-A1BB-E62D410F3C04};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Inspect Selection Preferences;{C7E00458-F6F6-4380-BD12-1664CFE14CE1}" language="Python" name="Preferences &gt; Tools &gt; Polygon" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Extrude duplicated Polygons;{F5072D80-32BC-4C37-8A53-E49FCE233E22};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Inspect Duplicate Preferences;{35793D82-F980-4BCF-8640-F70ED5D864DC}" language="Python" name="Preferences &gt; Commands &gt; Duplicate Options" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Curve Blend;{50830560-31B5-11D0-82E7-00A0243E268D}:{8BD3C851-183C-11D3-A979-00A024190119};Command;Curve Fillet;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9E-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Stitch;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9F-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Merge;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC8D-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Curves (multiple)" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Log Messages;{309B038B-571C-4387-886C-5C3AA5B392BB};QMenu_MenuItem;Log Verbose Messages;{7478B26A-F53A-46BA-85DE-5A3E6DB0D44A};QMenu_MenuItem;Log Messages Real-Time;{E943EF1E-292F-4616-8021-1BE3DB242D73};QMenu_MenuItem;Show Hyperlinks;{1B90F769-A049-4BE4-8B5F-DDEE1959FB1F};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Open Plugin Manager;{8D891A70-DB90-425F-B36F-F6F4B46483DA}" language="Python" name="Preferences &gt; Scripting" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Edit QMenus;{E20A9874-315E-4A28-B974-8B10562F5FE5};QMenu_MenuItem;QPop enabled;{8FFC36A5-A7B1-4ED4-9E2A-C97D995D05D7}" language="Python" name="Preferences &gt;  QMenu" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Curve Inverse;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC72-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Open/Close;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC89-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Shift;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC74-F6B6-11D2-AC7E-00A02485CECB};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Curve Clean;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BCA6-F6B6-11D2-AC7E-00A02485CECB};Command;Raise Nurbs Curve Degree;{50830560-31B5-11D0-82E7-00A0243E268D}:{8C80C39D-F376-45DD-BE99-510CD7820EB3};Command;Curve Reparameterize;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC7C-F6B6-11D2-AC7E-00A02485CECB};Command;Set Curve Knot Multiplicity;{50830560-31B5-11D0-82E7-00A0243E268D}:{F296A100-1154-43B6-A647-F083A5A2E592};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Curve Offset;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC92-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Fit;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BCA8-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Curve" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Invert Selection Using Filter;{50830560-31B5-11D0-82E7-00A0243E268D}:{558B6839-03E9-11D3-B89E-080036F3CC02};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Duplicate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E2B59DF2-9C38-11D3-8106-00A0C9AC19A9};Command;Clone Single;{50830560-31B5-11D0-82E7-00A0243E268D}:{E2B59DF3-9C38-11D3-8106-00A0C9AC19A9};Command;Instantiate;{50830560-31B5-11D0-82E7-00A0243E268D}:{AC8A969A-3858-42B2-9B45-24D973C44360};Command;Duplicate/Instantiate Options;{50830560-31B5-11D0-82E7-00A0243E268D}:{291E04D0-6068-11D1-9987-00A0243F0E60};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Create Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{DBB3A7E0-893D-11D2-B906-00A024C78EE3};Command;Add to Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{DBB3A7E1-893D-11D2-B906-00A024C78EE3};Command;Remove from Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{48F78661-894D-11D2-B906-00A024C78EE3};Command;Create Transform Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{23424001-3DAB-45C7-874E-3B0B1CA1186F};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Create Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{4F80D8D1-1523-11D3-AC99-0090275802BF};Command;CreateModelAndConvertToRef;{50830560-31B5-11D0-82E7-00A0243E268D}:{8A0F3216-D14B-4057-94FF-59D038516AF4};Command;Delete Model from Object;{50830560-31B5-11D0-82E7-00A0243E268D}:{8FCE53A1-FC5A-4F36-AC4D-30F0041FE013};Command;Select Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{C973C090-1FAB-11D3-8BE6-00AA006130EF}" language="Python" name="Edit Selection 1" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Remove Transform Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{B8ECB928-8AA6-4F73-8698-C50F1AFC0547}" language="Python" name="Edit Transform Groups" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Info Selection;{50830560-31B5-11D0-82E7-00A0243E268D}:{4BDCDC62-E18E-11D3-8079-00A0C9ED67BD};Command;Open Transient Explorer;{50830560-31B5-11D0-82E7-00A0243E268D}:{C80E3C80-3D4E-44BF-803C-BD0EAD5B6B6F};Command;Open Attachments;{50830560-31B5-11D0-82E7-00A0243E268D}:{F9250A38-F848-11D4-BEAF-00A0C982DDD4};Command;Inspect Kinematics;{50830560-31B5-11D0-82E7-00A0243E268D}:{FAD01101-9132-11D3-B4A7-009027BC38D5};Command;Open Animation Editor on Kinematics;{50830560-31B5-11D0-82E7-00A0243E268D}:{E1336909-1FE2-11D5-BCEE-00D0B719022B};QMenu_MenuItem;Inspect Materials...;{46F00479-493B-4023-ADFA-025B76F8A5D8};Command;Last Operator in Stack;{50830560-31B5-11D0-82E7-00A0243E268D}:{CBC44EA0-5121-11D4-BC98-00D0B719022B};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Open QMenu Editor;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{96107F46-7337-7C1E-9617-C2D0D36CC419}" language="Python" name="Edit Selection 2" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Invert All Normals;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC71-F6B6-11D2-AC7E-00A02485CECB};Command;Surface Clean;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9D-F6B6-11D2-AC7E-00A02485CECB};Command;Surface Reparameterize;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC7D-F6B6-11D2-AC7E-00A02485CECB};Command;Surface Shift;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC73-F6B6-11D2-AC7E-00A02485CECB};Command;Surface Swap;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC77-F6B6-11D2-AC7E-00A02485CECB};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Trim by Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{A28F1C4F-54B1-4956-8196-F61C500107E6};Command;Delete Trim;{50830560-31B5-11D0-82E7-00A0243E268D}:{3865C0FE-3A22-4B99-854A-7E02F1AD6833};Command;Continuity Manager;{50830560-31B5-11D0-82E7-00A0243E268D}:{38B826F4-06F5-11D3-B802-00A0243E3694};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Nurbs to Mesh;{50830560-31B5-11D0-82E7-00A0243E268D}:{4B18EA12-8050-11D4-80CB-001083346722};Command;Surface Fit;{50830560-31B5-11D0-82E7-00A0243E268D}:{37B8F9C1-0404-11D4-A9CC-009027BC65D7};Command;Curve Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC99-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Project;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BCA2-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Surface" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute(  oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Draw Cubic Curve by CVs;{41E18FBE-6CDC-490B-A732-0ACB5CAC9905};QMenu_MenuItem;Draw Cubic Curve by Bezier-Knots;{22B18005-02E5-4EA1-BD03-9C8B37AC165A};QMenu_MenuItem;Draw Cubic Curve By Knot-Points;{BD705E06-AD0D-4B18-95FC-FBCFF74E776C};QMenu_MenuItem;Draw Linear Curve;{D65D5C04-1A76-4181-849F-6CF77AC855ED};Command;Sketch Curve Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{126FCF21-A7CB-11D1-A8FE-00A024190119};QMenu_MenuItem;Create Empty Curve;{68215A00-FD29-4018-9B0C-0AE7044AA89A};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Curve Arc;{50830560-31B5-11D0-82E7-00A0243E268D}:{96A34F30-4717-11D0-B2A9-00A024C79287};Command;Curve Circle;{50830560-31B5-11D0-82E7-00A0243E268D}:{7B621D10-4717-11D0-B2A9-00A024C79287};Command;Curve Spiral;{50830560-31B5-11D0-82E7-00A0243E268D}:{96A34F31-4717-11D0-B2A9-00A024C79287};Command;Curve Square;{50830560-31B5-11D0-82E7-00A0243E268D}:{6DE4A0E0-C18B-11D0-8A0D-080036F3CC02};Command;Curve Text;{50830560-31B5-11D0-82E7-00A0243E268D}:{D55B689F-632E-4B5B-9068-0931BCE4469A};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Surface Cone;{50830560-31B5-11D0-82E7-00A0243E268D}:{32E56F35-147A-11D0-AEA8-B4872D4679CD};Command;Surface Cube;{50830560-31B5-11D0-82E7-00A0243E268D}:{32E56F32-147A-11D0-AEA8-B4872D4679CD};Command;Surface Cylinder;{50830560-31B5-11D0-82E7-00A0243E268D}:{32E56F34-147A-11D0-AEA8-B4872D4679CD};Command;Surface Disc;{50830560-31B5-11D0-82E7-00A0243E268D}:{30C4A3F0-D6C8-11D0-91C3-00AA00629814};Command;Surface Grid;{50830560-31B5-11D0-82E7-00A0243E268D}:{32E56F31-147A-11D0-AEA8-B4872D4679CD};Command;Surface Sphere;{50830560-31B5-11D0-82E7-00A0243E268D}:{32E56F33-147A-11D0-AEA8-B4872D4679CD};Command;Surface Torus;{50830560-31B5-11D0-82E7-00A0243E268D}:{360439C6-1477-11D0-AEA8-B4872D4679CD}" language="Python" name="Create Primitives - NURBS" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Mesh Cone;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DC1-7B9E-11D0-BDED-00A0243E36A8};Command;Mesh Cube;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DC2-7B9E-11D0-BDED-00A0243E36A8};Command;Mesh Cylinder;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DC3-7B9E-11D0-BDED-00A0243E36A8};QMenu_MenuItem;Mesh Disc;{8BDE72CB-0FFB-47EB-99C7-0C4D21FEB169};Command;Mesh Grid;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DC7-7B9E-11D0-BDED-00A0243E36A8};Command;Mesh Sphere;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DCC-7B9E-11D0-BDED-00A0243E36A8};Command;Mesh Torus;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DCA-7B9E-11D0-BDED-00A0243E36A8};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Create Planar Mesh Text;{50830560-31B5-11D0-82E7-00A0243E268D}:{890D5A80-024B-4111-8751-26D7E3CA2611};Command;Create Solid Mesh Text;{50830560-31B5-11D0-82E7-00A0243E268D}:{519192B2-AD24-4AE1-BAA3-670D51B8F3F3};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Mesh Dodecahedron;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DC5-7B9E-11D0-BDED-00A0243E36A8};Command;Mesh Icosahedron;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DC8-7B9E-11D0-BDED-00A0243E36A8};Command;Mesh Octahedron;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DC9-7B9E-11D0-BDED-00A0243E36A8};Command;Mesh Tetrahedron;{50830560-31B5-11D0-82E7-00A0243E268D}:{F0B32DCE-7B9E-11D0-BDED-00A0243E36A8};Command;Mesh Rhombicosidodecahedron;{50830560-31B5-11D0-82E7-00A0243E268D}:{2A7DDEF2-7560-11D5-80B0-00A0C9ED67BD};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Create Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{4F80D8D1-1523-11D3-AC99-0090275802BF};Command;CreateRefModel;{50830560-31B5-11D0-82E7-00A0243E268D}:{5C8C36E2-CE50-4631-BB8C-0FC04E1F888E};Command;Import Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{84C70740-7C0A-11D3-8907-00A024EE6238};Command;Import Ref Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{D573924F-F058-46FA-BEE8-321150C3516A};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Null Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{B99F19D6-EEC9-11D3-807C-00A0C9ED67BD}" language="Python" name="Create Primitives - Polygons" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Create Cluster;{50830560-31B5-11D0-82E7-00A0243E268D}:{DE557530-8B9A-11D2-A93C-00A024190119};Command;Create Non-Overlapping Cluster;{50830560-31B5-11D0-82E7-00A0243E268D}:{CB81155F-6500-11D5-80AE-00A0C9ED67BD};Command;Add to Cluster;{50830560-31B5-11D0-82E7-00A0243E268D}:{94172750-8BC8-11D2-A93C-00A024190119};Command;Remove from Cluster;{50830560-31B5-11D0-82E7-00A0243E268D}:{94172751-8BC8-11D2-A93C-00A024190119}" language="Python" name="Createt Cluster" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Insert Knot Curve;{13A18DC4-BA9E-4872-8F1A-D82E4AE8DD45};Command;Surface Snip;{50830560-31B5-11D0-82E7-00A0243E268D}:{E0B65CE0-470D-11D4-A9D6-009027BC65D7}" language="Python" name="Edit NURBS Surface Isoline" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Remove Knot Curve;{D566DFA7-AC84-46C0-80F7-C91C3DCA2C2B};Command;Surface Snip;{50830560-31B5-11D0-82E7-00A0243E268D}:{E0B65CE0-470D-11D4-A9D6-009027BC65D7}" language="Python" name="Edit NURBS Surface Knot Curve" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Surface Extend to Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9C-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Surface Boundary" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Surface Swap;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC77-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Subsurface" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B};Command;Tweak Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0D41FF0C-8AF4-4E18-9C1B-83277ACF12EF};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Surface Stitch;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9B-F6B6-11D2-AC7E-00A02485CECB};Command;Surface Open/Close;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC88-F6B6-11D2-AC7E-00A02485CECB};Command;Surface Extend to Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9C-F6B6-11D2-AC7E-00A02485CECB};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Delete Trim;{50830560-31B5-11D0-82E7-00A0243E268D}:{3865C0FE-3A22-4B99-854A-7E02F1AD6833}" language="Python" name="Edit NURBS Surface (general)" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="" language="Python" name="Edit Shading Properties" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Surface Intersect;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BCA7-F6B6-11D2-AC7E-00A02485CECB};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Surface Blend;{50830560-31B5-11D0-82E7-00A0243E268D}:{1AB939E0-19B9-11D3-A979-00A024190119};Command;Surface Fit;{50830560-31B5-11D0-82E7-00A0243E268D}:{37B8F9C1-0404-11D4-A9CC-009027BC65D7};Command;Surface Fillet;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BCA3-F6B6-11D2-AC7E-00A02485CECB};Command;Surface Merge;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BCA5-F6B6-11D2-AC7E-00A02485CECB};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Assemble Surface Mesh;{50830560-31B5-11D0-82E7-00A0243E268D}:{BC91E541-DFCB-11D3-B830-009027BC6587};Command;Snap Boundary;{50830560-31B5-11D0-82E7-00A0243E268D}:{D99A8CC2-1A89-11D3-B803-00A0243E3694}" language="Python" name="Edit NURBS Surfaces (multiple)" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Unhide All Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{7BC3B51D-8FCA-4546-B99F-BDC4AE964409};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Invert Selection Using Filter;{50830560-31B5-11D0-82E7-00A0243E268D}:{558B6839-03E9-11D3-B89E-080036F3CC02};Command;Grow Selection;{50830560-31B5-11D0-82E7-00A0243E268D}:{6218A21F-1147-11D4-A89D-00C04F8EDF15};Command;Shrink Selection;{50830560-31B5-11D0-82E7-00A0243E268D}:{69D3398B-73E6-4AB1-B3E5-7108216EF805};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Convert Selection To Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{E2E6486C-396D-47B1-9080-D7CF59FEB90F};Command;Convert Selection To Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{CA96B5B1-0B8E-4E7C-947A-F2346E490C11};Command;Convert Selection To Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{6199BF10-3CB7-409C-9FE9-360A023679C3};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Select Edge Loop;{50830560-31B5-11D0-82E7-00A0243E268D}:{A6ED1DB7-45B1-11D6-80CD-00A0C9ED67BD};Command;Select Parallel Edge Loop;{50830560-31B5-11D0-82E7-00A0243E268D}:{7C6E8253-85C0-4020-989E-774D582FE9D8}" language="Python" name="Edit Polymesh Components" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Invert Selection Using Filter;{50830560-31B5-11D0-82E7-00A0243E268D}:{558B6839-03E9-11D3-B89E-080036F3CC02}" language="Python" name="Edit NURBS Surface Components" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Invert Selection Using Filter;{50830560-31B5-11D0-82E7-00A0243E268D}:{558B6839-03E9-11D3-B89E-080036F3CC02}" language="Python" name="Edit NURBS Curve Components" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Camera Perspective;{50830560-31B5-11D0-82E7-00A0243E268D}:{A6D026A5-A168-11D0-8478-00A024C7919C};Command;Camera Orthographic;{50830560-31B5-11D0-82E7-00A0243E268D}:{56566A02-C793-11D3-8075-00A0C9ED67BD};Command;Camera Telephoto;{50830560-31B5-11D0-82E7-00A0243E268D}:{56566A03-C793-11D3-8075-00A0C9ED67BD};Command;Camera Wide Angle;{50830560-31B5-11D0-82E7-00A0243E268D}:{56566A04-C793-11D3-8075-00A0C9ED67BD};Command;GetPrimStereoCamera;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{AB47488F-0D94-72DD-A4C9-60C3ADC282D4};Command;More Cameras...;{50830560-31B5-11D0-82E7-00A0243E268D}:{3F664662-8B10-11D3-8104-00A0C9AC19A9}" language="Python" name="New Camera" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Make Model Local;{50830560-31B5-11D0-82E7-00A0243E268D}:{07EE49C0-625A-11D4-B98D-009027BC3E07};Command;Export Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{2EF09090-776E-11D3-8902-00A024EE6238};Command;Update Referenced Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{4DDEA150-37CF-11D4-B986-009027BC3E07};QMenu_Menu;Referenced Model Resolution;{836F2947-BEE4-43B0-A3F3-82D5428115DC}" language="Python" name="Edit Model" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;SetResolutionOfRefModels_High;{50830560-31B5-11D0-82E7-00A0243E268D}:{EAFFC3D2-73C5-4FA9-A5A3-1E393E227F20};Command;SetResolutionOfRefModels_Low;{50830560-31B5-11D0-82E7-00A0243E268D}:{70D86E33-4325-4459-92C8-98EEB39FE440};Command;SetResolutionOfRefModels_Medium;{50830560-31B5-11D0-82E7-00A0243E268D}:{AE926699-3F0A-4673-9B54-048E7B8CC623};Command;SetResolutionOfRefModels_OffLoaded;{50830560-31B5-11D0-82E7-00A0243E268D}:{DEA476D9-A4E7-4616-A1BA-87D3E0ABA989}" language="Python" name="Referenced Model Resolution" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Architectural Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{26C8DCAD-1B9A-4329-A88B-5BEFA9B488A9};Command;Blinn Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{F18D6DC7-ED03-11D2-AA71-00AA0068D2C0};Command;Car Paint Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{27343B25-18DE-4561-A76B-DE5BB7D59236};Command;Cook-Torrance Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{F18D6DC8-ED03-11D2-AA71-00AA0068D2C0};Command;Constant Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{274838EB-9BC1-11D4-86AE-00E08100004B};Command;Lambert Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{F18D6DC6-ED03-11D2-AA71-00AA0068D2C0};Command;Phong Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{E2E787A1-ED03-11D2-AA71-00AA0068D2C0};Command;Strauss Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{F18D6DC5-ED03-11D2-AA71-00AA0068D2C0};Command;More Shaders...;{50830560-31B5-11D0-82E7-00A0243E268D}:{248AB1C1-F403-11D2-AA76-00AA0068D2C0}" language="Python" name="Assign Shader (general)" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;ICE Particle Volume Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{A2833393-63A4-4C0E-9FA7-380C6E54FDDA};Command;Fluid Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{5BC81201-E49B-11D3-B491-00A0248F9397};Command;Blob Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{6AE9103B-4B3C-11D3-A8FC-00C04F8EDEB9};Command;Sparks Shader;{50830560-31B5-11D0-82E7-00A0243E268D}:{6AE9103A-4B3C-11D3-A8FC-00C04F8EDEB9}" language="Python" name="Assign Shader (pointcloud)" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Light Point;{50830560-31B5-11D0-82E7-00A0243E268D}:{A6D026A1-A168-11D0-8478-00A024C7919C};Command;Light Spot;{50830560-31B5-11D0-82E7-00A0243E268D}:{A6D026A2-A168-11D0-8478-00A024C7919C};Command;Light Sun;{50830560-31B5-11D0-82E7-00A0243E268D}:{224D88B3-2388-11D3-ADDE-00A02485CECB};Command;Light Neon;{50830560-31B5-11D0-82E7-00A0243E268D}:{224D88B1-2388-11D3-ADDE-00A02485CECB};Command;Light Box;{50830560-31B5-11D0-82E7-00A0243E268D}:{224D88B2-2388-11D3-ADDE-00A02485CECB};Command;More Lights...;{50830560-31B5-11D0-82E7-00A0243E268D}:{393C6AD1-E6B4-11D2-A02C-0000F875DF68};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;StandIn;{50830560-31B5-11D0-82E7-00A0243E268D}:{43F95D18-8A58-4B55-B954-466CAD715A3D};Command;ArnoldStandIn;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{123CAC2D-2756-E3A8-DE15-65F792F32527};Command;GeoShader;{50830560-31B5-11D0-82E7-00A0243E268D}:{9430A5BD-D5D2-4206-BC18-D326639771FF}" language="Python" name="Create Primitives - Lighting and Rendering" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Remove Cluster;{50830560-31B5-11D0-82E7-00A0243E268D}:{94172752-8BC8-11D2-A93C-00A024190119};Command;Copy Cluster;{50830560-31B5-11D0-82E7-00A0243E268D}:{98E8A830-7DD0-11D4-9C8A-00D0B719049E};Command;Select Members/Components;{50830560-31B5-11D0-82E7-00A0243E268D}:{881EA660-0E0B-11D3-B8A0-080036F3CC02};Command;Polygon Cluster Visibility Property;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E214145-C3EF-4554-A619-22373842A455};QMenu_MenuItem;Merge Clusters with same Material;{7968F3BA-75B3-40BD-BAEB-ED0ACC726810}" language="Python" name="Edit Cluster" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Remove from Cluster;{50830560-31B5-11D0-82E7-00A0243E268D}:{94172751-8BC8-11D2-A93C-00A024190119};Command;Add to Cluster;{50830560-31B5-11D0-82E7-00A0243E268D}:{94172750-8BC8-11D2-A93C-00A024190119}" language="Python" name="Edit Cluster Membership" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_Menu;Look Through Spotlight;{BEB62121-DAA9-40D1-9ADB-56527648B0C1};QMenu_Menu;Look Through Camera;{81912DA3-0158-43B7-A701-82693D56210F}" language="Python" name="Look through..." scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Open XSI Explorer;{50830560-31B5-11D0-82E7-00A0243E268D}:{3C732F45-E90A-4662-857F-152C2B2EB59C};QMenu_MenuItem;Open Scene Search;{A4D68777-4713-43F6-888D-86F2D541F822};QMenu_MenuItem;Open Cache Manager;{5DD25E3F-7B5D-49FB-B917-DA9A6D09AF79};QMenu_MenuItem;Open External Files Manager;{291E1358-4818-4063-8D2E-AAE00BECE2CA};QMenu_MenuItem;Open Browser;{82C8FA4D-F577-4F5E-B200-19115B3A1CBE};QMenu_MenuItem;Open Scene Debugger;{A74255B8-5119-428A-98B1-FD3EBEF39E1F};Command;Open QMenu Editor;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{96107F46-7337-7C1E-9617-C2D0D36CC419}" language="Python" name="Editors and Managers - General" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_Menu;Camera Inspector (+CTRL to select only);{8F7C5999-1EE4-4D7D-92EA-9411ECC71CD7};QMenu_Menu;Light Inspector (+CTRL to select only);{F985F0E5-4327-4060-A6CE-46F996FEF02E};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Open Texture Editor;{4ACB1F09-E6A1-4D2E-91F2-C6A54E66E304};Command;Render Region Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{A281D992-5A0F-473B-843A-BAE619AE0B09};QMenu_MenuItem;Open Render Manager;{90B7A610-306E-4D35-903D-B4183E63190F};QMenu_MenuItem;Open Material Manager;{E0B34A05-01E2-430D-B3BB-6C17514687F4};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Scene Render Options;{50830560-31B5-11D0-82E7-00A0243E268D}:{E0EBD944-DF9E-485F-9AB5-019FBA1D28A2};Command;Inspect Current Pass Renderer Options;{50830560-31B5-11D0-82E7-00A0243E268D}:{DC9A9937-875C-46E7-83F4-1ACFDBEB4275};Command;Inspect Viewport Render Region Options;{50830560-31B5-11D0-82E7-00A0243E268D}:{5AF1698E-8855-4FC4-B10A-958CB6BEC446};Command;Open Rendering Preferences;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{61CD59E6-1C6F-FAF5-2A1A-F64A414ED2BA};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};Command;Open QMenu Editor;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{96107F46-7337-7C1E-9617-C2D0D36CC419}" language="Python" name="Editors &amp; Managers - Rendering" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Add to Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{DBB3A7E1-893D-11D2-B906-00A024C78EE3};QMenu_MenuItem;Add To Group;{622CC2C8-92FC-4634-AE00-AE316FE09601};QMenu_MenuItem;Remove From Group;{90E838C9-3809-4BA1-89F5-862DD2AAE4FB};QMenuSeparator;NewSeparator;{12A9CFB4-77F5-468C-9626-C96F693C3FEC};QMenu_MenuItem;Remove Group;{1F6BB74C-D655-443E-9CA6-542601F6EFCC}" language="Python" name="Edit Groups 1" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Open QMenu Editor;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{96107F46-7337-7C1E-9617-C2D0D36CC419}" language="Python" name="QMenu" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Architectural Shader;{159AFFB3-916A-4CF8-8644-5D6255DE7285};QMenu_MenuItem;Blinn Shader;{9B00F40D-E627-4643-B722-E2119F6ECB09};QMenu_MenuItem;Phong Shader;{7117CEBC-4E9B-4A72-92D5-F563A07532CA}" language="Python" name="Shaders" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create ICE Node 1" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;HealUVW;{50830560-31B5-11D0-82E7-00A0243E268D}:{489F8DCC-DBD1-4734-AD0F-99264A946E59};Command;GenerateUniqueUVs;{50830560-31B5-11D0-82E7-00A0243E268D}:{1FFC98E8-F6B5-49F2-BECB-BF7CD22190A1};Command;FlipUVW;{50830560-31B5-11D0-82E7-00A0243E268D}:{0A333EB4-D86C-450F-80E4-4673867789E6};Command;CycleUVW;{50830560-31B5-11D0-82E7-00A0243E268D}:{FF55FC24-3369-43C6-8A23-ABC53AB6319B}" language="Python" name="Edit UVW Samples" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;*100;{15D548EE-722F-438D-9348-782C718AF0DF};QMenu_MenuItem;*10;{493E0AA0-C1E6-489E-AB61-5A66AD9EE8E4};QMenu_MenuItem;*3;{48C4D193-C330-40DF-8939-A91108F5DD8C};QMenu_MenuItem;*1.5;{C5A13FAA-4BBF-406A-B3F4-8904305182CB};QMenu_MenuItem;*2;{D2222195-06B4-420F-93E7-909A56B322F1}" language="Python" name="Property Editing - Multiply Value" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Import EPS File;{50830560-31B5-11D0-82E7-00A0243E268D}:{CAA2AF54-B7C4-49DC-9187-A800D620688B};Command;Import IGES File;{50830560-31B5-11D0-82E7-00A0243E268D}:{A1687280-95FA-11D3-A9A6-009027BC65D7};Command;OBJ Import...;{50830560-31B5-11D0-82E7-00A0243E268D}:{48B8DD40-B849-4B95-B98D-17C7D1F40E32};Command;Import Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{DAFD4084-7C00-11D3-8907-00A024EE6238};Command;Import Ref Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{D573924F-F058-46FA-BEE8-321150C3516A};Command;Import .xsi;{50830560-31B5-11D0-82E7-00A0243E268D}:{ACCDB940-2C1D-11D4-9362-009027BC3E26};Command;FBXFileImport;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{6CBD3C61-FA45-C341-E3D5-FEE6F4361DAB}" language="Python" name="Import..." scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Create Simulated ICE Tree;{518AE4A7-1AAF-40DF-A253-7096BF793BEA};QMenu_MenuItem;Create ICE Tree;{00A4B31F-6DDB-4480-96C9-EBF8054845FB}" language="Python" name="Create ICE Tree" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create ICE Node 2" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create ICE Node 3" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create ICE Node 4" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create ICE Node 5" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create ICE Node 6" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create ICE Node 7" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create ICE Node 8" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Create Shading Node 1" scanDepth="999999999" type="QMenu_Menu">def QMenu_Menu_Execute( oContext ):  #Don't rename this function
	if oContext.SoftimageMainVersion &gt;= 10:
		thisMenu = oContext.ThisQMenuObject
		thisMenu.removeAllTempMenuItems()
		
		if (len(thisMenu.Items) &lt; 1): #The menu has no permanent items ? Add a dummy item so user has something to click on...
			dummyMenuItem = Application.QMenuGetByName (&quot;MenuItem&quot;,&quot;Dummy_CreateFirstICENode&quot;)
			dummyCode = dummyMenuItem.Code
			tempMenuItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			tempMenuItem.Name = &quot;Shift-Click to insert last created node&quot;
			tempMenuItem.Code = dummyCode
			thisMenu.insertTempMenuItem(0, tempMenuItem)</QMenu_Menu></QMenu_Menus><QMenu_MenuSets><QMenu_MenuSet AContexts="Polymeshes (multiple);Polymesh (or components);NURBS_Curves (multiple);NURBS_Curve (or components);NURBS_Surfaces (multiple);NURBS_Surface (or components);Transform Group;Selection is Empty" AMenus="Edit Polymeshes (multiple);Edit Polymesh (general);Edit NURBS Curves (multiple);Edit NURBS Curve (general);Edit NURBS Surfaces (multiple);Edit NURBS Surface (general);Edit Transform Groups;Create Primitives - NURBS" BContexts="Selection is Empty;Any Object;Polymesh_Components;NURBS_Curve_Components;NURBS_Surface_Components" BMenus="Import...;Edit Selection 1;Edit Polymesh Components;Edit NURBS Curve Components;Edit NURBS Surface Components" CContexts="Model;Any Object;Clusters &amp; Components;Cluster;Components;Default (always True)" CMenus="Edit Model;Edit Selection 2;Edit Cluster Membership;Edit Cluster;Createt Cluster;QMenu" DContexts="Polymesh (single);Polymesh_Polygons;Polymesh_Edges;Polymesh_Points;NURBS_Curve (single);NURBS_Curve_Subcurve;NURBS_Curve_IsoPoint;NURBS_Curve_Knot;NURBS_Surface (single);NURBS_Surface_KnotCurve;NURBS_Surface_Isoline;NURBS_Surface_Boundary;NURBS_Subsurface;Selection is Empty" DMenus="Edit Polymesh;Edit Polymesh Polygons;Edit Polymesh Edges;Edit Polymesh Points;Edit NURBS Curve;Edit NURBS Curve Subcurve;Edit NURBS Curve IsoPoint;Edit NURBS Curve Knot;Edit NURBS Surface;Edit NURBS Surface Knot Curve;Edit NURBS Surface Isoline;Edit NURBS Surface Boundary;Edit NURBS Subsurface;Create Primitives - Polygons" name="Modeling" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Shadeable Geo or Pointcloud;Default (always True)" AMenus="Assign Shader (general);Create Primitives - Lighting and Rendering" BContexts="Any Object" BMenus="Edit Selection 1" CContexts="Components;Default (always True)" CMenus="Createt Cluster;Editors &amp; Managers - Rendering" DContexts="Pointcloud;Default (always True)" DMenus="Assign Shader (pointcloud);Shading Properties" name="Lighting and Shading" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default (always True)" AMenus="Property Editing - Set Value" BContexts="Default (always True)" BMenus="Property Editing - Add Percentage" CContexts="Default (always True)" CMenus="Property Editing - Subtract Percentage" DContexts="Default (always True)" DMenus="Property Editing - Multiply Value" name="Property Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default (always True)" AMenus="Set View to..." BContexts="Default (always True)" BMenus="Display Modes" CContexts="Default (always True)" CMenus="Editors and Managers - General" DContexts="Default (always True)" DMenus="Look through..." name="View Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default (always True)" AMenus="None" BContexts="Default (always True)" BMenus="Preferences &gt; Scripting" CContexts="Default (always True)" CMenus="None" DContexts="Default (always True)" DMenus="None" name="Scripting" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="" AMenus="" BContexts="" BMenus="" CContexts="" CMenus="" DContexts="" DMenus="" name="Empty Menu Set" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default (always True)" AMenus="Create Shading Node 1" BContexts="" BMenus="" CContexts="" CMenus="" DContexts="" DMenus="" name="Shader Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="ICE Tree container not undefined;Default (always True)" AMenus="Create ICE Node 1;Create ICE Tree" BContexts="ICE Tree container not undefined" BMenus="Create ICE Node 2" CContexts="ICE Tree container not undefined" CMenus="Create ICE Node 3" DContexts="ICE Tree container not undefined" DMenus="Create ICE Node 4" name="ICE Tools" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Components" AMenus="Edit UVW Samples" BContexts="" BMenus="" CContexts="" CMenus="" DContexts="" DMenus="" name="UV Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="ICE Tree container not undefined" AMenus="Create ICE Node 5" BContexts="ICE Tree container not undefined" BMenus="Create ICE Node 6" CContexts="ICE Tree container not undefined" CMenus="Create ICE Node 7" DContexts="ICE Tree container not undefined" DMenus="Create ICE Node 8" name="ICE Lagoa" type="QMenu_MenuSet"/></QMenu_MenuSets><QMenu_MenuDisplayContexts><QMenu_MenuDisplayContext language="Python" name="Polymesh (or components)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Type = oContext.Types[0]
	ComponentParentType = oContext.ComponentParentTypes[0]
	if Type == &quot;polymsh&quot; or ComponentParentType == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
		return True
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Default (always True)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	return True	#This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Points" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if (oContext.Types[0] == &quot;pntSubComponent&quot;):
		if oContext.ComponentParentTypes[0] == &quot;polymsh&quot;: #Is the parent of the selected component(s) a polymesh? (could be a curve too)
			return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Edges" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ):  #This function must not be renamed!
	Types = oContext.Types
	#Is the first selected object an edge of on a Polymesh?
	if oContext.Types[0] == &quot;edgeSubComponent&quot;: 
		return True	#This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Polygons" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	#Is the first selected object a polygont on a Polymesh?
	if oContext.Types[0] == &quot;polySubComponent&quot;:
		return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Subcurve" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	#Is the first selected object a subcurve of a NURBS curve list?
	if Types[0] == &quot;subcrvSubComponent&quot;: 	
		return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymeshes (multiple)" scandepth="2" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if (len(Types) &gt; 1): #Is something selected?
		if Types[0] == &quot;polymsh&quot; and Types[1] == &quot;polymsh&quot;: #Are the first two selected objects polymeshes?
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh (single)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if oContext.Types[0] == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
		return True
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve (single)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute ( oContext ): #This function must not be renamed!
	Types = oContext.Types
	#Is the first selected object a NURBS curvelist?
	if Types[0] == &quot;crvlist&quot;: 
		return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve (or components)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	ComponentParentTypes = oContext.ComponentParentTypes
	if Types[0] == &quot;crvlist&quot;:  #Is the first selected object a curve list?
		return True
	if ((Types[0] == &quot;knotSubComponent&quot;) or (Types[0] == &quot;isopntSubComponent&quot;) or (Types[0] == &quot;pntSubComponent&quot;) or (Types[0] ==&quot;subcrvSubComponent&quot;)):
		if ComponentParentTypes[0] == &quot;crvlist&quot;:  #Is the parent of the selected component(s) a NURBS curve?
			return True								
	return False  #This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Point" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	ComponentParentTypes = oContext.ComponentParentTypes
	if Types[0] == &quot;pntSubComponent&quot;:
		if ComponentParentTypes[0] == &quot;crvlist&quot;:  #Is the parent of the selected component(s) a curve list?
			return True								
	return False  #This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_IsoPoint" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): 	#This function must not be renamed!
	Types = oContext.Types
	ComponentParentTypes = oContext.ComponentParentTypes
	if Types[0] == &quot;isopntSubComponent&quot;:
		if ComponentParentTypes[0] == &quot;crvlist&quot;:	#Is the parent of the selected component(s) a curve list?
			return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Knot" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	ComponentParentTypes = oContext.ComponentParentTypes
	if Types[0] == &quot;knotSubComponent&quot;:
		if ComponentParentTypes[0] == &quot;crvlist&quot;: 		#Is the parent of the selected component(s) a curve list?
			return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curves (multiple)" scandepth="2" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if (len( Types ) &gt; 1): #Is more than one obj selected?
		if Types[0] == &quot;crvlist&quot; and Types[1] == &quot;crvlist&quot;: #Are the first two selected objects curves?
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="JScript" name="_Test_Jscript_DisplayContext" scandepth="0" type="QMenu_MenuDisplayContext">function QMenuContext_Execute( oContext ) //This function must not be renamed!
{
	LogMessage(oContext.ThisQMenuObject.Name);
	classNames = oContext.Types.toArray();
	LogMessage(classNames)
	//Application.LogMessage(oContext.ComponentClassNames)
	//Application.LogMessage(oContext.ComponentParents)
	//Application.LogMessage(oContext.ComponentParentTypes)
	//Application.LogMessage(oContext.ComponentParentClassNames)
	return true	//This function must return a boolean
}</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="VBScript" name="_Test_VBScript_DisplayContext" scandepth="0" type="QMenu_MenuDisplayContext">Function QMenuContext_Execute(oContext) 'This function must not be renamed!
	LogMessage(oContext.ThisQMenuObject.Name)
	classNames = oContext.ClassNames
	'classNames = oContext.getSelectionClassNames()
	LogMessage classNames(0)
	'Application.LogMessage(ComponentClassNames)
	'Application.LogMessage(ComponentParents)
	'Application.LogMessage(ComponentParentTypes)
	'Application.LogMessage(ComponentParentClassNames)
	QMenuContext_Execute =  True	'This function must return a boolean
 end Function</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Transform Group" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;TransfoGroup&quot;:	
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surface (single)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if Types[0] == &quot;surfmsh&quot;:
		return True		
	return False #This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surface_Isoline" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if Types[0] == &quot;isolinevSubComponent&quot; or Types[0] == &quot;isolineuSubComponent&quot;:
		return True	
	return false #This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Subsurface" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;subsrfSubComponent&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surface_KnotCurve" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if Types[0] == &quot;knotcrvvSubComponent&quot; or Types[0] == &quot;knotcrvuSubComponent&quot;:
		return True
	return False	#This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surface_Point" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;pntSubComponent&quot; and oContext.ComponentParentTypes[0] == &quot;surfmsh&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surface_Knot" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if (oContext.Types[0] == &quot;knotSubComponent&quot;) and (oContext.ComponentParentTypes[0] == &quot;surfmsh&quot;) :
		return True #This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surface (or components)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if Types[0] == &quot;surfmsh&quot; or oContext.ComponentParentTypes[0] == &quot;surfmsh&quot;:
		return True		
	return False #This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surfaces (multiple)" scandepth="2" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Types = oContext.Types
	if len(Types) &gt; 1:
		if (Types[0] == &quot;surfmsh&quot;) and (Types[1] == &quot;surfmsh&quot;):
			return True		
	return False #This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surface_Boundary" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] ==  &quot;bndrySubComponent&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Any Object" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if len(oContext.ClassNames) &gt; 0:
		#Application.LogMessage (oContext.ClassNames)
		#Application.LogMessage (oContext.X3DObjects[0])
		#Application.LogMessage (oContext.Types[0])
		firstClassName = oContext.ClassNames[0]
		allowedClassNames = (&quot;X3DObject&quot;,&quot;LightRig&quot;,&quot;Light&quot;,&quot;CameraRig&quot;,&quot;Model&quot;,&quot;Group&quot;)
		if firstClassName in allowedClassNames:
			return True
	return False #This function must return a booleans</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Components" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Sel = Application.Selection
	if Sel.Count &gt; 0:
		ObjectTypes = [&quot;surfmsh&quot;,&quot;polymsh&quot;,&quot;crvlist&quot;,&quot;lattice&quot;,&quot;pointcloud&quot;,&quot;hair&quot;]
		if oContext.ComponentParentTypes[0] in ObjectTypes:
			return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Components" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	ComponentParentType = oContext.ComponentParentTypes[0]
	if ComponentParentType == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
		return True
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Surface_Components" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.ComponentParentTypes[0] == &quot;surfmsh&quot;:
		return True		
	return False #This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Components" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.ComponentParentTypes[0] == &quot;crvlist&quot;:
		return True		
	return False #This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Null" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;null&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Bone" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;bone&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Pointcloud" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;pointcloud&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Arc" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;arc&quot;:
		return True
	return False	#This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Spiral" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;spiral&quot;:
		return True
	return False	#This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Circle" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;circle&quot;:
		return True
	return False	#This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Square" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;square&quot;:
		return True
	return False	#This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Cone" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;cone&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Cube" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;cube&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Cylinder" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;cylinder&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Disc" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;disc&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Grid" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;grid&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Sphere" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;sphere&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="IMPLICIT_Torus" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;torus&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Wave" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;wave&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_VolumeDeform" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;volume_deform&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Attractor" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;attractor&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Drag" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;drag&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Eddy" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;eddy&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Fan" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;fan&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Gravity" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;gravity&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Toric Force" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;Toric_Force&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Turbulence" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;turbulence&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Vortex" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;vortex&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="CTRL_OBJ_Wind" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;wind&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Lattice" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;lattice&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Stand-in" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;standin&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Geometry Shader Primitive" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;GeoShader&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Camera" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;camera&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Camera_Interest" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;CameraInterest&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Camera_Root" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;CameraRoot&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Light (any)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;light&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Stand-in (Arnold)" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	try:
		for prop in Application.Selection[0].Properties:
			if prop.Type == &quot;ArnoldStandInProp&quot;:
				return True	
	except:
		return False
	return False #This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Chain Effector" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;eff&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Chain Root" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;root&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Model" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;#model&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Shadeable Geo or Pointcloud" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	Type = oContext.Types[0]
	#print Type
	shadeableTypes = [&quot;polymsh&quot;,&quot;surfmsh&quot;,&quot;pointcloud&quot;,&quot;subsrfSubComponent&quot;,&quot;polySubComponent&quot;,&quot;poly&quot;,&quot;subsrf&quot;,&quot;hair&quot;]
	if Type in shadeableTypes :  
		return True
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Cluster" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.ClassNames[0] == &quot;Cluster&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Clusters &amp; Components" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	#print oContext.ClassNames
	#print oContext.Types
	#print oContext.ComponentParentTypes
	ValidTypeFound = False
	Sel = Application.Selection
	if Sel.Count &gt; 0:
		AllowedComponentParentTypes = [&quot;surfmsh&quot;,&quot;polymsh&quot;,&quot;crvlist&quot;,&quot;lattice&quot;,&quot;pointcloud&quot;,&quot;hair&quot;]
		for Type in oContext.ComponentParentTypes:
			if Type in AllowedComponentParentTypes:
				ValidTypeFound = True
				break

		if ValidTypeFound and &quot;Cluster&quot; in oContext.ClassNames :
			return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Hair" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;hair&quot;:
		return True
	return False	#This function must return a boolean</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Selection is Empty" scandepth="0" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if Application.Selection.Count == 0:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Material" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;material&quot;:
		return True	#This function must return a boolean
	return false</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Property" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.ClassNames[0] == &quot;Property&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Custom Property" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.ClassNames[0] == &quot;CustomProperty&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Layer" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;Layer&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Pass" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	#print oContext.Types[0]
	if oContext.Types[0] == &quot;Pass&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Parameter" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	#print oContext.ClassNames[0]
	if oContext.Types[0] == &quot;Parameter&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Partition" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;Partition&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Texture Support" scandepth="0" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if oContext.Types[0] == &quot;Texture Support&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Group" scandepth="0" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	#print(oContext.Types[0])
	if oContext.Types[0] == &quot;#Group&quot;:
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Hair Components" scandepth="1" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	if (oContext.Types[0] == &quot;pntSubComponent&quot;) and (oContext.ComponentParentTypes[0] == &quot;hair&quot;):
		return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="ICE Tree container not undefined" scandepth="0" type="QMenu_MenuDisplayContext">def QMenuContext_Execute( oContext ): #This function must not be renamed!
	oView = oContext.CurrentXSIView #Get the current Softimage view object
	if (oView != None) and (oView.Type  == &quot;ICE Tree&quot;): #Are we working in an ICE Tree view?
		ActiveIceOpFullName = oView.GetAttributeValue(&quot;container&quot;) #Get the ICE Op
		if ActiveIceOpFullName != &quot;&quot;: #Value type of returned ICE container is &quot;string&quot;, make sure it's not empty before we continue...
			return True	#This function must return a boolean
	return False</QMenu_MenuDisplayContext></QMenu_MenuDisplayContexts><QMenuViewSignatures><QMenuViewSignature menuSets="View Editing;Modeling;Lighting and Shading" name="3D Views" signature="Viewer;DS_ChildViewManager;DS_ChildRelationalView;TrayClientWindow;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Property Editing" name="Property Editor" signature="PropertyInspectorPagesArea" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Scripting" name="Script Editor" signature="ScriptEditor" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Property Editing" name="Property Editor Docked" signature="DSPropertyInspectorPagesArea;Tab;InspectorView;DS_ChildPropertyEditor;DS_ChildRelationalView;TrayClientWindow;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Shader Editing" name="Render Tree" signature="RenderTree" type="QMenuViewSignature"/><QMenuViewSignature menuSets="ICE Tools;ICE Lagoa" name="ICE Tree" signature="ICETree" type="QMenuViewSignature"/><QMenuViewSignature menuSets="UV Editing" name="Texture Editor" signature="TextureEditor" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Scripting" name="CommandLine" signature="DS_ChildCommandLine;DS_ChildRelationalView;TrayClientWindow;" type="QMenuViewSignature"/></QMenuViewSignatures><QMenuDisplayEvents><QMenuDisplayEvent key="220" keyMask="0" number="0" type="QMenuDisplayEvent"/><QMenuDisplayEvent key="49" keyMask="0" number="0" type="QMenuDisplayEvent"/><QMenuDisplayEvent key="50" keyMask="0" number="0" type="QMenuDisplayEvent"/></QMenuDisplayEvents></QMenuComponents>