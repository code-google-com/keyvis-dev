<?xml version="1.0" ?><QPopComponents><QPopMenuItems><QPopMenuItem UID="{C91B070A-1F9B-44AB-A224-13CC0927D7BE}" category="Preferences" language="Python" name="Extrude duplicated Polygons" switch="True" type="QPopMenuItem">def Switch_Init(self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	if Application.Preferences.GetPreferenceValue(&quot;duplicate.polygons&quot;) == 1:
		return True
	return False

def Switch_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	Application.SetValue(&quot;Preferences.duplicate.polygons&quot;, not Switch_Init(self, QPopMenuItems, QPopMenus, QPopMenuSets))
</QPopMenuItem><QPopMenuItem UID="{848084F3-572F-4FC3-A82B-E9F988312C90}" category="Property Editing" language="Python" name="+10%" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *1.1),&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{A6A6AF28-9901-4807-9EB9-2708EEDE74CE}" category="Property Editing" language="Python" name="+50%" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *1.5),&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{80B86827-F79D-4E62-870C-586A2D9E7BFB}" category="Property Editing" language="Python" name="+100%" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *2),&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{F5986B63-1B99-4206-A86C-B354B9C3B93A}" category="Property Editing" language="Python" name="-10%" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *0.9),&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{38EA9632-4B2F-4931-BA6B-DC58AC4F6A35}" category="Property Editing" language="Python" name="-50%" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *0.5),&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{5A81EB97-9369-4B5B-AFC6-EE0EB375AC94}" category="Property Editing" language="Python" name="0,1" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.1,&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{5E81B052-770B-466D-90C6-45982A6AC722}" category="Property Editing" language="Python" name="0,5" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.5,&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{085EF958-00F3-4601-B482-E6E0A23D1B2B}" category="Property Editing" language="Python" name="1" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,1,&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{DE3109AF-94F7-4619-8C9E-0BC4B7E63DA7}" category="Property Editing" language="Python" name="5" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,5,&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{014B1D69-B4F3-48F8-BE34-38432C9D7BCC}" category="Property Editing" language="Python" name="10" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,10,&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{BDEAA462-8F9F-42EE-8E45-9740AB7680B0}" category="Property Editing" language="Python" name="0" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0,&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{DA35E9B5-E7C4-4A0C-A4CD-B94C838FFBA7}" category="Modeling" language="Python" name="Weld Points to COG" switch="False" type="QPopMenuItem">def Script_Execute(): #Don't rename this function
	#Weld selected points towards their common center
	Application.ApplyTopoOp(&quot;WeldPoints&quot;)</QPopMenuItem><QPopMenuItem UID="{F7400B1F-0B85-42CA-A27F-E314A24A8239}" category="Preferences" language="Python" name="Raycast Select in Shaded Mode" switch="True" type="QPopMenuItem">def Switch_Init(self, QPopMenuItems, QPopMenus, QPopMenuSets):
	if Application.Preferences.GetPreferenceValue(&quot;Select.rectraycast&quot;) == 1:
		return True
	return False


def Switch_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):
	Application.SetValue(&quot;preferences.Select.rectraycast&quot;, not Switch_Init(self, QPopMenuItems, QPopMenus, QPopMenuSets))
</QPopMenuItem><QPopMenuItem UID="{F7EA1A23-1A8C-4700-ABBE-411A1E3EEEA0}" category="Views" language="Python" name="Top View" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Top\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])</QPopMenuItem><QPopMenuItem UID="{FF1A8889-E161-4369-8B59-D7471DD7EA89}" category="Preferences" language="Python" name="Raycast Select - Include Backfacing Polygons" switch="True" type="QPopMenuItem">def Switch_Init(self, QPopMenuItems, QPopMenus, QPopMenuSets):
	if Application.Preferences.GetPreferenceValue(&quot;Select.raycastbackfacing&quot;) == 1:
		return True
	return False

def Switch_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):
	Application.SetValue(&quot;preferences.Select.raycastbackfacing&quot;, not Switch_Init(self, QPopMenuItems, QPopMenus, QPopMenuSets))
</QPopMenuItem><QPopMenuItem UID="{5582ADF1-5EF2-4403-B10A-E10CB29B9DAE}" category="Preferences" language="Python" name="Orbit Around Selection" switch="True" type="QPopMenuItem">def Switch_Init(self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) == 2
	return State

def Switch_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function

	if Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) != 2:
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 2, &quot;&quot;)
	else: 
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 0, &quot;&quot;)


</QPopMenuItem><QPopMenuItem UID="{406E4B69-96AE-4C9D-B782-B359CEB1CE1C}" category="Preferences" language="Python" name="Orbit Around Selection - Components only" switch="True" type="QPopMenuItem">def Switch_Init(self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) == 1
	return State

def Switch_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	if Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) != 1:
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 1, &quot;&quot;)
	else: 
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 0, &quot;&quot;)




</QPopMenuItem><QPopMenuItem UID="{5A1E3772-8685-4D7A-B617-C54B5A49B040}" category="Modeling" language="Python" name="Cap" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	#Weld selected points towards their common center
	Application.ApplyTopoOp(&quot;WeldPoints&quot;)</QPopMenuItem><QPopMenuItem UID="{F483C0D5-D943-46F0-BBD5-62021B8A1AC8}" category="Clusters" language="Python" name="Merge Clusters with same Material" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	Sel = Application.Selection
	oSel = list()
	for Obj in Sel:
		oSel.append(Obj)
	 
	 
	for oObj in oSel:
		delClusters = list()
		Clusters = oObj.ActivePrimitive.Geometry.Clusters
		polyClusters = list()
		for oCluster in Clusters:
			if oCluster.Type == &quot;poly&quot; and len(oCluster.Elements) != 0:
				polyClusters.append (oCluster)
	 
		
		for polyCluster in polyClusters:
			currentmat = polyCluster.Material
			#pplication.LogMessage(currentmat)

			for oCheckCluster in polyClusters:
				if oCheckCluster != polyCluster and len(oCheckCluster.Elements) != 0:
					if oCheckCluster.Material.IsEqualTo(polyCluster.Material):
						#Application.LogMessage(&quot;Processing cluster: &quot; + oCheckCluster.name)
						clusterElements = oCheckCluster.Elements
						Application.DeselectAll()
						Application.SelectMembers(oCheckCluster.FullName,True,False)
						Application.AddToSelection(polyCluster.FullName,&quot;ASITIS&quot;,False)
						Application.AddToCluster(&quot;&quot;, &quot;siRemoveFromExistingClusters&quot;)
		
		
		for Cluster in oObj.ActivePrimitive.Geometry.Clusters:
			if len(Cluster.Elements) == 0:
				Application.DeleteObj(Cluster.FullName)

	Application.Application.DeselectAll()
	Application.SelectObj(oSel)
</QPopMenuItem><QPopMenuItem UID="{2F3D7376-247F-4079-BA08-A4485C3DC4D0}" category="Views" language="Python" name="User View" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;User\&quot;)&quot;)
	eval(stri)</QPopMenuItem><QPopMenuItem UID="{327462FD-3C48-41BF-B3F2-B89D47373596}" category="Views" language="Python" name="Right View" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Right\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])</QPopMenuItem><QPopMenuItem UID="{FBF7FE90-439B-467B-9276-B5A4DBC2D8FA}" category="Views" language="Python" name="Back View" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Front\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (3,True,&quot;&quot;, viewIndices[oView])

</QPopMenuItem><QPopMenuItem UID="{9423D578-C06A-4A49-87F7-06DC66F45BCB}" category="Views" language="Python" name="Front View" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Front\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])
</QPopMenuItem><QPopMenuItem UID="{3E8B68F4-8F25-44E8-9C18-D239D23C98BB}" category="Property Editing" language="Python" name="None" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,&quot;&quot;,&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{308BB708-EF42-45E5-8D0F-369615C753F7}" category="Property Editing" language="Python" name="-1" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,-1,&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{2F7AF9C6-CB69-4CD6-AC91-6828976C79B7}" category="Views" language="Python" name="Bottom View" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Top\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (2,True,&quot;&quot;, viewIndices[oView])</QPopMenuItem><QPopMenuItem UID="{2D800286-8008-44BC-929B-E9757AB8D34C}" category="Views" language="Python" name="LeftView" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Right\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (1,True,&quot;&quot;, viewIndices[oView])</QPopMenuItem><QPopMenuItem UID="{9538461A-51B8-4394-95D1-4FE338B4A566}" category="Property Editing" language="Python" name="add 1" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam, (CurrentVal + 1),&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{DF28E5C5-1AA2-4625-9B43-163752EF08B2}" category="Property Editing" language="Python" name="subtract 1" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam, (CurrentVal - 1),&quot;&quot;)
					except:
						pass</QPopMenuItem><QPopMenuItem UID="{9C3915D1-1B23-41C6-B1D9-F426257C2E5F}" category="Views" language="Python" name="Set Wireframe Display Mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;wireframe&quot;)</QPopMenuItem><QPopMenuItem UID="{460D12DF-B6BF-4345-8F39-76ECDA1C1C4E}" category="Views" language="Python" name="Set Bounding Box Display mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;bbox&quot;)</QPopMenuItem><QPopMenuItem UID="{D15C9711-0517-4E95-98A4-EFB987E25712}" category="Views" language="Python" name="Set Depth Cue Dispay Mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;depthcue&quot;)</QPopMenuItem><QPopMenuItem UID="{DDAF8857-AD13-4942-8D7A-4A9C23687DC8}" category="Views" language="Python" name="Set Hidden Line Display Mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;hiddenline&quot;)</QPopMenuItem><QPopMenuItem UID="{F71AD83F-1E38-4004-A268-03FCBDCF47E2}" category="Views" language="Python" name="Set Constant Display Mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;constant&quot;)</QPopMenuItem><QPopMenuItem UID="{A77E6626-2B55-4024-AE48-C716F85887BE}" category="Views" language="Python" name="Set Shaded Display Mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;shaded&quot;)</QPopMenuItem><QPopMenuItem UID="{06EED1A4-9CD1-4B25-87E3-2907B49AF6BF}" category="Views" language="Python" name="Set Textured Display Mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;textured&quot;)</QPopMenuItem><QPopMenuItem UID="{A8075C89-E1A5-4E62-BF59-217BFF83F319}" category="Views" language="Python" name="Set Textured Decal Display Mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;texturedecal&quot;)</QPopMenuItem><QPopMenuItem UID="{079EE49B-5CCA-4162-BD7B-AFDF118A72C6}" category="Views" language="Python" name="Set Realtime Display Mode" switch="False" type="QPopMenuItem">def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;realtimeshaders&quot;)</QPopMenuItem></QPopMenuItems><QPopMenus><QPopMenu executeCode="False" items="Command;Mark Hard Edge Vertex;{50830560-31B5-11D0-82E7-00A0243E268D}:{71CFB7B5-2B33-11D4-B840-009027BC6587};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};QPopMenuItem;Weld Points to COG;{DA35E9B5-E7C4-4A0C-A4CD-B94C838FFBA7};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Weld Points to Target;{50830560-31B5-11D0-82E7-00A0243E268D}:{E5F394BB-72F7-49AC-B3A9-E1F7AE5E9D48};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Filter Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{AD25FA37-856E-4AA4-83F3-352713319986};Command;Paint Push Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0EB424E5-84F7-11D4-8094-00A0C9ED67BD};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B}" language="Python" name="Edit Polymesh Points" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Mark Hard Edge Vertex;{50830560-31B5-11D0-82E7-00A0243E268D}:{71CFB7B5-2B33-11D4-B840-009027BC6587};Command;Set Edge Crease Value;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E9FEE12-2D9E-11D4-B841-009027BC6587};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Subdivide Edge;{50830560-31B5-11D0-82E7-00A0243E268D}:{8F1FA2AF-3635-11D4-A8AF-00C04F8EDF15};Command;Split Edge;{50830560-31B5-11D0-82E7-00A0243E268D}:{904FB220-46B2-11D4-8C28-009027BC3A0E};Command;Dissolve &amp; Clean Adjacent Vertices;{50830560-31B5-11D0-82E7-00A0243E268D}:{1D09DE94-79BA-4ADD-8F8A-ED34588877AA};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Filter Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{053894C2-8E7C-4F76-B1BB-283C34E3C420};Command;Collapse;{50830560-31B5-11D0-82E7-00A0243E268D}:{7F392188-2520-11D4-97F2-0800360BFF02};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};QPopMenuItem;Cap;{5A1E3772-8685-4D7A-B617-C54B5A49B040};Command;Weld Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{61467638-32CE-48C9-971C-904D60579F1A};Command;Bridge Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{3AEF5A2C-40E4-4B08-AE6D-ABBC7C199907}" language="Python" name="Edit Polymesh Edges" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Dissolve &amp; Clean Adjacent Vertices;{50830560-31B5-11D0-82E7-00A0243E268D}:{1D09DE94-79BA-4ADD-8F8A-ED34588877AA};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Inset Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{61DB5CAA-03FB-497F-8AAC-A9BB5B6C72BE};Command;Offset Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{A3F7B88C-7B09-4B70-B55D-54B6D6D01BC5};Command;Local Subdivision;{50830560-31B5-11D0-82E7-00A0243E268D}:{F8842CA7-78FD-11D4-B851-009027BC6587};Command;Dice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{86B4DB7E-3569-4FD0-B8D3-05C11AA054D5};Command;Invert Selected Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{11BEB110-85B1-11D4-8C31-009027BC3A0E};Command;Dice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{86B4DB7E-3569-4FD0-B8D3-05C11AA054D5};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Disconnect Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{8582A7F9-EF44-4C3E-8C38-472BFD0C8414};Command;Polygon Detach;{50830560-31B5-11D0-82E7-00A0243E268D}:{4F25DC5B-7EE8-487C-B639-D1E7946A53FC};Command;Polygon Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{598E1068-B64F-47F4-8F08-99443D94B0B5};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Filter Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{1067D621-96FC-4DED-983F-E83C4D121372};Command;Polygon Reduction;{50830560-31B5-11D0-82E7-00A0243E268D}:{0488BE6A-6E7E-416B-9CAE-2A6A987BF75C};Command;Slice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{3FCF7E6F-5E01-4932-9D1A-201A269255C5};Command;Split Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{52964382-BCB8-11D4-8C4B-009027BC3A0E};Command;Subdivide Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{BC8CCEEF-370F-11D4-A8B0-00C04F8EDF15};Command;Quadrangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E71C2255-9AAF-4FF4-ABAC-4A6855C97C78};Command;Triangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{FB5B671D-C1A0-4DB6-8FF9-950A5029C2CD};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Bridge Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{95983629-72EA-11D4-A8C2-00C04F8EDF15};Command;Symmetrize Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{669FD6AA-D338-4311-9B7E-CB4A923311D1};Command;Duplicate Polygons Along Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{D1343A2C-97E5-4236-9F41-3DBD21CAD8CB}" language="Python" name="Edit Polymesh Polygons" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Gator;{50830560-31B5-11D0-82E7-00A0243E268D}:{7DC64A1A-9888-4616-971E-707A802DF006};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Mesh Merge;{50830560-31B5-11D0-82E7-00A0243E268D}:{AB9A5C20-5839-11D4-8C2A-009027BC3A0E};Command;Mesh Blend;{50830560-31B5-11D0-82E7-00A0243E268D}:{EB16D9E0-5CC1-11D4-8C2C-009027BC3A0E};Command;Boolean Union;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E8-8E7A-11D4-8094-00A0C9ED67BD};Command;Boolean Intersection;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E9-8E7A-11D4-8094-00A0C9ED67BD};Command;Boolean Difference;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E7-8E7A-11D4-8094-00A0C9ED67BD}" language="Python" name="Edit Polymesh (multiple)" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Toggle Background Color;{50830560-31B5-11D0-82E7-00A0243E268D}:{D90C33E1-23CB-498A-9B2C-A4860E4E515C};Command;Isolate Selected;{50830560-31B5-11D0-82E7-00A0243E268D}:{153189E9-79CF-4333-89A2-35D123A8B003};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};QPopMenu;Preferences - Tools - Camera;{98C0BF69-AD39-4FFA-A15F-20BB0020E8C6};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};QPopMenuItem;Set Realtime Display Mode;{079EE49B-5CCA-4162-BD7B-AFDF118A72C6};QPopMenuItem;Set Textured Decal Display Mode;{A8075C89-E1A5-4E62-BF59-217BFF83F319};QPopMenuItem;Set Textured Display Mode;{06EED1A4-9CD1-4B25-87E3-2907B49AF6BF};QPopMenuItem;Set Shaded Display Mode;{A77E6626-2B55-4024-AE48-C716F85887BE};QPopMenuItem;Set Constant Display Mode;{F71AD83F-1E38-4004-A268-03FCBDCF47E2};QPopMenuItem;Set Hidden Line Display Mode;{DDAF8857-AD13-4942-8D7A-4A9C23687DC8};QPopMenuItem;Set Depth Cue Dispay Mode;{D15C9711-0517-4E95-98A4-EFB987E25712};QPopMenuItem;Set Wireframe Display Mode;{9C3915D1-1B23-41C6-B1D9-F426257C2E5F};QPopMenuItem;Set Bounding Box Display mode;{460D12DF-B6BF-4345-8F39-76ECDA1C1C4E};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Toggle Headlight Display Mode;{50830560-31B5-11D0-82E7-00A0243E268D}:{24D69496-C507-4447-AB77-AB60904B17DC};Command;Toggle Wire On Shaded Display;{50830560-31B5-11D0-82E7-00A0243E268D}:{2218CD14-9A9A-49CA-A33F-B61A4710BFE8};Command;Toggle Shaded Display Mode;{50830560-31B5-11D0-82E7-00A0243E268D}:{CEBDE6E3-7C57-4349-B4E9-83234DFB91D3};Command;Maximize/Restore Current Viewport;{50830560-31B5-11D0-82E7-00A0243E268D}:{2343C950-0D21-11D3-BFE5-00A0248F9397};QPopMenu;Set View to...;{8BE42E22-EFA9-4947-B97C-D974F4627691}" language="Python" name="Display Modes" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Duplicate Multiple Mesh Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{6F74FAC0-5E7A-11D4-8C2C-009027BC3A0E};Command;Duplicate Single Mesh Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{AF4EDB50-5E63-11D4-8C2C-009027BC3A0E};Command;Extrude Component Along Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{C8436D81-4851-11D4-B7F3-0008C7A011A6};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};QPopMenuItem;Extrude duplicated Polygons;{C91B070A-1F9B-44AB-A224-13CC0927D7BE};QPopMenuItem;Raycast Select - Include Backfacing Polygons;{FF1A8889-E161-4369-8B59-D7471DD7EA89};QPopMenuItem;Raycast Select in Shaded Mode;{F7400B1F-0B85-42CA-A27F-E314A24A8239};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Slice Polygons Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{6CA134E9-64EA-494B-A7EE-E47BF8D16931};Command;Split Edge Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{CB7D9160-46B2-11D4-8C28-009027BC3A0E};Command;Split Polygon Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{C6737510-67EA-11D4-8C2D-009027BC3A0E};Command;Weld Point Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{45BA55DB-1280-46FC-96F2-D8385916D61F};Command;Add Vertex Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{64578190-B32E-11D4-8C47-009027BC3A0E};Command;Add Edge Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{87F68420-4782-11D4-8C27-009027BC3A0E};Command;Add Polygon Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{EFC008C0-3317-11D4-8C24-009027BC3A0E};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Disconnect Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{8582A7F9-EF44-4C3E-8C38-472BFD0C8414};Command;Extrude Comp. Axis;{50830560-31B5-11D0-82E7-00A0243E268D}:{9E734592-4B92-11D4-B7F3-0008C7A011A6};Command;Collapse;{50830560-31B5-11D0-82E7-00A0243E268D}:{7F392188-2520-11D4-97F2-0800360BFF02};Command;Bevel;{50830560-31B5-11D0-82E7-00A0243E268D}:{9589E229-4BB4-11D4-A8B7-00C04F8EDF15};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Cursor Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{401C5B7B-3CA8-4675-AC2F-6383B855F747};Command;Tweak Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0D41FF0C-8AF4-4E18-9C1B-83277ACF12EF}" language="Python" name="Edit Polymesh (general)" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;PolyMesh Subdivide With Center;{50830560-31B5-11D0-82E7-00A0243E268D}:{412F8EE6-C4E2-11D4-B863-009027BC6587};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Filter Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{053894C2-8E7C-4F76-B1BB-283C34E3C420};Command;Filter Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{AD25FA37-856E-4AA4-83F3-352713319986};Command;Filter Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{1067D621-96FC-4DED-983F-E83C4D121372};Command;Polygon Reduction;{50830560-31B5-11D0-82E7-00A0243E268D}:{0488BE6A-6E7E-416B-9CAE-2A6A987BF75C};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Invert All Normals;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC71-F6B6-11D2-AC7E-00A02485CECB};Command;Invert Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{8DE9E423-B5F0-11D4-87B1-00A0C9ED6CE2};Command;Symmetrize Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{669FD6AA-D338-4311-9B7E-CB4A923311D1};Command;Quadrangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E71C2255-9AAF-4FF4-ABAC-4A6855C97C78};Command;Triangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{FB5B671D-C1A0-4DB6-8FF9-950A5029C2CD};Command;Paint Push Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0EB424E5-84F7-11D4-8094-00A0C9ED67BD};Command;Dice Object;{50830560-31B5-11D0-82E7-00A0243E268D}:{6AF65230-4EDA-42EB-9AC5-192F4F3916BA};Command;Subdivide;{50830560-31B5-11D0-82E7-00A0243E268D}:{60D7DF7E-B5B0-11D4-814F-00A0C9AC19A9};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B}" language="Python" name="Edit Polymesh" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;RelaxUVW;{50830560-31B5-11D0-82E7-00A0243E268D}:{ED3B4730-7798-45D8-9C23-5BCF3F8A7FEF}" language="Python" name="Edit UVs" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Tweak Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0D41FF0C-8AF4-4E18-9C1B-83277ACF12EF};Command;Move Point Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{EC9EC01E-B5C4-4335-9625-5F32F16875C6};Command;Move Component Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{56AA96F2-7AE3-11D1-8036-00A0243E2717};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};Command;Raise Nurbs Curve Degree;{50830560-31B5-11D0-82E7-00A0243E268D}:{8C80C39D-F376-45DD-BE99-510CD7820EB3};Command;Insert Curve Knot;{50830560-31B5-11D0-82E7-00A0243E268D}:{C21BFD40-3413-11D4-B48F-00D0B7142AFA};Command;Delete Point on Curve Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{56F7ECF0-CD24-11D3-A9BA-009027BC65D7};Command;Add Point on Curve Tool by Knot Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{46353ACD-408A-4F3F-A0BB-0244A6CC9AF5};Command;Add Point on Curve Tool by CVs;{50830560-31B5-11D0-82E7-00A0243E268D}:{2BB0233A-293A-44DF-8A83-FEEA941BCE9B};Command;Add Point on Curve Tool by Bezier-Knot Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{E5AB5B29-A386-4CC5-A040-34956CD44199}" language="Python" name="Edit NURBS Curve (general)" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Set Curve Knot Multiplicity;{50830560-31B5-11D0-82E7-00A0243E268D}:{90FF723C-BADB-4FCF-8756-AA3D21DAD819};Command;AlignBezierKnotsTangents;{50830560-31B5-11D0-82E7-00A0243E268D}:{C9993FA6-DFFC-43ED-BE8A-094BE0CBDE02}" language="Python" name="Edit NURBS Curve Knot" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Insert Curve Knot;{50830560-31B5-11D0-82E7-00A0243E268D}:{C21BFD40-3413-11D4-B48F-00D0B7142AFA}" language="Python" name="Edit NURBS Curve IsoPoint" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="Command;Subcurve Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{CB8498F3-CA7B-403B-9C97-BB79D465C2DE}" language="Python" name="Edit NURBS Curve Subcurve" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="True" items="" language="Python" name="Light Selector (+Ctrl to inspect)" type="QPopMenu">#The following code adds a menu item per light in the scene to the bottom of the menu 
# which selects the respective light (or inspects it when ctrl key is pressed at the same time)

def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the mneu after subsequent calls
	Lights = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;light&quot;, &quot;&quot;, True)
	for oLight in Lights:
		oLightItem = Application.CreateQPop(&quot;MenuItem&quot;)
		oLightItem.name = oLight.FullName
		
		Code = ('def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):\n')
		Code += &quot;\tbCtrlDown = (Application.GetKeyboardState()[1]) == 2\n&quot;
		Code += &quot;\tbAutoInspect = Application.GetValue('preferences.Interaction.autoinspect')\n&quot;
		Code += &quot;\tif bAutoInspect and bCtrlDown or bAutoInspect==False and bCtrlDown==False: Application.InspectObj(\&quot;&quot; + oLight.FullName  + &quot;\&quot;);\n&quot;
		Code += (&quot;\telse: Application.SelectObj('&quot; + oLight.FullName + &quot;','','');&quot;)
		oLightItem.code = Code
		self.appendTempMenuItem (oLightItem)</QPopMenu><QPopMenu executeCode="False" items="QPopMenuItem;Top View;{F7EA1A23-1A8C-4700-ABBE-411A1E3EEEA0};QPopMenuItem;Right View;{327462FD-3C48-41BF-B3F2-B89D47373596};QPopMenuItem;Front View;{9423D578-C06A-4A49-87F7-06DC66F45BCB};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};QPopMenuItem;Bottom View;{2F7AF9C6-CB69-4CD6-AC91-6828976C79B7};QPopMenuItem;LeftView;{2D800286-8008-44BC-929B-E9757AB8D34C};QPopMenuItem;Back View;{FBF7FE90-439B-467B-9276-B5A4DBC2D8FA};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};QPopMenuItem;User View;{2F3D7376-247F-4079-BA08-A4485C3DC4D0};QPopSeparator;NewSeparator;{3719F0F9-D88C-41C4-918D-91E8DC658C63};QPopMenu;Look Through Camera;{DF248DD0-EC48-4D7B-92EB-252E08F791A4};QPopMenu;Look Through Spotlight;{D3DF5943-46CA-4B80-91E1-1AD7423A2E69}" language="Python" name="Set View to..." type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	pass</QPopMenu><QPopMenu executeCode="False" items="" language="Python" name="Edit Shading Nodes" type="QPopMenu">def QPopMenu_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	oLO = Application.Desktop.ActiveLayout;
	i = 0
	Application.LogMessage(oLO.Views(i).Name)
	Application.LogMessage(oLO.Views(i).GetAttributeValue(&quot;selection&quot;));
	pass</QPopMenu><QPopMenu executeCode="False" items="QPopMenuItem;+100%;{80B86827-F79D-4E62-870C-586A2D9E7BFB};QPopMenuItem;+50%;{A6A6AF28-9901-4807-9EB9-2708EEDE74CE};QPopMenuItem;+10%;{848084F3-572F-4FC3-A82B-E9F988312C90};QPopMenuItem;add 1;{9538461A-51B8-4394-95D1-4FE338B4A566}" language="Python" name="Property Editing - Add Value" type="QPopMenu">def QPopMenu_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="QPopMenuItem;subtract 1;{DF28E5C5-1AA2-4625-9B43-163752EF08B2};QPopMenuItem;-10%;{F5986B63-1B99-4206-A86C-B354B9C3B93A};QPopMenuItem;-50%;{38EA9632-4B2F-4931-BA6B-DC58AC4F6A35}" language="Python" name="Property Editing - Subtract Value" type="QPopMenu">def QPopMenu_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="QPopMenuItem;10;{014B1D69-B4F3-48F8-BE34-38432C9D7BCC};QPopMenuItem;5;{DE3109AF-94F7-4619-8C9E-0BC4B7E63DA7};QPopMenuItem;1;{085EF958-00F3-4601-B482-E6E0A23D1B2B};QPopMenuItem;0,5;{5E81B052-770B-466D-90C6-45982A6AC722};QPopMenuItem;0,1;{5A81EB97-9369-4B5B-AFC6-EE0EB375AC94};QPopMenuItem;0;{BDEAA462-8F9F-42EE-8E45-9740AB7680B0};QPopMenuItem;-1;{308BB708-EF42-45E5-8D0F-369615C753F7};QPopMenuItem;None;{3E8B68F4-8F25-44E8-9C18-D239D23C98BB}" language="Python" name="Property Editing - Set Value" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="True" items="" language="Python" name="Camera Selector (+Ctrl to inspect)" type="QPopMenu">#The following code adds a menu item per existing camera to the bottom of the menu 
# which selects the respective camera (or inspects it when ctrl key is pressed at the same time)

def QPopMenu_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;camera&quot;, &quot;&quot;, True)

	for oCam in Cams:
		oCamItem = Application.CreateQPop(&quot;MenuItem&quot;)
		oCamItem.name = oCam.FullName
		
		Code = ('def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):\n')
		Code += ('\tApplication.SelectObj(&quot;'+ oCam.FullName + '&quot;, &quot;&quot;, &quot;&quot;)\n')
		Code += ('\tbCtrlDown = (Application.GetKeyboardState()[1]) == 2\n')
		Code += ('\tbAutoInspect = Application.GetValue(\&quot;preferences.Interaction.autoinspect\&quot;)\n')
		Code += ('\tif bAutoInspect and bCtrlDown or bAutoInspect==False and bCtrlDown==False: Application.InspectObj(\&quot;' + oCam.FullName + '.Camera\&quot;,)')
		oCamItem.code = Code
		self.appendTempMenuItem (oCamItem)</QPopMenu><QPopMenu executeCode="False" items="QPopMenu;Light Selector (+Ctrl to inspect);{62B9734F-4B9D-4111-991A-B74F571662F3};QPopMenu;Camera Selector (+Ctrl to inspect);{323BCA75-0EA3-4C0A-817D-D4EE3C8926BE}" language="Python" name="Shading Properties" type="QPopMenu">def QPopMenu_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="QPopMenuItem;Orbit Around Selection - Components only;{406E4B69-96AE-4C9D-B782-B359CEB1CE1C};QPopMenuItem;Orbit Around Selection;{5582ADF1-5EF2-4403-B10A-E10CB29B9DAE}" language="Python" name="Preferences - Tools - Camera" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="False" items="QPopMenuItem;Merge Clusters with same Material;{F483C0D5-D943-46F0-BBD5-62021B8A1AC8};Command;Create Texture Subprojection;{50830560-31B5-11D0-82E7-00A0243E268D}:{479C4EF9-509D-4F8B-99BC-42A06F13D56F};Command;Create PlanarXY Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A2-0B13-11D4-B4AE-00AA0068D2C0};Command;Create PlanarXZ Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A4-0B13-11D4-B4AE-00AA0068D2C0};Command;Create PlanarYZ Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A3-0B13-11D4-B4AE-00AA0068D2C0}" language="Python" name="Create Texture Projection" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QPopMenu><QPopMenu executeCode="True" items="" language="Python" name="Look Through Spotlight" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!

	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;Light&quot;, &quot;&quot;, True)
	
	for oCam in Cams:
		if Application.GetValue(oCam.FullName + &quot;.light.Type&quot;) == 2:
			print (oCam.FullName + &quot; is a spotlight&quot;)
			oCamItem = Application.CreateQPop(&quot;MenuItem&quot;)
			oCamItem.name = oCam.FullName

			Code = ('def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):\n\toVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )\n')
			Code+= ('\toView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)\n')
			Code += ('\toVM.SetAttributeValue(&quot;activecamera:&quot; + oView + &quot;\&quot;,&quot;' + oCam.FullName + '&quot;)\n')

			oCamItem.code = Code
			self.appendTempMenuItem (oCamItem)</QPopMenu><QPopMenu executeCode="True" items="" language="Python" name="Look Through Camera" type="QPopMenu">def QPopMenu_Execute(self, QPopMenuItems, QPopMenus, QPopMenuSets):	#Don't rename this function!

	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;Camera&quot;, &quot;&quot;, True)

	for oCam in Cams:
		oCamItem = Application.CreateQPop(&quot;MenuItem&quot;)
		oCamItem.name = oCam.FullName

		Code = ('def Script_Execute (self, QPopMenuItems, QPopMenus, QPopMenuSets):\n\toVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )\n')
		Code+= ('\toView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)\n')
		Code += ('\toVM.SetAttributeValue(&quot;activecamera:&quot; + oView + &quot;\&quot;,&quot;' + oCam.FullName + '&quot;)\n')

		oCamItem.code = Code
		self.appendTempMenuItem (oCamItem)</QPopMenu></QPopMenus><QPopMenuSets><QPopMenuSet AContexts="NURBS_Curve (or components);Polymesh (multiple);Polymesh (or components);Default" AMenus="Edit NURBS Curve (general);Edit Polymesh (multiple);Edit Polymesh (general);None" BContexts="Default" BMenus="Display Modes" CContexts="Default" CMenus="None" DContexts="NURBS_Curve (single);NURBS_Curve_Subcurve;NURBS_Curve_IsoPoint;NURBS_Curve_Knot;NURBS_Curve_Point;Polymesh (single);Polymesh_Polygons;Polymesh_Edges;Polymesh_Points;Default" DMenus="None;Edit NURBS Curve Subcurve;Edit NURBS Curve IsoPoint;Edit NURBS Curve Knot;None;Edit Polymesh;Edit Polymesh Polygons;Edit Polymesh Edges;Edit Polymesh Points;None" name="Modeling" type="QPopMenuSet"/><QPopMenuSet AContexts="Default" AMenus="Edit UVs" BContexts="Default" BMenus="None" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="UV Editing" type="QPopMenuSet"/><QPopMenuSet AContexts="Default" AMenus="Edit Shading Nodes" BContexts="Default" BMenus="None" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Shader Editing" type="QPopMenuSet"/><QPopMenuSet AContexts="Polymesh (or components);Default" AMenus="Create Texture Projection;None" BContexts="Default" BMenus="Shading Properties" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Lighting and shading" type="QPopMenuSet"/><QPopMenuSet AContexts="Default" AMenus="Property Editing - Set Value" BContexts="Default" BMenus="Property Editing - Add Value" CContexts="Default" CMenus="Property Editing - Subtract Value" DContexts="Default" DMenus="None" name="Property Editing" type="QPopMenuSet"/></QPopMenuSets><QPopMenuDisplayContexts><QPopMenuDisplayContext language="Python" name="Polymesh (or components)" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	if (len(Application.Selection) &gt; 0): #Is something selected?
		oSelection = Application.Selection(0)
		if oSelection.Type == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
			return True
		selType = oSelection.Type
		if ((selType == &quot;edgeSubComponent&quot;) or (selType == &quot;pntSubComponent&quot;) or (selType == &quot;polySubComponent&quot;)):
			oParentObj = oSelection.Subcomponent.Parent3DObject
			if oParentObj.Type == &quot;polymsh&quot;:  #Is the parent of the selected component(s) a polymesh?
				return True								
	return False	#This function must return a boolean!</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="Default" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #Don't rename this function
	return True</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="Polymesh_Points" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	if (len(Application.Selection) &gt; 0): #Is something selected?
		oSelection = Application.Selection(0)
		if oSelection.Type == &quot;pntSubComponent&quot;:
			oParentObj = oSelection.Subcomponent.Parent3DObject
			if oParentObj.Type == &quot;polymsh&quot;: #Is the parent of the selected component(s) a polymesh?
				return True								
	return False	#This function must return a boolean!</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="Polymesh_Edges" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo):  #This function must not be renamed!
	oSelection = Application.Selection
	if (len(oSelection) &gt; 0):  #Is something selected?
		#Is the first selected object an edge of on a Polymesh?
		if str(oSelection(0).Type) == &quot;edgeSubComponent&quot;: 
			oParentObj = oSelection(0).Subcomponent.Parent3DObject
			if oParentObj.Type == &quot;polymsh&quot;: 	
				return True	#This function must return a boolean!
	return False</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="Polymesh_Polygons" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	oSelection = Application.Selection
	if (len(oSelection) &gt; 0): #Is something selected?
		#Is the first selected object a point on a Polymesh?
		if str(oSelection(0).Type) == &quot;polySubComponent&quot;: 
			oParentObj = oSelection(0).Subcomponent.Parent3DObject
			if str(oParentObj.Type) == &quot;polymsh&quot;: 	
				return True #This function must return a boolean!
	return False</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="NURBS_Curve_Subcurve" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	oSelection = Application.Selection
	if (len(oSelection) &gt; 0): #Is something selected?
		#Is the first selected object a subcurve of a NURBS curve list?
		if str(oSelection(0).Type) == &quot;subcrvSubComponent&quot;: 
			oParentObj = oSelection(0).Subcomponent.Parent3DObject
			if oParentObj.Type == &quot;crvlist&quot;: 	
				return True #This function must return a boolean!
	return False</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="Polymesh (multiple)" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	if (len(Application.Selection) &gt; 1): #Is something selected?
		if Application.Selection(0).Type == &quot;polymsh&quot; and Application.Selection(1).Type == &quot;polymsh&quot;: #Are the first two selected objects polymeshes?
			return True #This function must return a boolean!
	return False</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="Polymesh (single)" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	if (len(Application.Selection) &gt; 0): 	#Is something selected?
		oSelection = Application.Selection(0)
		if oSelection.Type == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
			return True
	return False	#This function must return a boolean!</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="NURBS_Curve (single)" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	oSelection = Application.Selection
	if (len(oSelection) &gt; 0):  #Is something selected?
		#Is the first selected object a NURBS curvelist?
		if str(oSelection(0).Type) == &quot;crvlist&quot;: 
			return True	#This function must return a boolean!
	return False</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="NURBS_Curve (or components)" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	if (len(Application.Selection) &gt; 0): #Is something selected?
		oSelection = Application.Selection(0)
		if oSelection.Type == &quot;crvlist&quot;:  #Is the first selected object a curve list?
			return True
		selType = oSelection.Type
		if ((selType == &quot;knotSubComponent&quot;) or (selType == &quot;isopntSubComponent&quot;) or (selType == &quot;pntSubComponent&quot;) or (selType ==&quot;subcrvSubComponent&quot;)):
			oParentObj = oSelection.Subcomponent.Parent3DObject
			if oParentObj.Type == &quot;crvlist&quot;:  #Is the parent of the selected component(s) a polymesh?
				return True								
	return False  #This function must return a boolean!</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="NURBS_Curve_Point" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	if (len(Application.Selection) &gt; 0): #Is something selected?
		oSelection = Application.Selection(0)
		if (oSelection.Type == &quot;pntSubComponent&quot;):
			oParentObj = oSelection.Subcomponent.Parent3DObject
			if oParentObj.Type == &quot;crvlist&quot;: 		#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="NURBS_Curve_IsoPoint" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): 	#This function must not be renamed!
	if (len(Application.Selection) &gt; 0):	#Is something selected?
		oSelection = Application.Selection(0)
		if (oSelection.Type == &quot;isopntSubComponent&quot;):
			oParentObj = oSelection.Subcomponent.Parent3DObject
			if oParentObj.Type == &quot;crvlist&quot;:	#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="NURBS_Curve_Knot" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	if (len(Application.Selection) &gt; 0): #Is something selected?
		oSelection = Application.Selection(0)
		if (oSelection.Type == &quot;knotSubComponent&quot;):
			oParentObj = oSelection.Subcomponent.Parent3DObject
			if oParentObj.Type == &quot;crvlist&quot;: 		#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QPopMenuDisplayContext><QPopMenuDisplayContext language="Python" name="NURBS_Curve (multiple)" type="QPopMenuDisplayContext">def QPopContext_Execute(SelInfo): #This function must not be renamed!
	if (len(Application.Selection) &gt; 1): #Is something selected?
		if Application.Selection(0).Type == &quot;crvlist&quot; and Application.Selection(1).Type == &quot;crvlist&quot;: #Are the first two selected objects polymeshes?
			return True #This function must return a boolean!
	return False</QPopMenuDisplayContext></QPopMenuDisplayContexts><QPopViewSignatures><QPopViewSignature menuSets="Modeling;Lighting and shading" name="3D Views" signature="Viewer;DS_ChildViewManager;DS_ChildRelationalView;TrayClientWindow;" type="QPopViewSignature"/><QPopViewSignature menuSets="UV Editing" name="Texture Editor" signature="DS_ChildTextureEditor;TrayClientWindow;XSIFloatingView;" type="QPopViewSignature"/><QPopViewSignature menuSets="Shader Editing" name="Render Tree" signature="DS_ChildRenderTree;TrayClientWindow;XSIFloatingView;" type="QPopViewSignature"/><QPopViewSignature menuSets="" name="Animation Editor  - FCurve Editor" signature="FcurveViewer;DS_ChildAnimationEditor;TrayClientWindow;XSIFloatingView;" type="QPopViewSignature"/><QPopViewSignature menuSets="" name="Animation Mixer" signature="DS_ChildAnimationMixer;TrayClientWindow;XSIFloatingView;" type="QPopViewSignature"/><QPopViewSignature menuSets="" name="Animation Editor - DopeSheet" signature="DopesheetView;DS_ChildDopeSheet;TrayClientWindow;XSIFloatingView;" type="QPopViewSignature"/><QPopViewSignature menuSets="" name="Shape Manager" signature="Viewer;DS_ChildViewManager;DS_ChildRelationalView;TrayClientWindow;" type="QPopViewSignature"/><QPopViewSignature menuSets="Property Editing" name="Property Editor" signature="DSPropertyInspectorPagesArea;Tab;DS_ChildPropertyEditor;TrayClientWindow;XSIFloatingView;" type="QPopViewSignature"/></QPopViewSignatures><QPopDisplayEvents><QPopDisplayEvent key="49" keyMask="0" number="0" type="QPopDisplayEvent"/><QPopDisplayEvent key="50" keyMask="0" number="0" type="QPopDisplayEvent"/></QPopDisplayEvents></QPopComponents>