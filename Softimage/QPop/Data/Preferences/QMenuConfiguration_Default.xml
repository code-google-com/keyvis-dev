<?xml version="1.0" ?><QMenuComponents><QMenu_MenuItems><QMenu_MenuItem UID="{5DCFB75B-A71C-4FBA-9D97-4A6F1603CC25}" category="Preferences" language="Python" name="Extrude duplicated Polygons" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	if Application.Preferences.GetPreferenceValue(&quot;duplicate.polygons&quot;) == 1:
		return True
	return False

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	Application.SetValue(&quot;Preferences.duplicate.polygons&quot;, not Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets))
</QMenu_MenuItem><QMenu_MenuItem UID="{9ACC13FE-6EFB-4593-B148-B5BF19C19B63}" category="Property Editing" language="Python" name="+10%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *1.1),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{53BB5A75-A389-406E-9B81-12A5099C2305}" category="Property Editing" language="Python" name="+50%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *1.5),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{58C6086E-CCFE-46B0-8E40-B367C62EC119}" category="Property Editing" language="Python" name="+100%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *2),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{6FEC85BA-05E1-421D-A8FF-88B7253C6E52}" category="Property Editing" language="Python" name="-10%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *0.9),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{EAC42987-B550-4888-8C60-F10B35252CBA}" category="Property Editing" language="Python" name="-50%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *0.5),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{921C93C5-5FE3-4A80-92A1-A555B324F26A}" category="Property Editing" language="Python" name="0,1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.1,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{ECFA7FF7-76F2-4EA8-B248-34158E26D4AA}" category="Property Editing" language="Python" name="0,5" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.5,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{3DB5B60B-2621-4CC6-888F-2B92157276EF}" category="Property Editing" language="Python" name="1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,1,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{2F20F6EF-46CB-481F-B265-AA7ACC5200B4}" category="Property Editing" language="Python" name="5" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,5,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{162D729E-C5C7-4357-96DD-0ECD9C81BF49}" category="Property Editing" language="Python" name="10" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,10,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{B57828D5-6C63-4A14-9252-B8EE46D4386F}" category="Property Editing" language="Python" name="0" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{DDFB8D5C-67AF-421F-8008-1B6131AA6140}" category="Polygon Modeling" language="Python" name="Weld Points to COG" switch="False" type="QMenu_MenuItem">def Script_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	print (self.name)
	Application.ApplyTopoOp(&quot;WeldPoints&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{AA6AD8F9-5371-49FD-BA14-BA65BA0E905C}" category="Preferences" language="Python" name="Raycast Select in Shaded Mode" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	if Application.Preferences.GetPreferenceValue(&quot;Select.rectraycast&quot;) == 1:
		return True
	return False


def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	Application.SetValue(&quot;preferences.Select.rectraycast&quot;, not Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets))
</QMenu_MenuItem><QMenu_MenuItem UID="{E5A8E0FC-A6BD-4790-8D4A-9A6007447C4B}" category="Views" language="Python" name="Top View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Top\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{F4DBEC5F-3667-4DBE-9824-09C43C463787}" category="Preferences" language="Python" name="Raycast Select - Include Backfacing Polygons" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	if Application.Preferences.GetPreferenceValue(&quot;Select.raycastbackfacing&quot;) == 1:
		return True
	return False

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	Application.SetValue(&quot;preferences.Select.raycastbackfacing&quot;, not Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets))
</QMenu_MenuItem><QMenu_MenuItem UID="{F51AAB7C-6C27-4267-A6DF-BBA74C9801AE}" category="Preferences" language="Python" name="Orbit Around Selection" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) == 2
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function

	if Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) != 2:
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 2, &quot;&quot;)
	else: 
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 0, &quot;&quot;)


</QMenu_MenuItem><QMenu_MenuItem UID="{2D819B5E-F4CB-4043-BF3E-2A117EDDC0F1}" category="Preferences" language="Python" name="Orbit Around Selection - Components only" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) == 1
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	if Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) != 1:
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 1, &quot;&quot;)
	else: 
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 0, &quot;&quot;)




</QMenu_MenuItem><QMenu_MenuItem UID="{6F8060C0-E219-4776-8053-8D3925A318C3}" category="Polygon Modeling" language="Python" name="Cap" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	Application.LogMessage(&quot;Sorry, the Cap script item is WIP and not yet functional&quot;)
	#Weld selected points towards their common center
	#Application.ApplyTopoOp(&quot;WeldPoints&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{029E340A-A330-4878-AF05-03CC7E141DD6}" category="Clusters Editing" language="Python" name="Merge Clusters with same Material" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	Sel = Application.Selection
	oSel = list()
	for Obj in Sel:
		oSel.append(Obj)
	 
	 
	for oObj in oSel:
		delClusters = list()
		Clusters = oObj.ActivePrimitive.Geometry.Clusters
		polyClusters = list()
		for oCluster in Clusters:
			if oCluster.Type == &quot;poly&quot; and len(oCluster.Elements) != 0:
				polyClusters.append (oCluster)
	 
		
		for polyCluster in polyClusters:
			currentmat = polyCluster.Material
			#pplication.LogMessage(currentmat)

			for oCheckCluster in polyClusters:
				if oCheckCluster != polyCluster and len(oCheckCluster.Elements) != 0:
					if oCheckCluster.Material.IsEqualTo(polyCluster.Material):
						#Application.LogMessage(&quot;Processing cluster: &quot; + oCheckCluster.name)
						clusterElements = oCheckCluster.Elements
						Application.DeselectAll()
						Application.SelectMembers(oCheckCluster.FullName,True,False)
						Application.AddToSelection(polyCluster.FullName,&quot;ASITIS&quot;,False)
						Application.AddToCluster(&quot;&quot;, &quot;siRemoveFromExistingClusters&quot;)
		
		
		for Cluster in oObj.ActivePrimitive.Geometry.Clusters:
			if len(Cluster.Elements) == 0:
				Application.DeleteObj(Cluster.FullName)

	Application.Application.DeselectAll()
	Application.SelectObj(oSel)
</QMenu_MenuItem><QMenu_MenuItem UID="{DF055235-F0DD-4B74-9EAD-5356BDD4B5B2}" category="Views" language="Python" name="User View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;User\&quot;)&quot;)
	eval(stri)</QMenu_MenuItem><QMenu_MenuItem UID="{2CF87012-0BBC-4283-90AA-6F9BFD22F8EA}" category="Views" language="Python" name="Right View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Right\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{BB4BCAFE-E7B3-4571-AD65-798AFD0C098A}" category="Views" language="Python" name="Back View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Front\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (3,True,&quot;&quot;, viewIndices[oView])

</QMenu_MenuItem><QMenu_MenuItem UID="{90356345-2F37-4528-9A38-6782A391682D}" category="Views" language="Python" name="Front View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Front\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])
</QMenu_MenuItem><QMenu_MenuItem UID="{25924234-375A-4824-AE1F-E5C9275087AA}" category="Property Editing" language="Python" name="None" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,&quot;&quot;,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{4D9B5385-932F-4FEA-9F92-F48CF0F7547C}" category="Property Editing" language="Python" name="-1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,-1,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{202311B9-CFAC-4D76-9577-E551262AB7C3}" category="Views" language="Python" name="Bottom View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Top\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (2,True,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{843610BD-6BF3-483E-8318-D52E5AE79F6B}" category="Views" language="Python" name="LeftView" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Right\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (1,True,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{93B22F09-D534-47F5-AC43-37605DC0F1F0}" category="Property Editing" language="Python" name="add 1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam, (CurrentVal + 1),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{2BC3C879-A435-4D22-BF32-8CD9BBDD1A89}" category="Property Editing" language="Python" name="subtract 1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam, (CurrentVal - 1),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{1AB583AA-7F07-45AF-A163-27200DEEF7CE}" category="Views" language="Python" name="Set Wireframe Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;wireframe&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{EA23D359-E6C0-48FF-BDFF-B22230B22378}" category="Views" language="Python" name="Set Bounding Box Display mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;bbox&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{436B6756-52AD-45D5-84B2-57F9223248A4}" category="Views" language="Python" name="Set Depth Cue Dispay Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;depthcue&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{487A7355-CA84-48B5-876D-979102D64968}" category="Views" language="Python" name="Set Hidden Line Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;hiddenline&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{63C4DCD5-F977-47B4-A521-829C7D76DFE8}" category="Views" language="Python" name="Set Constant Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;constant&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{49A520EB-620F-4EB2-BCEB-B2C28004B370}" category="Views" language="Python" name="Set Shaded Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;shaded&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{EB9160C0-2CA1-48A0-B1A7-1AE59AB7BD0C}" category="Views" language="Python" name="Set Textured Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;textured&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{E2C30EC3-AAFC-47AC-8631-6F0DE9FEB6AA}" category="Views" language="Python" name="Set Textured Decal Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;texturedecal&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{A35B4000-0F61-4571-8A6F-1B3F84AAE36F}" category="Views" language="Python" name="Set Realtime Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;realtimeshaders&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{F14B0EEF-7A55-4CBA-AFCB-66EB17416706}" category="Curve Modeling" language="Python" name="Align Bezier Handles" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,2)
</QMenu_MenuItem><QMenu_MenuItem UID="{3036373C-13C1-4849-A0D6-A8DB71CAB72E}" category="Curve Modeling" language="Python" name="Align Bezier Handles Forward to Back" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,0)
</QMenu_MenuItem><QMenu_MenuItem UID="{D12B8F0C-67B6-4D3B-8F51-4C22341A3051}" category="Curve Modeling" language="Python" name="Align Bezier Handles Back to Forward" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,1)
</QMenu_MenuItem><QMenu_MenuItem UID="{37637245-3118-43FE-B731-6FC7D8DB9D5B}" category="Curve Modeling" language="Python" name="Align Bezier Handles - Make Knot a Corner" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,7)
</QMenu_MenuItem><QMenu_MenuItem UID="{D0F3D4E3-9A18-440A-AF4E-9CCB93CCCD53}" category="Curve Modeling" language="Python" name="Align Bezier Handles - Make adjacent Segements Linear" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,5)
</QMenu_MenuItem><QMenu_MenuItem UID="{7591EB61-7EEB-496E-B8C6-AA619CBB92B8}" category="Preferences" language="Python" name="Inspect Duplicate Options" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InspectObj(&quot;preferences.duplicate&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{E6A7E5E2-EF77-4C9B-A307-BD2D9605C2DB}" category="Preferences" language="Python" name="Inspect Selection Options" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InspectObj(&quot;preferences.select&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{46E5ADC6-BA83-410B-93BB-7B075DCEFD66}" category="Preferences" language="Python" name="Inspect Camera Options" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InspectObj(&quot;preferences.Camera&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{5718BFF7-26EA-41E8-A916-6BE641845057}" category="Curve Modeling" language="Python" name="Extract Edges as Curve" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	sel = Application.Selection(0)
	ImmedMode = 0
	if Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) == True:
		ImmedMode = 1
	result= Application.ApplyGenOp(&quot;ExtractEdgeLoopOp&quot;, &quot;&quot;, sel, &quot;&quot;, ImmedMode, &quot;&quot;, &quot;&quot;)
	Application.InspectObj(result)
	
	</QMenu_MenuItem><QMenu_MenuItem UID="{5F63AA21-D583-42DE-960B-BB7220E5A0E0}" category="Curve Modeling" language="Python" name="Remove Knot" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	ImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	curveList = list()
	for knot in Application.Selection:
		if knot.Type == &quot;knotSubComponent&quot;:
			curveList.append(knot.SubComponent.Parent3DObject) #Add curve to list of curves
			Application.SetCurveKnotMultiplicity(knot, 0, ImmedMode)
				
</QMenu_MenuItem><QMenu_MenuItem UID="{93136210-5E73-4115-B034-30E36154FB9E}" category="Curve Modeling" language="Python" name="Create Blend Curve" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	if len(Application.Selection) &gt;0 :
		if (Application.Selection(0).Type == &quot;crvbndrySubComponent&quot;):
			FirstBoundary = Application.Selection(0)
		else:
			FirstResult = Application.PickElement( &quot;CurveBoundary&quot; , &quot;Select first Boundary&quot;, &quot;Select first Boundary&quot;, &quot;&quot;, &quot;&quot;, 0, &quot;&quot; )
			Application.LogMessage(&quot;Past first pick session A&quot;)
			FirstBoundary = FirstResult.Value(&quot;PickedElement&quot;)
	else:
		FirstResult = Application.PickElement( &quot;CurveBoundary&quot; , &quot;Select first Boundary&quot;, &quot;Select first Boundary&quot;, &quot;&quot;, &quot;&quot;, 0, &quot;&quot; )
		Application.LogMessage(&quot;Past first pick session B&quot;)
		FirstBoundary = FirstResult.Value(&quot;PickedElement&quot;)
	
	if len(Application.Selection) &gt;1:
		if (Application.Selection(1).Type == &quot;crvbndrySubComponent&quot;):
			SecondBoundary = Application.Selection(1)
		else:
			SecondResult = Application.PickElement( &quot;CurveBoundary&quot; , &quot;Select second Boundary&quot;, &quot;Select second Boundary&quot;, &quot;&quot;, &quot;&quot;, 0, &quot;&quot; )
			Application.LogMessage(&quot;Past second pick session A.&quot;)
			SecondBoundary = SecondResult.Value(&quot;PickedElement&quot;)
	else:
		SecondResult = Application.PickElement( &quot;CurveBoundary&quot; , &quot;Select second Boundary&quot;, &quot;Select second Boundary&quot;, &quot;&quot;, &quot;&quot;, 0, &quot;&quot; )
		Application.LogMessage(&quot;Past second pick session B&quot;)
		SecondBoundary = SecondResult.Value(&quot;PickedElement&quot;)
	
	if FirstBoundary.Type == &quot;crvbndrySubComponent&quot; and SecondBoundary.Type == &quot;crvbndrySubComponent&quot;:
		Result = Application.ApplyGenOp(&quot;BlendCrv&quot;, &quot;&quot;, [FirstBoundary,SecondBoundary], 3, &quot;siPersistentOperation&quot;, &quot;siKeepGenOpInputs&quot;, &quot;&quot;)
		
	if Result != None:
		if Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) == True: #Is ImmediateMode enabled?
			ReturnVal = Application.InspectObj(Result,&quot;&quot;,&quot;&quot;,4,False)
			if ReturnVal == True: #User has canceled?
				Application.DeleteObj()
			else:
				Application.FreezeModeling(Result)
		else: #We are not in ImmediateMode, this is simpler...
			keyState = Application.GetKeyboardState() #Get currently pressed modifier keys (if any)
			bCtrlDown = keyState[1] == 2 #Is Ctrl pressed?
			bAutoInspect = Application.GetUserPref( &quot;AutoInspectEnabled&quot; )
			if bAutoInspect and bCtrlDown==False or bAutoInspect==False and bCtrlDown:
				Application.InspectObj(Result,&quot;&quot;,&quot;&quot;,1,False)
	
</QMenu_MenuItem><QMenu_MenuItem UID="{75757D69-CFA0-45FC-AE7F-C34E49576692}" category="Curve Modeling" language="Python" name="Set Curve Knot Multiplicity" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InspectOp()
	&quot;&quot;&quot;
	#ImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	#Application.LogMessage(&quot;ImmedMode at start is: &quot; + str(ImmedMode))
	knots = list()
	Sel = Application.Selection
	for obj in Sel:
		if obj.Type == &quot;knotSubComponent&quot;:
			knots.append(obj)
	
	#Application.Preferences.SetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot;, False )
	#NewImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	#Application.LogMessage (&quot;ImmedMode before applying Op is: &quot; + str(NewImmedMode))
	
	#try:
	ResultVal = str(Application.ApplyTopoOp(&quot;SetNurbsCrvKnotMultiplicity&quot;, knots, 3, &quot;siPersistentOperation&quot;, &quot;&quot;))

	#Result = Application.SetCurveKnotMultiplicity(knots,3,&quot;siPersistentOperation&quot;)
	Application.LogMessage(&quot;Result is: &quot; + str(ResultVal))
	#Application.LogMessage(&quot;Atempting to inspect: &quot; + str(Result))
	#Application.Preferences.SetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot;,ImmedMode )
	Application.InspectObj(ResultVal,&quot;&quot;,&quot;&quot;,4,False)
	#Application.AutoInspect(Result)
	



	if Result != None:
		
		if ImmedMode == True: #Was the ImmediateMode enabled when operation was started?
			ReturnVal = Application.InspectObj(Result[0],&quot;&quot;,&quot;&quot;,4,True)
			if ReturnVal == True: #User has canceled?
				Application.DeleteObj(Result)
			else:
				Application.FreezeModeling(Result)
		else: #We are not in ImmediateMode, this is simpler...
			keyState = Application.GetKeyboardState() #Get currently pressed modifier keys (if any)
			bCtrlDown = keyState[1] == 2 #Is Ctrl pressed?
			bAutoInspect = Application.GetUserPref( &quot;AutoInspectEnabled&quot; )
			if bAutoInspect and bCtrlDown==False or bAutoInspect==False and bCtrlDown:
				Application.InspectObj(Result,&quot;&quot;,&quot;&quot;,1,False)
		&quot;&quot;&quot;
	#except:
		#pass
	
	#Application.Preferences.SetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot;,ImmedMode )
</QMenu_MenuItem><QMenu_MenuItem UID="{D02F21CA-EF0A-400D-9B1D-DC16427D7F14}" category="Curve Modeling" language="Python" name="Tweak Curve" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.Commands( &quot;Direct Manip Tool&quot;  ).Execute()</QMenu_MenuItem><QMenu_MenuItem UID="{FAA92A3C-1E70-4079-924A-7CA4FDCC5812}" category="Preferences" language="Python" name="Log Verbose Messages" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.msglogverbose&quot;) == True
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	LogVerboseState = Application.Preferences.GetPreferenceValue(&quot;scripting.msglogverbose&quot;)
	Application.SetValue(&quot;preferences.scripting.msglogverbose&quot;, not LogVerboseState, &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{2C64BFED-137A-4E12-B6D0-81CDBD98EF54}" category="Preferences" language="Python" name="Log Messages" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.msglog&quot;) == True
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	LogState = Application.Preferences.GetPreferenceValue(&quot;scripting.msglog&quot;)
	Application.SetValue(&quot;preferences.scripting.msglog&quot;, not LogState, &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{5D96E331-5218-4472-BD17-01027655A2AA}" category="Preferences" language="Python" name="Show Hyperlinks" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.cmdlinks&quot;) == True
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.cmdlinks&quot;)
	Application.SetValue(&quot;preferences.scripting.cmdlinks&quot;, not State, &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{5DB213B4-45EA-4F67-BF56-E35CA411CB44}" category="Preferences" language="Python" name="Log Messages Real-Time" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.msglogrealtime&quot;) == True
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	LogState = Application.Preferences.GetPreferenceValue(&quot;scripting.msglogrealtime&quot;)
	Application.SetValue(&quot;preferences.scripting.msglogrealtime&quot;, not LogState, &quot;&quot;)


</QMenu_MenuItem></QMenu_MenuItems><QMenu_Menus><QMenu_Menu executeCode="False" items="Command;Mark Hard Edge Vertex;{50830560-31B5-11D0-82E7-00A0243E268D}:{71CFB7B5-2B33-11D4-B840-009027BC6587};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_MenuItem;Weld Points to COG;{DDFB8D5C-67AF-421F-8008-1B6131AA6140};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Weld Points to Target;{50830560-31B5-11D0-82E7-00A0243E268D}:{E5F394BB-72F7-49AC-B3A9-E1F7AE5E9D48};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Filter Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{AD25FA37-856E-4AA4-83F3-352713319986};Command;Paint Push Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0EB424E5-84F7-11D4-8094-00A0C9ED67BD};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B}" language="Python" name="Edit Polymesh Points" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Mark Hard Edge Vertex;{50830560-31B5-11D0-82E7-00A0243E268D}:{71CFB7B5-2B33-11D4-B840-009027BC6587};Command;Set Edge Crease Value;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E9FEE12-2D9E-11D4-B841-009027BC6587};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Subdivide Edge;{50830560-31B5-11D0-82E7-00A0243E268D}:{8F1FA2AF-3635-11D4-A8AF-00C04F8EDF15};Command;Split Edge;{50830560-31B5-11D0-82E7-00A0243E268D}:{904FB220-46B2-11D4-8C28-009027BC3A0E};Command;Dissolve &amp; Clean Adjacent Vertices;{50830560-31B5-11D0-82E7-00A0243E268D}:{1D09DE94-79BA-4ADD-8F8A-ED34588877AA};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Filter Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{053894C2-8E7C-4F76-B1BB-283C34E3C420};Command;Collapse;{50830560-31B5-11D0-82E7-00A0243E268D}:{7F392188-2520-11D4-97F2-0800360BFF02};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_MenuItem;Cap;{6F8060C0-E219-4776-8053-8D3925A318C3};Command;Weld Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{61467638-32CE-48C9-971C-904D60579F1A};QMenu_MenuItem;Extract Edges as Curve;{5718BFF7-26EA-41E8-A916-6BE641845057};Command;Bridge Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{3AEF5A2C-40E4-4B08-AE6D-ABBC7C199907}" language="Python" name="Edit Polymesh Edges" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Dissolve &amp; Clean Adjacent Vertices;{50830560-31B5-11D0-82E7-00A0243E268D}:{1D09DE94-79BA-4ADD-8F8A-ED34588877AA};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Inset Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{61DB5CAA-03FB-497F-8AAC-A9BB5B6C72BE};Command;Offset Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{A3F7B88C-7B09-4B70-B55D-54B6D6D01BC5};Command;Local Subdivision;{50830560-31B5-11D0-82E7-00A0243E268D}:{F8842CA7-78FD-11D4-B851-009027BC6587};Command;Dice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{86B4DB7E-3569-4FD0-B8D3-05C11AA054D5};Command;Invert Selected Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{11BEB110-85B1-11D4-8C31-009027BC3A0E};Command;Dice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{86B4DB7E-3569-4FD0-B8D3-05C11AA054D5};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Disconnect Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{8582A7F9-EF44-4C3E-8C38-472BFD0C8414};Command;Polygon Detach;{50830560-31B5-11D0-82E7-00A0243E268D}:{4F25DC5B-7EE8-487C-B639-D1E7946A53FC};Command;Polygon Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{598E1068-B64F-47F4-8F08-99443D94B0B5};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Filter Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{1067D621-96FC-4DED-983F-E83C4D121372};Command;Polygon Reduction;{50830560-31B5-11D0-82E7-00A0243E268D}:{0488BE6A-6E7E-416B-9CAE-2A6A987BF75C};Command;Slice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{3FCF7E6F-5E01-4932-9D1A-201A269255C5};Command;Split Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{52964382-BCB8-11D4-8C4B-009027BC3A0E};Command;Subdivide Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{BC8CCEEF-370F-11D4-A8B0-00C04F8EDF15};Command;Quadrangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E71C2255-9AAF-4FF4-ABAC-4A6855C97C78};Command;Triangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{FB5B671D-C1A0-4DB6-8FF9-950A5029C2CD};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Bridge Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{95983629-72EA-11D4-A8C2-00C04F8EDF15};Command;Symmetrize Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{669FD6AA-D338-4311-9B7E-CB4A923311D1};Command;Duplicate Polygons Along Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{D1343A2C-97E5-4236-9F41-3DBD21CAD8CB}" language="Python" name="Edit Polymesh Polygons" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Gator;{50830560-31B5-11D0-82E7-00A0243E268D}:{7DC64A1A-9888-4616-971E-707A802DF006};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Mesh Merge;{50830560-31B5-11D0-82E7-00A0243E268D}:{AB9A5C20-5839-11D4-8C2A-009027BC3A0E};Command;Mesh Blend;{50830560-31B5-11D0-82E7-00A0243E268D}:{EB16D9E0-5CC1-11D4-8C2C-009027BC3A0E};Command;Boolean Union;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E8-8E7A-11D4-8094-00A0C9ED67BD};Command;Boolean Intersection;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E9-8E7A-11D4-8094-00A0C9ED67BD};Command;Boolean Difference;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E7-8E7A-11D4-8094-00A0C9ED67BD}" language="Python" name="Edit Polymeshes (multiple)" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Toggle Background Color;{50830560-31B5-11D0-82E7-00A0243E268D}:{D90C33E1-23CB-498A-9B2C-A4860E4E515C};Command;Isolate Selected;{50830560-31B5-11D0-82E7-00A0243E268D}:{153189E9-79CF-4333-89A2-35D123A8B003};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_Menu;Preferences - Tools - Camera;{C2C7E156-4FD7-4892-A5F9-EDA03E2E8810};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_MenuItem;Set Realtime Display Mode;{A35B4000-0F61-4571-8A6F-1B3F84AAE36F};QMenu_MenuItem;Set Textured Decal Display Mode;{E2C30EC3-AAFC-47AC-8631-6F0DE9FEB6AA};QMenu_MenuItem;Set Textured Display Mode;{EB9160C0-2CA1-48A0-B1A7-1AE59AB7BD0C};QMenu_MenuItem;Set Shaded Display Mode;{49A520EB-620F-4EB2-BCEB-B2C28004B370};QMenu_MenuItem;Set Constant Display Mode;{63C4DCD5-F977-47B4-A521-829C7D76DFE8};QMenu_MenuItem;Set Hidden Line Display Mode;{487A7355-CA84-48B5-876D-979102D64968};QMenu_MenuItem;Set Depth Cue Dispay Mode;{436B6756-52AD-45D5-84B2-57F9223248A4};QMenu_MenuItem;Set Wireframe Display Mode;{1AB583AA-7F07-45AF-A163-27200DEEF7CE};QMenu_MenuItem;Set Bounding Box Display mode;{EA23D359-E6C0-48FF-BDFF-B22230B22378};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Toggle Headlight Display Mode;{50830560-31B5-11D0-82E7-00A0243E268D}:{24D69496-C507-4447-AB77-AB60904B17DC};Command;Toggle Wire On Shaded Display;{50830560-31B5-11D0-82E7-00A0243E268D}:{2218CD14-9A9A-49CA-A33F-B61A4710BFE8};Command;Toggle Shaded Display Mode;{50830560-31B5-11D0-82E7-00A0243E268D}:{CEBDE6E3-7C57-4349-B4E9-83234DFB91D3};Command;Maximize/Restore Current Viewport;{50830560-31B5-11D0-82E7-00A0243E268D}:{2343C950-0D21-11D3-BFE5-00A0248F9397}" language="Python" name="Display Modes" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Duplicate Multiple Mesh Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{6F74FAC0-5E7A-11D4-8C2C-009027BC3A0E};Command;Duplicate Single Mesh Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{AF4EDB50-5E63-11D4-8C2C-009027BC3A0E};Command;Extrude Component Along Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{C8436D81-4851-11D4-B7F3-0008C7A011A6};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_Menu;Preferences - Commands - Duplicate Options;{10598446-6072-475F-8DA6-E42903692E9C};QMenu_Menu;Preferences - Tools - Polygon;{44E0D894-0419-4DC0-9B67-80D5E36B54BB};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Slice Polygons Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{6CA134E9-64EA-494B-A7EE-E47BF8D16931};Command;Split Edge Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{CB7D9160-46B2-11D4-8C28-009027BC3A0E};Command;Split Polygon Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{C6737510-67EA-11D4-8C2D-009027BC3A0E};Command;Weld Point Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{45BA55DB-1280-46FC-96F2-D8385916D61F};Command;Add Vertex Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{64578190-B32E-11D4-8C47-009027BC3A0E};Command;Add Edge Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{87F68420-4782-11D4-8C27-009027BC3A0E};Command;Add Polygon Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{EFC008C0-3317-11D4-8C24-009027BC3A0E};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Disconnect Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{8582A7F9-EF44-4C3E-8C38-472BFD0C8414};Command;Extrude Comp. Axis;{50830560-31B5-11D0-82E7-00A0243E268D}:{9E734592-4B92-11D4-B7F3-0008C7A011A6};Command;Collapse;{50830560-31B5-11D0-82E7-00A0243E268D}:{7F392188-2520-11D4-97F2-0800360BFF02};Command;Bevel;{50830560-31B5-11D0-82E7-00A0243E268D}:{9589E229-4BB4-11D4-A8B7-00C04F8EDF15};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B};Command;Cursor Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{401C5B7B-3CA8-4675-AC2F-6383B855F747};Command;Tweak Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0D41FF0C-8AF4-4E18-9C1B-83277ACF12EF}" language="Python" name="Edit Polymesh (general)" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;PolyMesh Subdivide With Center;{50830560-31B5-11D0-82E7-00A0243E268D}:{412F8EE6-C4E2-11D4-B863-009027BC6587};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Filter Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{053894C2-8E7C-4F76-B1BB-283C34E3C420};Command;Filter Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{AD25FA37-856E-4AA4-83F3-352713319986};Command;Filter Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{1067D621-96FC-4DED-983F-E83C4D121372};Command;Polygon Reduction;{50830560-31B5-11D0-82E7-00A0243E268D}:{0488BE6A-6E7E-416B-9CAE-2A6A987BF75C};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Invert All Normals;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC71-F6B6-11D2-AC7E-00A02485CECB};Command;Invert Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{8DE9E423-B5F0-11D4-87B1-00A0C9ED6CE2};Command;Symmetrize Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{669FD6AA-D338-4311-9B7E-CB4A923311D1};Command;Quadrangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E71C2255-9AAF-4FF4-ABAC-4A6855C97C78};Command;Triangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{FB5B671D-C1A0-4DB6-8FF9-950A5029C2CD};Command;Paint Push Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0EB424E5-84F7-11D4-8094-00A0C9ED67BD};Command;Dice Object;{50830560-31B5-11D0-82E7-00A0243E268D}:{6AF65230-4EDA-42EB-9AC5-192F4F3916BA};Command;Subdivide;{50830560-31B5-11D0-82E7-00A0243E268D}:{60D7DF7E-B5B0-11D4-814F-00A0C9AC19A9}" language="Python" name="Edit Polymesh" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;RelaxUVW;{50830560-31B5-11D0-82E7-00A0243E268D}:{ED3B4730-7798-45D8-9C23-5BCF3F8A7FEF}" language="Python" name="Edit UVs" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Tweak Curve;{D02F21CA-EF0A-400D-9B1D-DC16427D7F14};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Add Point on Curve Tool by CVs;{50830560-31B5-11D0-82E7-00A0243E268D}:{2BB0233A-293A-44DF-8A83-FEEA941BCE9B};Command;Add Point on Curve Tool by Bezier-Knot Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{E5AB5B29-A386-4CC5-A040-34956CD44199};Command;Add Point on Curve Tool by Knot Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{46353ACD-408A-4F3F-A0BB-0244A6CC9AF5};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};Command;Delete Point on Curve Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{56F7ECF0-CD24-11D3-A9BA-009027BC65D7};Command;Raise Nurbs Curve Degree;{50830560-31B5-11D0-82E7-00A0243E268D}:{8C80C39D-F376-45DD-BE99-510CD7820EB3}" language="Python" name="Edit NURBS Curve (general)" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Align Bezier Handles;{F14B0EEF-7A55-4CBA-AFCB-66EB17416706};QMenu_MenuItem;Align Bezier Handles Back to Forward;{D12B8F0C-67B6-4D3B-8F51-4C22341A3051};QMenu_MenuItem;Align Bezier Handles Forward to Back;{3036373C-13C1-4849-A0D6-A8DB71CAB72E};QMenu_MenuItem;Align Bezier Handles - Make adjacent Segements Linear;{D0F3D4E3-9A18-440A-AF4E-9CCB93CCCD53};QMenu_MenuItem;Set Curve Knot Multiplicity;{75757D69-CFA0-45FC-AE7F-C34E49576692};Command;InspectOp;{6BCADE59-5FB4-11D2-8D78-00A0C982A75A}:{FBA1A325-C517-5A85-F82C-523A44B36DF9};QMenu_MenuItem;Remove Knot;{5F63AA21-D583-42DE-960B-BB7220E5A0E0}" language="Python" name="Edit NURBS Curve Knot" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Insert Curve Knot;{50830560-31B5-11D0-82E7-00A0243E268D}:{E0A2FA73-6831-47AF-A7E0-428E416F041B}" language="Python" name="Edit NURBS Curve IsoPoint" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Subcurve Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{CB8498F3-CA7B-403B-9C97-BB79D465C2DE}" language="Python" name="Edit NURBS Curve Subcurve" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Light Selector (+Ctrl to inspect)" type="QMenu_Menu">#The following code adds a menu item per light in the scene to the bottom of the menu 
# which selects the respective light (or inspects it when ctrl key is pressed at the same time)

def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the mneu after subsequent calls
	Lights = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;light&quot;, &quot;&quot;, True)
	for oLight in Lights:
		oLightItem = Application.CreateQMenu(&quot;MenuItem&quot;)
		oLightItem.name = oLight.FullName
		
		Code = ('def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):\n')
		Code += &quot;\tbCtrlDown = (Application.GetKeyboardState()[1]) == 2\n&quot;
		Code += &quot;\tbAutoInspect = Application.GetValue('preferences.Interaction.autoinspect')\n&quot;
		Code += &quot;\tif bAutoInspect and bCtrlDown or bAutoInspect==False and bCtrlDown==False: Application.InspectObj(\&quot;&quot; + oLight.FullName  + &quot;\&quot;);\n&quot;
		Code += (&quot;\telse: Application.SelectObj('&quot; + oLight.FullName + &quot;','','');&quot;)
		oLightItem.code = Code
		self.appendTempMenuItem (oLightItem)</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Top View;{E5A8E0FC-A6BD-4790-8D4A-9A6007447C4B};QMenu_MenuItem;Right View;{2CF87012-0BBC-4283-90AA-6F9BFD22F8EA};QMenu_MenuItem;Front View;{90356345-2F37-4528-9A38-6782A391682D};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_MenuItem;Bottom View;{202311B9-CFAC-4D76-9577-E551262AB7C3};QMenu_MenuItem;LeftView;{843610BD-6BF3-483E-8318-D52E5AE79F6B};QMenu_MenuItem;Back View;{BB4BCAFE-E7B3-4571-AD65-798AFD0C098A};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_MenuItem;User View;{DF055235-F0DD-4B74-9EAD-5356BDD4B5B2};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_Menu;Look Through Camera;{DADC1B82-5D15-413C-A8BE-A52C1AB95EFD};QMenu_Menu;Look Through Spotlight;{9935310B-94DC-4957-A040-5EECBCA18CEF}" language="Python" name="Set View to..." type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="" language="Python" name="Edit Shading Nodes" type="QMenu_Menu">def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	oLO = Application.Desktop.ActiveLayout;
	i = 0
	Application.LogMessage(oLO.Views(i).Name)
	Application.LogMessage(oLO.Views(i).GetAttributeValue(&quot;selection&quot;));
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;+100%;{58C6086E-CCFE-46B0-8E40-B367C62EC119};QMenu_MenuItem;+50%;{53BB5A75-A389-406E-9B81-12A5099C2305};QMenu_MenuItem;+10%;{9ACC13FE-6EFB-4593-B148-B5BF19C19B63};QMenu_MenuItem;add 1;{93B22F09-D534-47F5-AC43-37605DC0F1F0}" language="Python" name="Property Editing - Add Value" type="QMenu_Menu">def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;subtract 1;{2BC3C879-A435-4D22-BF32-8CD9BBDD1A89};QMenu_MenuItem;-10%;{6FEC85BA-05E1-421D-A8FF-88B7253C6E52};QMenu_MenuItem;-50%;{EAC42987-B550-4888-8C60-F10B35252CBA}" language="Python" name="Property Editing - Subtract Value" type="QMenu_Menu">def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;10;{162D729E-C5C7-4357-96DD-0ECD9C81BF49};QMenu_MenuItem;5;{2F20F6EF-46CB-481F-B265-AA7ACC5200B4};QMenu_MenuItem;1;{3DB5B60B-2621-4CC6-888F-2B92157276EF};QMenu_MenuItem;0,5;{ECFA7FF7-76F2-4EA8-B248-34158E26D4AA};QMenu_MenuItem;0,1;{921C93C5-5FE3-4A80-92A1-A555B324F26A};QMenu_MenuItem;0;{B57828D5-6C63-4A14-9252-B8EE46D4386F};QMenu_MenuItem;-1;{4D9B5385-932F-4FEA-9F92-F48CF0F7547C};QMenu_MenuItem;None;{25924234-375A-4824-AE1F-E5C9275087AA}" language="Python" name="Property Editing - Set Value" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Camera Selector (+Ctrl to inspect)" type="QMenu_Menu">#The following code adds a menu item per existing camera to the bottom of the menu 
# which selects the respective camera (or inspects it when ctrl key is pressed at the same time)

def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;camera&quot;, &quot;&quot;, True)

	for oCam in Cams:
		oCamItem = Application.CreateQMenu(&quot;MenuItem&quot;)
		oCamItem.name = oCam.FullName
		
		Code = ('def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):\n')
		Code += ('\tApplication.SelectObj(&quot;'+ oCam.FullName + '&quot;, &quot;&quot;, &quot;&quot;)\n')
		Code += ('\tbCtrlDown = (Application.GetKeyboardState()[1]) == 2\n')
		Code += ('\tbAutoInspect = Application.GetValue(\&quot;preferences.Interaction.autoinspect\&quot;)\n')
		Code += ('\tif bAutoInspect and bCtrlDown or bAutoInspect==False and bCtrlDown==False: Application.InspectObj(\&quot;' + oCam.FullName + '.Camera\&quot;,)')
		oCamItem.code = Code
		self.appendTempMenuItem (oCamItem)</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_Menu;Light Selector (+Ctrl to inspect);{C3CFEEA9-38D3-4E86-9EBE-38EAB22FD881};QMenu_Menu;Camera Selector (+Ctrl to inspect);{E8D0F779-D943-4BB5-B686-EFB6345E9581}" language="Python" name="Shading Properties" type="QMenu_Menu">def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Orbit Around Selection - Components only;{2D819B5E-F4CB-4043-BF3E-2A117EDDC0F1};QMenu_MenuItem;Orbit Around Selection;{F51AAB7C-6C27-4267-A6DF-BBA74C9801AE};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_MenuItem;Inspect Camera Options;{46E5ADC6-BA83-410B-93BB-7B075DCEFD66}" language="Python" name="Preferences - Tools - Camera" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Merge Clusters with same Material;{029E340A-A330-4878-AF05-03CC7E141DD6};Command;Create Texture Subprojection;{50830560-31B5-11D0-82E7-00A0243E268D}:{479C4EF9-509D-4F8B-99BC-42A06F13D56F};Command;Create PlanarXY Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A2-0B13-11D4-B4AE-00AA0068D2C0};Command;Create PlanarXZ Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A4-0B13-11D4-B4AE-00AA0068D2C0};Command;Create PlanarYZ Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A3-0B13-11D4-B4AE-00AA0068D2C0}" language="Python" name="Create Texture Projection" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Look Through Spotlight" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!

	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;Light&quot;, &quot;&quot;, True)
	
	for oCam in Cams:
		if Application.GetValue(oCam.FullName + &quot;.light.Type&quot;) == 2:
			print (oCam.FullName + &quot; is a spotlight&quot;)
			oCamItem = Application.CreateQMenu(&quot;MenuItem&quot;)
			oCamItem.name = oCam.FullName

			Code = ('def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):\n\toVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )\n')
			Code+= ('\toView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)\n')
			Code += ('\toVM.SetAttributeValue(&quot;activecamera:&quot; + oView + &quot;\&quot;,&quot;' + oCam.FullName + '&quot;)\n')

			oCamItem.code = Code
			self.appendTempMenuItem (oCamItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Look Through Camera" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!

	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;Camera&quot;, &quot;&quot;, True)

	for oCam in Cams:
		oCamItem = Application.CreateQMenu(&quot;MenuItem&quot;)
		oCamItem.name = oCam.FullName

		Code = ('def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):\n\toVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )\n')
		Code+= ('\toView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)\n')
		Code += ('\toVM.SetAttributeValue(&quot;activecamera:&quot; + oView + &quot;\&quot;,&quot;' + oCam.FullName + '&quot;)\n')

		oCamItem.code = Code
		self.appendTempMenuItem (oCamItem)</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Raycast Select in Shaded Mode;{AA6AD8F9-5371-49FD-BA14-BA65BA0E905C};QMenu_MenuItem;Raycast Select - Include Backfacing Polygons;{F4DBEC5F-3667-4DBE-9824-09C43C463787};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_MenuItem;Inspect Selection Options;{E6A7E5E2-EF77-4C9B-A307-BD2D9605C2DB}" language="Python" name="Preferences - Tools - Polygon" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Extrude duplicated Polygons;{5DCFB75B-A71C-4FBA-9D97-4A6F1603CC25};QMenuSeparator;NewSeparator;{6F4DF6F9-BB94-4A6E-9022-10C7DA401E54};QMenu_MenuItem;Inspect Duplicate Options;{7591EB61-7EEB-496E-B8C6-AA619CBB92B8}" language="Python" name="Preferences - Commands - Duplicate Options" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Create Blend Curve;{93136210-5E73-4115-B034-30E36154FB9E}" language="Python" name="Edit NURBS Curves (multiple)" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Log Messages;{2C64BFED-137A-4E12-B6D0-81CDBD98EF54};QMenu_MenuItem;Log Verbose Messages;{FAA92A3C-1E70-4079-924A-7CA4FDCC5812};QMenu_MenuItem;Log Messages Real-Time;{5DB213B4-45EA-4F67-BF56-E35CA411CB44};QMenu_MenuItem;Show Hyperlinks;{5D96E331-5218-4472-BD17-01027655A2AA}" language="Python" name="Preferences - Scripting" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu></QMenu_Menus><QMenu_MenuSets><QMenu_MenuSet AContexts="NURBS_Curve (multiple);NURBS_Curve (or components);Polymesh (multiple);Polymesh (or components);Default" AMenus="Edit NURBS Curves (multiple);Edit NURBS Curve (general);Edit Polymeshes (multiple);Edit Polymesh (general);None" BContexts="Default" BMenus="None" CContexts="Default" CMenus="None" DContexts="NURBS_Curve (single);NURBS_Curve_Subcurve;NURBS_Curve_IsoPoint;NURBS_Curve_Knot;NURBS_Curve_Point;Polymesh (single);Polymesh_Polygons;Polymesh_Edges;Polymesh_Points;Default" DMenus="None;Edit NURBS Curve Subcurve;Edit NURBS Curve IsoPoint;Edit NURBS Curve Knot;None;Edit Polymesh;Edit Polymesh Polygons;Edit Polymesh Edges;Edit Polymesh Points;None" name="Modeling" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="Edit UVs" BContexts="Default" BMenus="None" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="UV Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="Edit Shading Nodes" BContexts="Default" BMenus="None" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Shader Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Polymesh (or components);Default" AMenus="Create Texture Projection;None" BContexts="Default" BMenus="Shading Properties" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Lighting and shading" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="Property Editing - Set Value" BContexts="Default" BMenus="Property Editing - Add Value" CContexts="Default" CMenus="Property Editing - Subtract Value" DContexts="Default" DMenus="None" name="Property Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="None" BContexts="Default" BMenus="Display Modes" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Views" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="None" BContexts="Default" BMenus="Preferences - Scripting" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Scripting" type="QMenu_MenuSet"/></QMenu_MenuSets><QMenu_MenuDisplayContexts><QMenu_MenuDisplayContext language="Python" name="Polymesh (or components)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		Type = Types[0]
		if Type == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
			return True
		if ((Type == &quot;edgeSubComponent&quot;) or (Type == &quot;pntSubComponent&quot;) or (Type == &quot;polySubComponent&quot;)):
			if ComponentParentTypes[0] == &quot;polymsh&quot;:  #Is the parent of the selected component(s) a polymesh?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Default" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #Don't rename this function
	return True</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Points" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if (Types[0] == &quot;pntSubComponent&quot;):
			if ComponentParentTypes[0] == &quot;polymsh&quot;: #Is the parent of the selected component(s) a polymesh?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Edges" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames):  #This function must not be renamed!
	if (len(selection) &gt; 0):  #Is something selected?
		#Is the first selected object an edge of on a Polymesh?
		if Types[0] == &quot;edgeSubComponent&quot;: 
			if ComponentParentTypes[0] == &quot;polymsh&quot;: 	
				return True	#This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Polygons" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		#Is the first selected object a polygont on a Polymesh?
		if Types[0] == &quot;polySubComponent&quot;:
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Subcurve" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames ): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		#Is the first selected object a subcurve of a NURBS curve list?
			if Types[0] == &quot;subcrvSubComponent&quot;: 	
				return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh (multiple)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents ,ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 1): #Is something selected?
		if Types[0] == &quot;polymsh&quot; and Types[1] == &quot;polymsh&quot;: #Are the first two selected objects polymeshes?
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh (single)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): 	#Is something selected?
		if Types[0] == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
			return True
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve (single)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute (selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0):  #Is something selected?
		#Is the first selected object a NURBS curvelist?
		if Types[0] == &quot;crvlist&quot;: 
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve (or components)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if Types[0] == &quot;crvlist&quot;:  #Is the first selected object a curve list?
			return True
		if ((Types[0] == &quot;knotSubComponent&quot;) or (Types[0] == &quot;isopntSubComponent&quot;) or (Types[0] == &quot;pntSubComponent&quot;) or (Types[0] ==&quot;subcrvSubComponent&quot;)):
			if ComponentParentTypes[0] == &quot;crvlist&quot;:  #Is the parent of the selected component(s) a polymesh?
				return True								
	return False  #This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Point" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if Types[0] == &quot;pntSubComponent&quot;:
			if ComponentParentTypes[0] == &quot;crvlist&quot;: 		#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_IsoPoint" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): 	#This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if Types[0] == &quot;isopntSubComponent&quot;:
			if ComponentParentTypes[0] == &quot;crvlist&quot;:	#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Knot" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if Types[0] == &quot;knotSubComponent&quot;:
			if ComponentParentTypes[0] == &quot;crvlist&quot;: 		#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve (multiple)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 1): #Is more than one obj selected?
		if Types[0] == &quot;crvlist&quot; and Types[0] == &quot;crvlist&quot;: #Are the first two selected objects curves?
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="JScript" name="Jscript_Test_DisplayContext" type="QMenu_MenuDisplayContext">function QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents, ComponentParentTypes, ComponentParentClassNames) //This function must not be renamed!
{
	Application.LogMessage(&quot;Executing Jscript_Test_DisplayContext&quot;)
	Application.LogMessage(selection)
	Application.LogMessage(ClassNames)
	Application.LogMessage(ComponentClassNames)
	Application.LogMessage(ComponentParents)
	Application.LogMessage(ComponentParentTypes)
	Application.LogMessage(ComponentParentClassNames)
	return true	//This function must return a boolean
}</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="VBScript" name="VBScript_Test_DisplayContext" type="QMenu_MenuDisplayContext">Function QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents, ComponentParentTypes, ComponentParentClassNames) 'This function must not be renamed!
	LogMessage(&quot;Executing VBScript_Test_DisplayContext&quot;)
	Application.LogMessage(selection)
	Application.LogMessage(ClassNames)
	Application.LogMessage(ComponentClassNames)
	Application.LogMessage(ComponentParents)
	Application.LogMessage(ComponentParentTypes)
	Application.LogMessage(ComponentParentClassNames)
	QMenuContext_Execute =  True	'This function must return a boolean
 end Function</QMenu_MenuDisplayContext></QMenu_MenuDisplayContexts><QMenuViewSignatures><QMenuViewSignature menuSets="Modeling;Lighting and shading;Views" name="3D Views" signature="Viewer;DS_ChildViewManager;DS_ChildRelationalView;TrayClientWindow;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="UV Editing" name="Texture Editor" signature="" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Shader Editing" name="Render Tree" signature="" type="QMenuViewSignature"/><QMenuViewSignature menuSets="" name="Animation Editor  - FCurve Editor" signature="FcurveViewer;DS_ChildAnimationEditor;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="" name="Animation Mixer" signature="DS_ChildAnimationMixer;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="" name="Animation Editor - DopeSheet" signature="DopesheetView;DS_ChildDopeSheet;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="" name="Shape Manager" signature="Viewer;DS_ChildViewManager;DS_ChildRelationalView;TrayClientWindow;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Property Editing" name="Property Editor" signature="DSPropertyInspectorPagesArea;Tab;DS_ChildPropertyEditor;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Scripting" name="Script History" signature="ScintillaTabControl;DS_ChildScriptEditor;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/></QMenuViewSignatures><QMenuDisplayEvents><QMenuDisplayEvent key="49" keyMask="0" number="0" type="QMenuDisplayEvent"/><QMenuDisplayEvent key="50" keyMask="0" number="0" type="QMenuDisplayEvent"/><QMenuDisplayEvent key="220" keyMask="0" number="0" type="QMenuDisplayEvent"/></QMenuDisplayEvents></QMenuComponents>