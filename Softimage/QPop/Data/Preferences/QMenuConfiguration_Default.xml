<?xml version="1.0" ?><QMenuComponents><QMenu_MenuItems><QMenu_MenuItem UID="{58868357-22DD-4B74-9AF1-C9BA0099313F}" category="Preferences" language="Python" name="Extrude duplicated Polygons" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	if Application.Preferences.GetPreferenceValue(&quot;duplicate.polygons&quot;) == 1:
		return True
	return False

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	Application.SetValue(&quot;Preferences.duplicate.polygons&quot;, not Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets))
</QMenu_MenuItem><QMenu_MenuItem UID="{C7A5338D-A2BF-4FC5-8B54-29BB78FF7641}" category="Property Editing" language="Python" name="+10%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *1.1),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{CA176E49-01CB-4AF2-BA82-3F8D2AD1D58E}" category="Property Editing" language="Python" name="+50%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *1.5),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{6D522E7C-CA61-4F60-B420-8DD5F940B78C}" category="Property Editing" language="Python" name="+100%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.LogMessage
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *2),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{2DADE0FB-0429-4527-9CCD-94B85827BC83}" category="Property Editing" language="Python" name="-10%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *0.9),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{DAA60FE9-D771-45F8-8FE3-F05CE3FB386F}" category="Property Editing" language="Python" name="-50%" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,(CurrentVal *0.5),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{E7ABE33A-A23C-4C7D-8999-778EA98EBB36}" category="Property Editing" language="Python" name="0,1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.1,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{AD7B41B6-E2EC-4B63-A263-EF5306213840}" category="Property Editing" language="Python" name="0,5" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0.5,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{F0973AE1-4AF6-48E4-B9B7-164256C76C1C}" category="Property Editing" language="Python" name="1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,1,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{D95BDADF-7E77-4F5A-9C07-6A74DB8A09C8}" category="Property Editing" language="Python" name="5" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,5,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{95D2C302-64A6-4B78-9932-DF9495540B5A}" category="Property Editing" language="Python" name="10" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,10,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{55DDFD5F-FA4E-4BB3-91FA-3558E6CDBC1C}" category="Property Editing" language="Python" name="0" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,0,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{7F42F6EC-1F9D-4C4D-B1C9-072F04836199}" category="Polygon Modeling" language="Python" name="Weld Points to COG" switch="False" type="QMenu_MenuItem">def Script_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	print (self.name)
	Application.ApplyTopoOp(&quot;WeldPoints&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{E7863409-9CDE-43A1-9BD7-A12DDA12D9B1}" category="Preferences" language="Python" name="Raycast Select in Shaded Mode" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	if Application.Preferences.GetPreferenceValue(&quot;Select.rectraycast&quot;) == 1:
		return True
	return False


def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	Application.SetValue(&quot;preferences.Select.rectraycast&quot;, not Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets))
</QMenu_MenuItem><QMenu_MenuItem UID="{96ECAD40-82CF-4CDA-8F75-F1B594195A5B}" category="Views" language="Python" name="Top View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Top\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{B929695F-8422-4D5F-83E9-C139BCCEEB62}" category="Preferences" language="Python" name="Raycast Select - Include Backfacing Polygons" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	if Application.Preferences.GetPreferenceValue(&quot;Select.raycastbackfacing&quot;) == 1:
		return True
	return False

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	Application.SetValue(&quot;preferences.Select.raycastbackfacing&quot;, not Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets))
</QMenu_MenuItem><QMenu_MenuItem UID="{C1B16CE5-1FEE-45FC-92E7-0540234561C0}" category="Preferences" language="Python" name="Orbit Around Selection" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) == 2
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function

	if Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) != 2:
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 2, &quot;&quot;)
	else: 
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 0, &quot;&quot;)


</QMenu_MenuItem><QMenu_MenuItem UID="{DD6FE42B-4FBE-491F-A4EF-B7A090876221}" category="Preferences" language="Python" name="Orbit Around Selection - Components only" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) == 1
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	if Application.Preferences.GetPreferenceValue(&quot;Camera.orbitselected&quot;) != 1:
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 1, &quot;&quot;)
	else: 
		Application.SetValue(&quot;preferences.Camera.orbitselected&quot;, 0, &quot;&quot;)




</QMenu_MenuItem><QMenu_MenuItem UID="{41572F78-6FDE-40C5-96D4-C7A1A6AD93A2}" category="Polygon Modeling" language="Python" name="Cap" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	Application.LogMessage(&quot;Sorry, the Cap script item is WIP and not yet functional&quot;)
	#Weld selected points towards their common center
	#Application.ApplyTopoOp(&quot;WeldPoints&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{D6420552-8848-4120-B8E5-A2A7E0AF6BBB}" category="Clusters Editing" language="Python" name="Merge Clusters with same Material" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	Sel = Application.Selection
	oSel = list()
	for Obj in Sel:
		oSel.append(Obj)
	 
	 
	for oObj in oSel:
		delClusters = list()
		Clusters = oObj.ActivePrimitive.Geometry.Clusters
		polyClusters = list()
		for oCluster in Clusters:
			if oCluster.Type == &quot;poly&quot; and len(oCluster.Elements) != 0:
				polyClusters.append (oCluster)
	 
		
		for polyCluster in polyClusters:
			currentmat = polyCluster.Material
			#pplication.LogMessage(currentmat)

			for oCheckCluster in polyClusters:
				if oCheckCluster != polyCluster and len(oCheckCluster.Elements) != 0:
					if oCheckCluster.Material.IsEqualTo(polyCluster.Material):
						#Application.LogMessage(&quot;Processing cluster: &quot; + oCheckCluster.name)
						clusterElements = oCheckCluster.Elements
						Application.DeselectAll()
						Application.SelectMembers(oCheckCluster.FullName,True,False)
						Application.AddToSelection(polyCluster.FullName,&quot;ASITIS&quot;,False)
						Application.AddToCluster(&quot;&quot;, &quot;siRemoveFromExistingClusters&quot;)
		
		
		for Cluster in oObj.ActivePrimitive.Geometry.Clusters:
			if len(Cluster.Elements) == 0:
				Application.DeleteObj(Cluster.FullName)

	Application.Application.DeselectAll()
	Application.SelectObj(oSel)
</QMenu_MenuItem><QMenu_MenuItem UID="{6C2B1B1D-6D65-459F-9C66-601CEA4280B4}" category="Views" language="Python" name="User View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;User\&quot;)&quot;)
	eval(stri)</QMenu_MenuItem><QMenu_MenuItem UID="{B66172AF-42FB-41C7-B6AA-3E650991BB79}" category="Views" language="Python" name="Right View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Right\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{BA4D9B67-98B3-4F74-9A73-0EB675DEA38F}" category="Views" language="Python" name="Back View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Front\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (3,True,&quot;&quot;, viewIndices[oView])

</QMenu_MenuItem><QMenu_MenuItem UID="{93D3E0C8-95A3-433C-837D-005F824AC84C}" category="Views" language="Python" name="Front View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Front\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (&quot;&quot;,&quot;&quot;,&quot;&quot;, viewIndices[oView])
</QMenu_MenuItem><QMenu_MenuItem UID="{FDCDA054-8BD6-419B-B2A7-9CFD2A1E39CE}" category="Property Editing" language="Python" name="None" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,&quot;&quot;,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{49151B9F-BAE3-4A82-AF18-150CB1EA9E03}" category="Property Editing" language="Python" name="-1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam,-1,&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{C9FA871E-5499-4C3C-B0A4-29999F6CE365}" category="Views" language="Python" name="Bottom View" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	stri = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Top\&quot;)&quot;)
	eval(stri)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (2,True,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{50A3C0DD-5117-485D-AF9F-316CDE5D4485}" category="Views" language="Python" name="LeftView" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	cmd = (&quot;oVM.SetAttributeValue(&quot; + &quot;\&quot;activecamera:&quot; + oView + &quot;\&quot;,\&quot;Right\&quot;)&quot;)
	eval(cmd)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	Application.AlignViewCamera (1,True,&quot;&quot;, viewIndices[oView])</QMenu_MenuItem><QMenu_MenuItem UID="{29F1DE73-11BC-4401-A9EA-7A7940617325}" category="Property Editing" language="Python" name="add 1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam, (CurrentVal + 1),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{52864918-60DE-469F-AAF2-FAFEB6AA9F62}" category="Property Editing" language="Python" name="subtract 1" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	MarkedParams = Application.GetMarking()
	if MarkedParams != None:
		if len(MarkedParams) &gt; 0:
			for oObj in Application.Selection:
				for oParam in MarkedParams:
					try:
						FullParamName = (oObj.FullName + &quot;.&quot; +  oParam)
						#Application.LogMessage(FullParamName)
						CurrentVal = Application.GetValue(FullParamName)
						Application.SetValue (oObj.FullName + &quot;.&quot; + oParam, (CurrentVal - 1),&quot;&quot;)
					except:
						pass</QMenu_MenuItem><QMenu_MenuItem UID="{A835159D-6F9D-4E75-A6DD-B900BC958FDD}" category="Views" language="Python" name="Set Wireframe Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;wireframe&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{402CBA40-7D13-4E3A-9D2A-E43EAA0F75C2}" category="Views" language="Python" name="Set Bounding Box Display mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;bbox&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{4610640B-DDE2-473B-848A-CEE2594E8A75}" category="Views" language="Python" name="Set Depth Cue Dispay Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;depthcue&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{6F1012AF-B22A-4CE8-81C0-3EDC77AFD522}" category="Views" language="Python" name="Set Hidden Line Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;hiddenline&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{69324C20-A430-4850-8A6D-329CB148C291}" category="Views" language="Python" name="Set Constant Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;constant&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{CFAD3374-3370-4CC6-9239-556275EAF213}" category="Views" language="Python" name="Set Shaded Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;shaded&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{28A00EC9-8480-47D1-8FCE-8345BC857367}" category="Views" language="Python" name="Set Textured Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;textured&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{E7DA283B-880A-4389-BCBD-354C15602B56}" category="Views" language="Python" name="Set Textured Decal Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;texturedecal&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{039BD078-BC28-4633-920E-F2A0505E19C6}" category="Views" language="Python" name="Set Realtime Display Mode" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):
	oVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )
	oView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)
	viewIndices = dict (A = 0, B = 1, C = 2, D = 3)
	oCam = Application.GetViewCamera(viewIndices[oView])
	Application.SetDisplayMode(oCam.FullName,&quot;realtimeshaders&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{FCD67409-14AA-4542-833E-395BBAE3BBA7}" category="Curve Modeling" language="Python" name="Align Bezier Handles" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,2)
</QMenu_MenuItem><QMenu_MenuItem UID="{6B7D7CED-9032-4A18-A33C-400851FCD53D}" category="Curve Modeling" language="Python" name="Align Bezier Handles Forward to Back" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,0)
</QMenu_MenuItem><QMenu_MenuItem UID="{BB2E37F7-BA7C-4137-A505-5B86DC5B362F}" category="Curve Modeling" language="Python" name="Align Bezier Handles Back to Forward" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,1)
</QMenu_MenuItem><QMenu_MenuItem UID="{E1201585-F329-478B-9038-481E7CF184A1}" category="Curve Modeling" language="Python" name="Make Bezier-Knots Corners" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,7)
</QMenu_MenuItem><QMenu_MenuItem UID="{C5D704EE-7DE1-4AC6-B04F-B0AA3C57ADF5}" category="Curve Modeling" language="Python" name="Make Knot Segments Linear" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.AlignBezierKnotsTangents(Application.Selection,&quot;&quot;,5)
</QMenu_MenuItem><QMenu_MenuItem UID="{795FF5FF-BABF-4767-99D9-D1B6BA116352}" category="Preferences" language="Python" name="Inspect Duplicate Preferences" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InspectObj(&quot;preferences.duplicate&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{494235CC-D1C5-4459-B924-3B665A5EBC27}" category="Preferences" language="Python" name="Inspect Selection Preferences" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InspectObj(&quot;preferences.select&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{78666F91-C71F-4A07-A742-095E40CDBF79}" category="Preferences" language="Python" name="Inspect Camera Preferences" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InspectObj(&quot;preferences.Camera&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{6BD0DAB3-8BC7-48B5-869F-D770A5FB80D8}" category="Curve Modeling" language="Python" name="Extract Edges as Curve" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	sel = Application.Selection(0)
	ImmedMode = 0
	if Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) == True:
		ImmedMode = 1
	result= Application.ApplyGenOp(&quot;ExtractEdgeLoopOp&quot;, &quot;&quot;, sel, &quot;&quot;, ImmedMode, &quot;&quot;, &quot;&quot;)
	Application.InspectObj(result)
	
	</QMenu_MenuItem><QMenu_MenuItem UID="{25B934BE-97D3-4B2A-BB1A-900B9A5100E2}" category="Curve Modeling" language="Python" name="Remove Knot" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	ImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	curveList = list()
	for knot in Application.Selection:
		if knot.Type == &quot;knotSubComponent&quot;:
			curveList.append(knot.SubComponent.Parent3DObject) #Add curve to list of curves
			Application.SetCurveKnotMultiplicity(knot, 0, ImmedMode)
				
</QMenu_MenuItem><QMenu_MenuItem UID="{BDFC1350-47B6-4228-A2F0-2DA68CE769F9}" category="Curve Modeling" language="Python" name="Create Blend Curve" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	if len(Application.Selection) &gt;0 :
		if (Application.Selection(0).Type == &quot;crvbndrySubComponent&quot;):
			FirstBoundary = Application.Selection(0)
		else:
			FirstResult = Application.PickElement( &quot;CurveBoundary&quot; , &quot;Select first Boundary&quot;, &quot;Select first Boundary&quot;, &quot;&quot;, &quot;&quot;, 0, &quot;&quot; )
			Application.LogMessage(&quot;Past first pick session A&quot;)
			FirstBoundary = FirstResult.Value(&quot;PickedElement&quot;)
	else:
		FirstResult = Application.PickElement( &quot;CurveBoundary&quot; , &quot;Select first Boundary&quot;, &quot;Select first Boundary&quot;, &quot;&quot;, &quot;&quot;, 0, &quot;&quot; )
		Application.LogMessage(&quot;Past first pick session B&quot;)
		FirstBoundary = FirstResult.Value(&quot;PickedElement&quot;)
	
	if len(Application.Selection) &gt;1:
		if (Application.Selection(1).Type == &quot;crvbndrySubComponent&quot;):
			SecondBoundary = Application.Selection(1)
		else:
			SecondResult = Application.PickElement( &quot;CurveBoundary&quot; , &quot;Select second Boundary&quot;, &quot;Select second Boundary&quot;, &quot;&quot;, &quot;&quot;, 0, &quot;&quot; )
			Application.LogMessage(&quot;Past second pick session A.&quot;)
			SecondBoundary = SecondResult.Value(&quot;PickedElement&quot;)
	else:
		SecondResult = Application.PickElement( &quot;CurveBoundary&quot; , &quot;Select second Boundary&quot;, &quot;Select second Boundary&quot;, &quot;&quot;, &quot;&quot;, 0, &quot;&quot; )
		Application.LogMessage(&quot;Past second pick session B&quot;)
		SecondBoundary = SecondResult.Value(&quot;PickedElement&quot;)
	
	if FirstBoundary.Type == &quot;crvbndrySubComponent&quot; and SecondBoundary.Type == &quot;crvbndrySubComponent&quot;:
		Result = Application.ApplyGenOp(&quot;BlendCrv&quot;, &quot;&quot;, [FirstBoundary,SecondBoundary], 3, &quot;siPersistentOperation&quot;, &quot;siKeepGenOpInputs&quot;, &quot;&quot;)
		
	if Result != None:
		if Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) == True: #Is ImmediateMode enabled?
			ReturnVal = Application.InspectObj(Result,&quot;&quot;,&quot;&quot;,4,False)
			if ReturnVal == True: #User has canceled?
				Application.DeleteObj()
			else:
				Application.FreezeModeling(Result)
		else: #We are not in ImmediateMode, this is simpler...
			keyState = Application.GetKeyboardState() #Get currently pressed modifier keys (if any)
			bCtrlDown = keyState[1] == 2 #Is Ctrl pressed?
			bAutoInspect = Application.GetUserPref( &quot;AutoInspectEnabled&quot; )
			if bAutoInspect and bCtrlDown==False or bAutoInspect==False and bCtrlDown:
				Application.InspectObj(Result,&quot;&quot;,&quot;&quot;,1,False)
	
</QMenu_MenuItem><QMenu_MenuItem UID="{A2D37112-A40B-4351-A0E8-476D5DA4F49E}" category="Curve Modeling" language="Python" name="Set Curve Knot Multiplicity" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	#ImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	#Application.LogMessage(&quot;ImmedMode at start is: &quot; + str(ImmedMode))
	knots = list()
	Sel = Application.Selection
	for obj in Sel:
		if obj.Type == &quot;knotSubComponent&quot;:
			knots.append(obj)
	
	#Application.Preferences.SetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot;, False )
	#NewImmedMode = Application.Preferences.GetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot; ) #Is ImmediateMode enabled?
	#Application.LogMessage (&quot;ImmedMode before applying Op is: &quot; + str(NewImmedMode))
	
	Op = Application.ApplyTopoOp(&quot;SetNurbsCrvKnotMultiplicity&quot;, knots, 3, &quot;siImmediatetOperation&quot;, &quot;&quot;)
	#Result = Application.SetCurveKnotMultiplicity(knots,3,&quot;siPersistentOperation&quot;)
	Application.LogMessage(&quot;Created operator: &quot; + str(Op))

	Application.InspectObj(Op,&quot;&quot;,&quot;&quot;,4,False)

	#Application.AutoInspect(Op)
	


	&quot;&quot;&quot;
	if Result != None:
		
		if ImmedMode == True: #Was the ImmediateMode enabled when operation was started?
			ReturnVal = Application.InspectObj(Result[0],&quot;&quot;,&quot;&quot;,4,True)
			if ReturnVal == True: #User has canceled?
				Application.DeleteObj(Result)
			else:
				Application.FreezeModeling(Result)
		else: #We are not in ImmediateMode, this is simpler...
			keyState = Application.GetKeyboardState() #Get currently pressed modifier keys (if any)
			bCtrlDown = keyState[1] == 2 #Is Ctrl pressed?
			bAutoInspect = Application.GetUserPref( &quot;AutoInspectEnabled&quot; )
			if bAutoInspect and bCtrlDown==False or bAutoInspect==False and bCtrlDown:
				Application.InspectObj(Result,&quot;&quot;,&quot;&quot;,1,False)
		
	#except:
		#pass
	
	#Application.Preferences.SetPreferenceValue( &quot;xsiprivate_unclassified.OperationMode&quot;,ImmedMode )
	&quot;&quot;&quot;</QMenu_MenuItem><QMenu_MenuItem UID="{C9D52C07-3DBE-49BE-B096-2B7CC581E162}" category="Curve Modeling" language="Python" name="Tweak Curve" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.Commands( &quot;Direct Manip Tool&quot;  ).Execute()</QMenu_MenuItem><QMenu_MenuItem UID="{4FB615EF-82AC-470F-9C81-93E694AE6947}" category="Preferences" language="Python" name="Log Verbose Messages" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.msglogverbose&quot;) == True
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	LogVerboseState = Application.Preferences.GetPreferenceValue(&quot;scripting.msglogverbose&quot;)
	Application.SetValue(&quot;preferences.scripting.msglogverbose&quot;, not LogVerboseState, &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{F6F17C6C-5B9A-4F74-837B-36A616741387}" category="Preferences" language="Python" name="Log Messages" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.msglog&quot;) == True
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	LogState = Application.Preferences.GetPreferenceValue(&quot;scripting.msglog&quot;)
	Application.SetValue(&quot;preferences.scripting.msglog&quot;, not LogState, &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{DA748CF1-0803-4472-A5EE-2F440EF1EEEB}" category="Preferences" language="Python" name="Show Hyperlinks" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.cmdlinks&quot;) == True
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.cmdlinks&quot;)
	Application.SetValue(&quot;preferences.scripting.cmdlinks&quot;, not State, &quot;&quot;)



</QMenu_MenuItem><QMenu_MenuItem UID="{0E8908EE-83A7-4CE2-ABE5-873DF69854CC}" category="Preferences" language="Python" name="Log Messages Real-Time" switch="True" type="QMenu_MenuItem">def Switch_Init(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	State = Application.Preferences.GetPreferenceValue(&quot;scripting.msglogrealtime&quot;) == True
	return State

def Switch_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	LogState = Application.Preferences.GetPreferenceValue(&quot;scripting.msglogrealtime&quot;)
	Application.SetValue(&quot;preferences.scripting.msglogrealtime&quot;, not LogState, &quot;&quot;)


</QMenu_MenuItem><QMenu_MenuItem UID="{FB165B1D-C669-48E1-8E78-6D9186FF21A3}" category="Preferences" language="Python" name="Edit QMenus" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	CustomParams = Application.FindObjects( &quot;&quot;, &quot;{76332571-D242-11d0-B69C-00AA003B3EA6}&quot; )
	for CP in CustomParams:
		if CP.Type == (&quot;QMenuConfigurator&quot;):
			Application.InspectObj (CP)
			return
			</QMenu_MenuItem><QMenu_MenuItem UID="{AE7C239A-9A1D-49FC-96C1-2A13AEFC829A}" category="Preferences" language="Python" name="QPop enabled" switch="True" type="QMenu_MenuItem">def Switch_Init (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	state = Application.GetValue(&quot;preferences.QMenu.QMenuEnabled&quot;)
	return state
	

def Switch_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Don't rename this function
	state = Application.GetValue(&quot;preferences.QMenu.QMenuEnabled&quot;)
	Application.SetValue(&quot;preferences.QMenu.QMenuEnabled&quot;, not state)

</QMenu_MenuItem><QMenu_MenuItem UID="{ED4BBEA0-1241-4CD3-8B8C-CD422DD853EF}" category="Curve Modeling" language="Python" name="Make Knots Bezier" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.SetCurveKnotMultiplicity(Application.Selection, 3, &quot;siPersistentOperation&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{D0C49EAA-0706-447D-AB81-0C20BCBDF3D5}" category="Curve Modeling" language="Python" name="Make Knots Non-Bezier" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.SetCurveKnotMultiplicity(Application.Selection, 1, &quot;siPersistentOperation&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{4E3BA4DB-D394-4D15-ADA1-E4AFFC080975}" category="Curve Modeling" language="Python" name="Insert Bezier Knot" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InsertCurveKnot(Application.Selection, 3, &quot;siPersistentOperation&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{2F872FDD-3C9D-4C0D-AA33-1EF5054DBA3B}" category="Curve Modeling" language="Python" name="Insert Knot" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InsertCurveKnot(&quot;arc.isopnt[(0,0.375)]&quot;, 3, &quot;siPersistentOperation&quot;)</QMenu_MenuItem><QMenu_MenuItem UID="{73EA2205-3B73-4756-AD8C-852F2D54F231}" category="Property Editing" language="Python" name="Rename" switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InspectObj(Application.Selection, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;)
</QMenu_MenuItem><QMenu_MenuItem UID="{A7B92769-39D0-4620-A222-1CDCB830DC14}" category="Selection" language="Python" name="Info Selection..." switch="False" type="QMenu_MenuItem">def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets): #Dont rename this function 
	Application.InfoSelection(Application.Selection.GetAsText())</QMenu_MenuItem><QMenu_MenuItem UID="{7E509929-C9EE-49EF-A9C5-BF8F9BDB9579}" category="Selection" language="JScript" name="Info Selection JS" switch="False" type="QMenu_MenuItem">function Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets) {
	Application.InfoSelection(Application.Selection.GetAsText())
}</QMenu_MenuItem></QMenu_MenuItems><QMenu_Menus><QMenu_Menu executeCode="False" items="Command;Mark Hard Edge Vertex;{50830560-31B5-11D0-82E7-00A0243E268D}:{71CFB7B5-2B33-11D4-B840-009027BC6587};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Weld Points to COG;{7F42F6EC-1F9D-4C4D-B1C9-072F04836199};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Weld Points to Target;{50830560-31B5-11D0-82E7-00A0243E268D}:{E5F394BB-72F7-49AC-B3A9-E1F7AE5E9D48};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Filter Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{AD25FA37-856E-4AA4-83F3-352713319986};Command;Paint Push Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0EB424E5-84F7-11D4-8094-00A0C9ED67BD};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B}" language="Python" name="Edit Polymesh Points" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Mark Hard Edge Vertex;{50830560-31B5-11D0-82E7-00A0243E268D}:{71CFB7B5-2B33-11D4-B840-009027BC6587};Command;Set Edge Crease Value;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E9FEE12-2D9E-11D4-B841-009027BC6587};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Select Edge Loop;{50830560-31B5-11D0-82E7-00A0243E268D}:{A6ED1DB7-45B1-11D6-80CD-00A0C9ED67BD};Command;Select Boundary Edge Loop;{50830560-31B5-11D0-82E7-00A0243E268D}:{5432F035-CC9F-44B1-BFF3-9F4609B35057};Command;Select Parallel Edge Loop;{50830560-31B5-11D0-82E7-00A0243E268D}:{7C6E8253-85C0-4020-989E-774D582FE9D8};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Subdivide Edge;{50830560-31B5-11D0-82E7-00A0243E268D}:{8F1FA2AF-3635-11D4-A8AF-00C04F8EDF15};Command;Split Edge;{50830560-31B5-11D0-82E7-00A0243E268D}:{904FB220-46B2-11D4-8C28-009027BC3A0E};Command;Dissolve &amp; Clean Adjacent Vertices;{50830560-31B5-11D0-82E7-00A0243E268D}:{1D09DE94-79BA-4ADD-8F8A-ED34588877AA};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Filter Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{053894C2-8E7C-4F76-B1BB-283C34E3C420};Command;Collapse;{50830560-31B5-11D0-82E7-00A0243E268D}:{7F392188-2520-11D4-97F2-0800360BFF02};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Cap;{41572F78-6FDE-40C5-96D4-C7A1A6AD93A2};Command;Weld Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{61467638-32CE-48C9-971C-904D60579F1A};QMenu_MenuItem;Extract Edges as Curve;{6BD0DAB3-8BC7-48B5-869F-D770A5FB80D8};Command;Bridge Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{3AEF5A2C-40E4-4B08-AE6D-ABBC7C199907}" language="Python" name="Edit Polymesh Edges" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Dissolve &amp; Clean Adjacent Vertices;{50830560-31B5-11D0-82E7-00A0243E268D}:{1D09DE94-79BA-4ADD-8F8A-ED34588877AA};Command;Dissolve Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{B39B38C0-90C4-11D4-A9E3-009027BC65D7};Command;Inset Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{61DB5CAA-03FB-497F-8AAC-A9BB5B6C72BE};Command;Offset Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{A3F7B88C-7B09-4B70-B55D-54B6D6D01BC5};Command;Local Subdivision;{50830560-31B5-11D0-82E7-00A0243E268D}:{F8842CA7-78FD-11D4-B851-009027BC6587};Command;Dice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{86B4DB7E-3569-4FD0-B8D3-05C11AA054D5};Command;Invert Selected Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{11BEB110-85B1-11D4-8C31-009027BC3A0E};Command;Dice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{86B4DB7E-3569-4FD0-B8D3-05C11AA054D5};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Disconnect Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{8582A7F9-EF44-4C3E-8C38-472BFD0C8414};Command;Polygon Detach;{50830560-31B5-11D0-82E7-00A0243E268D}:{4F25DC5B-7EE8-487C-B639-D1E7946A53FC};Command;Polygon Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{598E1068-B64F-47F4-8F08-99443D94B0B5};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Filter Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{1067D621-96FC-4DED-983F-E83C4D121372};Command;Polygon Reduction;{50830560-31B5-11D0-82E7-00A0243E268D}:{0488BE6A-6E7E-416B-9CAE-2A6A987BF75C};Command;Slice Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{3FCF7E6F-5E01-4932-9D1A-201A269255C5};Command;Split Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{52964382-BCB8-11D4-8C4B-009027BC3A0E};Command;Subdivide Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{BC8CCEEF-370F-11D4-A8B0-00C04F8EDF15};Command;Quadrangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E71C2255-9AAF-4FF4-ABAC-4A6855C97C78};Command;Triangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{FB5B671D-C1A0-4DB6-8FF9-950A5029C2CD};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Bridge Polygon;{50830560-31B5-11D0-82E7-00A0243E268D}:{95983629-72EA-11D4-A8C2-00C04F8EDF15};Command;Symmetrize Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{669FD6AA-D338-4311-9B7E-CB4A923311D1};Command;Duplicate Polygons Along Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{D1343A2C-97E5-4236-9F41-3DBD21CAD8CB}" language="Python" name="Edit Polymesh Polygons" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Gator;{50830560-31B5-11D0-82E7-00A0243E268D}:{7DC64A1A-9888-4616-971E-707A802DF006};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Mesh Merge;{50830560-31B5-11D0-82E7-00A0243E268D}:{AB9A5C20-5839-11D4-8C2A-009027BC3A0E};Command;Mesh Blend;{50830560-31B5-11D0-82E7-00A0243E268D}:{EB16D9E0-5CC1-11D4-8C2C-009027BC3A0E};Command;Boolean Union;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E8-8E7A-11D4-8094-00A0C9ED67BD};Command;Boolean Intersection;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E9-8E7A-11D4-8094-00A0C9ED67BD};Command;Boolean Difference;{50830560-31B5-11D0-82E7-00A0243E268D}:{BDF752E7-8E7A-11D4-8094-00A0C9ED67BD};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Unhide All Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{7BC3B51D-8FCA-4546-B99F-BDC4AE964409}" language="Python" name="Edit Polymeshes (multiple)" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Toggle Background Color;{50830560-31B5-11D0-82E7-00A0243E268D}:{D90C33E1-23CB-498A-9B2C-A4860E4E515C};Command;Isolate Selected;{50830560-31B5-11D0-82E7-00A0243E268D}:{153189E9-79CF-4333-89A2-35D123A8B003};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_Menu;Preferences - Tools - Camera;{F0E03E66-D205-4878-B31C-9540964C2845};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Set Realtime Display Mode;{039BD078-BC28-4633-920E-F2A0505E19C6};QMenu_MenuItem;Set Textured Decal Display Mode;{E7DA283B-880A-4389-BCBD-354C15602B56};QMenu_MenuItem;Set Textured Display Mode;{28A00EC9-8480-47D1-8FCE-8345BC857367};QMenu_MenuItem;Set Shaded Display Mode;{CFAD3374-3370-4CC6-9239-556275EAF213};QMenu_MenuItem;Set Constant Display Mode;{69324C20-A430-4850-8A6D-329CB148C291};QMenu_MenuItem;Set Hidden Line Display Mode;{6F1012AF-B22A-4CE8-81C0-3EDC77AFD522};QMenu_MenuItem;Set Depth Cue Dispay Mode;{4610640B-DDE2-473B-848A-CEE2594E8A75};QMenu_MenuItem;Set Wireframe Display Mode;{A835159D-6F9D-4E75-A6DD-B900BC958FDD};QMenu_MenuItem;Set Bounding Box Display mode;{402CBA40-7D13-4E3A-9D2A-E43EAA0F75C2};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Toggle Headlight Display Mode;{50830560-31B5-11D0-82E7-00A0243E268D}:{24D69496-C507-4447-AB77-AB60904B17DC};Command;Toggle Wire On Shaded Display;{50830560-31B5-11D0-82E7-00A0243E268D}:{2218CD14-9A9A-49CA-A33F-B61A4710BFE8};Command;Toggle Shaded Display Mode;{50830560-31B5-11D0-82E7-00A0243E268D}:{CEBDE6E3-7C57-4349-B4E9-83234DFB91D3};Command;Maximize/Restore Current Viewport;{50830560-31B5-11D0-82E7-00A0243E268D}:{2343C950-0D21-11D3-BFE5-00A0248F9397}" language="Python" name="Display Modes" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Duplicate Multiple Mesh Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{6F74FAC0-5E7A-11D4-8C2C-009027BC3A0E};Command;Duplicate Single Mesh Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{AF4EDB50-5E63-11D4-8C2C-009027BC3A0E};Command;Extrude Component Along Curve;{50830560-31B5-11D0-82E7-00A0243E268D}:{C8436D81-4851-11D4-B7F3-0008C7A011A6};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_Menu;Preferences - Commands - Duplicate Options;{4EB15BA9-89DD-47FD-AD7A-1D17155AAC3D};QMenu_Menu;Preferences - Tools - Polygon;{949D2883-5446-43BF-9C1E-9876447A365D};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Invert Selection Using Filter;{50830560-31B5-11D0-82E7-00A0243E268D}:{558B6839-03E9-11D3-B89E-080036F3CC02};Command;Grow Selection;{50830560-31B5-11D0-82E7-00A0243E268D}:{6218A21F-1147-11D4-A89D-00C04F8EDF15};Command;Shrink Selection;{50830560-31B5-11D0-82E7-00A0243E268D}:{69D3398B-73E6-4AB1-B3E5-7108216EF805};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Slice Polygons Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{6CA134E9-64EA-494B-A7EE-E47BF8D16931};Command;Split Edge Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{CB7D9160-46B2-11D4-8C28-009027BC3A0E};Command;Split Polygon Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{C6737510-67EA-11D4-8C2D-009027BC3A0E};Command;Weld Point Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{45BA55DB-1280-46FC-96F2-D8385916D61F};Command;Add Vertex Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{64578190-B32E-11D4-8C47-009027BC3A0E};Command;Add Edge Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{87F68420-4782-11D4-8C27-009027BC3A0E};Command;Add Polygon Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{EFC008C0-3317-11D4-8C24-009027BC3A0E};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Disconnect Component;{50830560-31B5-11D0-82E7-00A0243E268D}:{8582A7F9-EF44-4C3E-8C38-472BFD0C8414};Command;Extrude Comp. Axis;{50830560-31B5-11D0-82E7-00A0243E268D}:{9E734592-4B92-11D4-B7F3-0008C7A011A6};Command;Collapse;{50830560-31B5-11D0-82E7-00A0243E268D}:{7F392188-2520-11D4-97F2-0800360BFF02};Command;Bevel;{50830560-31B5-11D0-82E7-00A0243E268D}:{9589E229-4BB4-11D4-A8B7-00C04F8EDF15};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Unhide All Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{7BC3B51D-8FCA-4546-B99F-BDC4AE964409};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B};Command;Cursor Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{401C5B7B-3CA8-4675-AC2F-6383B855F747};Command;Tweak Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0D41FF0C-8AF4-4E18-9C1B-83277ACF12EF}" language="Python" name="Edit Polymesh (general)" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Filter Edges;{50830560-31B5-11D0-82E7-00A0243E268D}:{053894C2-8E7C-4F76-B1BB-283C34E3C420};Command;Filter Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{AD25FA37-856E-4AA4-83F3-352713319986};Command;Filter Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{1067D621-96FC-4DED-983F-E83C4D121372};Command;Polygon Reduction;{50830560-31B5-11D0-82E7-00A0243E268D}:{0488BE6A-6E7E-416B-9CAE-2A6A987BF75C};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Invert All Normals;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC71-F6B6-11D2-AC7E-00A02485CECB};Command;Invert Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{8DE9E423-B5F0-11D4-87B1-00A0C9ED6CE2};Command;Symmetrize Polygons;{50830560-31B5-11D0-82E7-00A0243E268D}:{669FD6AA-D338-4311-9B7E-CB4A923311D1};Command;Quadrangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E71C2255-9AAF-4FF4-ABAC-4A6855C97C78};Command;Triangulate;{50830560-31B5-11D0-82E7-00A0243E268D}:{FB5B671D-C1A0-4DB6-8FF9-950A5029C2CD};Command;Paint Push Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{0EB424E5-84F7-11D4-8094-00A0C9ED67BD};Command;Dice Object;{50830560-31B5-11D0-82E7-00A0243E268D}:{6AF65230-4EDA-42EB-9AC5-192F4F3916BA};Command;Subdivide;{50830560-31B5-11D0-82E7-00A0243E268D}:{60D7DF7E-B5B0-11D4-814F-00A0C9AC19A9};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;PolyMesh Subdivide With Center;{50830560-31B5-11D0-82E7-00A0243E268D}:{412F8EE6-C4E2-11D4-B863-009027BC6587}" language="Python" name="Edit Polymesh" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;RelaxUVW;{50830560-31B5-11D0-82E7-00A0243E268D}:{ED3B4730-7798-45D8-9C23-5BCF3F8A7FEF}" language="Python" name="Edit UVs" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Tweak Curve;{C9D52C07-3DBE-49BE-B096-2B7CC581E162};Command;Proportional Transform Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{FA9493C0-0A22-41F4-8980-6E63AD875E0B};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Add Point on Curve Tool by CVs;{50830560-31B5-11D0-82E7-00A0243E268D}:{2BB0233A-293A-44DF-8A83-FEEA941BCE9B};Command;Add Point on Curve Tool by Bezier-Knot Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{E5AB5B29-A386-4CC5-A040-34956CD44199};Command;Add Point on Curve Tool by Knot Points;{50830560-31B5-11D0-82E7-00A0243E268D}:{46353ACD-408A-4F3F-A0BB-0244A6CC9AF5};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Delete Point on Curve Tool;{50830560-31B5-11D0-82E7-00A0243E268D}:{56F7ECF0-CD24-11D3-A9BA-009027BC65D7};Command;Raise Nurbs Curve Degree;{50830560-31B5-11D0-82E7-00A0243E268D}:{8C80C39D-F376-45DD-BE99-510CD7820EB3};Command;Insert Curve Knot;{50830560-31B5-11D0-82E7-00A0243E268D}:{E0A2FA73-6831-47AF-A7E0-428E416F041B}" language="Python" name="Edit NURBS Curve (general)" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Align Bezier Handles;{FCD67409-14AA-4542-833E-395BBAE3BBA7};QMenu_MenuItem;Align Bezier Handles Back to Forward;{BB2E37F7-BA7C-4137-A505-5B86DC5B362F};QMenu_MenuItem;Align Bezier Handles Forward to Back;{6B7D7CED-9032-4A18-A33C-400851FCD53D};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Make Knots Bezier;{ED4BBEA0-1241-4CD3-8B8C-CD422DD853EF};QMenu_MenuItem;Make Bezier-Knots Corners;{E1201585-F329-478B-9038-481E7CF184A1};QMenu_MenuItem;Make Knot Segments Linear;{C5D704EE-7DE1-4AC6-B04F-B0AA3C57ADF5};QMenu_MenuItem;Make Knots Non-Bezier;{D0C49EAA-0706-447D-AB81-0C20BCBDF3D5};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Set Curve Knot Multiplicity;{A2D37112-A40B-4351-A0E8-476D5DA4F49E};QMenu_MenuItem;Remove Knot;{25B934BE-97D3-4B2A-BB1A-900B9A5100E2};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Curve Stitch;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9F-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Curve Knot" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Insert Knot;{2F872FDD-3C9D-4C0D-AA33-1EF5054DBA3B};QMenu_MenuItem;Insert Bezier Knot;{4E3BA4DB-D394-4D15-ADA1-E4AFFC080975};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Insert Curve Knot;{50830560-31B5-11D0-82E7-00A0243E268D}:{E0A2FA73-6831-47AF-A7E0-428E416F041B}" language="Python" name="Edit NURBS Curve IsoPoint" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Curve Extract Segment;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9A-F6B6-11D2-AC7E-00A02485CECB};Command;Subcurve Extract;{50830560-31B5-11D0-82E7-00A0243E268D}:{CB8498F3-CA7B-403B-9C97-BB79D465C2DE}" language="Python" name="Edit NURBS Curve Subcurve" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#This function must not be renamed!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Light Selector (+Ctrl to inspect)" type="QMenu_Menu">#The following code adds a menu item per light in the scene to the bottom of the menu 
# which selects the respective light (or inspects it when ctrl key is pressed at the same time)

def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the mneu after subsequent calls
	Lights = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;light&quot;, &quot;&quot;, True)
	for oLight in Lights:
		oLightItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
		oLightItem.name = oLight.FullName
		
		Code = ('def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):\n')
		Code += &quot;\tbCtrlDown = (Application.GetKeyboardState()[1]) == 2\n&quot;
		Code += &quot;\tbAutoInspect = Application.GetValue('preferences.Interaction.autoinspect')\n&quot;
		Code += &quot;\tif bAutoInspect and bCtrlDown or bAutoInspect==False and bCtrlDown==False: Application.InspectObj(\&quot;&quot; + oLight.FullName  + &quot;\&quot;);\n&quot;
		Code += (&quot;\telse: Application.SelectObj('&quot; + oLight.FullName + &quot;','','');&quot;)
		oLightItem.code = Code
		self.appendTempMenuItem (oLightItem)</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Top View;{96ECAD40-82CF-4CDA-8F75-F1B594195A5B};QMenu_MenuItem;Right View;{B66172AF-42FB-41C7-B6AA-3E650991BB79};QMenu_MenuItem;Front View;{93D3E0C8-95A3-433C-837D-005F824AC84C};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Bottom View;{C9FA871E-5499-4C3C-B0A4-29999F6CE365};QMenu_MenuItem;LeftView;{50A3C0DD-5117-485D-AF9F-316CDE5D4485};QMenu_MenuItem;Back View;{BA4D9B67-98B3-4F74-9A73-0EB675DEA38F};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;User View;{6C2B1B1D-6D65-459F-9C66-601CEA4280B4};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_Menu;Look Through Camera;{F28118A7-9896-45EE-A57B-8319D59029EB};QMenu_Menu;Look Through Spotlight;{4E4B452F-993C-43C2-B6DF-6B7CBB2021A0}" language="Python" name="Set View to..." type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="" language="Python" name="Edit Shading Nodes" type="QMenu_Menu">def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	oLO = Application.Desktop.ActiveLayout;
	i = 0
	Application.LogMessage(oLO.Views(i).Name)
	Application.LogMessage(oLO.Views(i).GetAttributeValue(&quot;selection&quot;));
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;+100%;{6D522E7C-CA61-4F60-B420-8DD5F940B78C};QMenu_MenuItem;+50%;{CA176E49-01CB-4AF2-BA82-3F8D2AD1D58E};QMenu_MenuItem;+10%;{C7A5338D-A2BF-4FC5-8B54-29BB78FF7641};QMenu_MenuItem;add 1;{29F1DE73-11BC-4401-A9EA-7A7940617325}" language="Python" name="Property Editing - Add Value" type="QMenu_Menu">def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;subtract 1;{52864918-60DE-469F-AAF2-FAFEB6AA9F62};QMenu_MenuItem;-10%;{2DADE0FB-0429-4527-9CCD-94B85827BC83};QMenu_MenuItem;-50%;{DAA60FE9-D771-45F8-8FE3-F05CE3FB386F}" language="Python" name="Property Editing - Subtract Value" type="QMenu_Menu">def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;10;{95D2C302-64A6-4B78-9932-DF9495540B5A};QMenu_MenuItem;5;{D95BDADF-7E77-4F5A-9C07-6A74DB8A09C8};QMenu_MenuItem;1;{F0973AE1-4AF6-48E4-B9B7-164256C76C1C};QMenu_MenuItem;0,5;{AD7B41B6-E2EC-4B63-A263-EF5306213840};QMenu_MenuItem;0,1;{E7ABE33A-A23C-4C7D-8999-778EA98EBB36};QMenu_MenuItem;0;{55DDFD5F-FA4E-4BB3-91FA-3558E6CDBC1C};QMenu_MenuItem;-1;{49151B9F-BAE3-4A82-AF18-150CB1EA9E03};QMenu_MenuItem;None;{FDCDA054-8BD6-419B-B2A7-9CFD2A1E39CE}" language="Python" name="Property Editing - Set Value" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Camera Selector (+Ctrl to inspect)" type="QMenu_Menu">#The following code adds a menu item per existing camera to the bottom of the menu 
# which selects the respective camera (or inspects it when ctrl key is pressed at the same time)

def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;camera&quot;, &quot;&quot;, True)

	for oCam in Cams:
		oCamItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
		oCamItem.name = oCam.FullName
		
		Code = ('def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):\n')
		Code += ('\tApplication.SelectObj(&quot;'+ oCam.FullName + '&quot;, &quot;&quot;, &quot;&quot;)\n')
		Code += ('\tbCtrlDown = (Application.GetKeyboardState()[1]) == 2\n')
		Code += ('\tbAutoInspect = Application.GetValue(\&quot;preferences.Interaction.autoinspect\&quot;)\n')
		Code += ('\tif bAutoInspect and bCtrlDown or bAutoInspect==False and bCtrlDown==False: Application.InspectObj(\&quot;' + oCam.FullName + '.Camera\&quot;,)')
		oCamItem.code = Code
		self.appendTempMenuItem (oCamItem)</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_Menu;Light Selector (+Ctrl to inspect);{F59CCBB9-57A1-4EB2-A791-D750540910F9};QMenu_Menu;Camera Selector (+Ctrl to inspect);{1CEC0242-8EBA-4571-9D40-9DF031F5931F}" language="Python" name="Shading Properties" type="QMenu_Menu">def QMenu_Menu_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Orbit Around Selection - Components only;{DD6FE42B-4FBE-491F-A4EF-B7A090876221};QMenu_MenuItem;Orbit Around Selection;{C1B16CE5-1FEE-45FC-92E7-0540234561C0};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Inspect Camera Preferences;{78666F91-C71F-4A07-A742-095E40CDBF79}" language="Python" name="Preferences - Tools - Camera" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Merge Clusters with same Material;{D6420552-8848-4120-B8E5-A2A7E0AF6BBB};Command;Create Texture Subprojection;{50830560-31B5-11D0-82E7-00A0243E268D}:{479C4EF9-509D-4F8B-99BC-42A06F13D56F};Command;Create PlanarXY Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A2-0B13-11D4-B4AE-00AA0068D2C0};Command;Create PlanarXZ Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A4-0B13-11D4-B4AE-00AA0068D2C0};Command;Create PlanarYZ Texture Projection;{50830560-31B5-11D0-82E7-00A0243E268D}:{8E3FD9A3-0B13-11D4-B4AE-00AA0068D2C0}" language="Python" name="Create Texture Projection" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Look Through Spotlight" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!

	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;Light&quot;, &quot;&quot;, True)
	
	for oCam in Cams:
		if Application.GetValue(oCam.FullName + &quot;.light.Type&quot;) == 2:
			print (oCam.FullName + &quot; is a spotlight&quot;)
			oCamItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
			oCamItem.name = oCam.FullName

			Code = ('def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):\n\toVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )\n')
			Code+= ('\toView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)\n')
			Code += ('\toVM.SetAttributeValue(&quot;activecamera:&quot; + oView + &quot;\&quot;,&quot;' + oCam.FullName + '&quot;)\n')

			oCamItem.code = Code
			self.appendTempMenuItem (oCamItem)</QMenu_Menu><QMenu_Menu executeCode="True" items="" language="Python" name="Look Through Camera" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function!

	self.removeAllTempMenuItems() #Clear the temp menu items so they don't pile up in the menu after subsequent calls
	Cams = Application.ActiveSceneRoot.FindChildren(&quot;&quot;, &quot;Camera&quot;, &quot;&quot;, True)

	for oCam in Cams:
		oCamItem = Application.QMenuCreateObject(&quot;MenuItem&quot;)
		oCamItem.name = oCam.FullName

		Code = ('def Script_Execute (self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):\n\toVM = Application.Desktop.ActiveLayout.Views.Find( &quot;View Manager&quot; )\n')
		Code+= ('\toView = oVM.GetAttributeValue(&quot;focusedviewport&quot;)\n')
		Code += ('\toVM.SetAttributeValue(&quot;activecamera:&quot; + oView + &quot;\&quot;,&quot;' + oCam.FullName + '&quot;)\n')

		oCamItem.code = Code
		self.appendTempMenuItem (oCamItem)</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Raycast Select in Shaded Mode;{E7863409-9CDE-43A1-9BD7-A12DDA12D9B1};QMenu_MenuItem;Raycast Select - Include Backfacing Polygons;{B929695F-8422-4D5F-83E9-C139BCCEEB62};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Inspect Selection Preferences;{494235CC-D1C5-4459-B924-3B665A5EBC27}" language="Python" name="Preferences - Tools - Polygon" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Extrude duplicated Polygons;{58868357-22DD-4B74-9AF1-C9BA0099313F};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};QMenu_MenuItem;Inspect Duplicate Preferences;{795FF5FF-BABF-4767-99D9-D1B6BA116352}" language="Python" name="Preferences - Commands - Duplicate Options" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Curve Blend;{50830560-31B5-11D0-82E7-00A0243E268D}:{8BD3C851-183C-11D3-A979-00A024190119};Command;Curve Fillet;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9E-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Stitch;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9F-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Merge;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC8D-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Curves (multiple)" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Log Messages;{F6F17C6C-5B9A-4F74-837B-36A616741387};QMenu_MenuItem;Log Verbose Messages;{4FB615EF-82AC-470F-9C81-93E694AE6947};QMenu_MenuItem;Log Messages Real-Time;{0E8908EE-83A7-4CE2-ABE5-873DF69854CC};QMenu_MenuItem;Show Hyperlinks;{DA748CF1-0803-4472-A5EE-2F440EF1EEEB}" language="Python" name="Preferences - Scripting" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Edit QMenus;{FB165B1D-C669-48E1-8E78-6D9186FF21A3};QMenu_MenuItem;QPop enabled;{AE7C239A-9A1D-49FC-96C1-2A13AEFC829A}" language="Python" name="Preferences -  QMenu" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Curve Inverse;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC72-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Open/Close;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC89-F6B6-11D2-AC7E-00A02485CECB};Command;Curve Shift;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC74-F6B6-11D2-AC7E-00A02485CECB};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Curve Clean;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BCA6-F6B6-11D2-AC7E-00A02485CECB};Command;Raise Nurbs Curve Degree;{50830560-31B5-11D0-82E7-00A0243E268D}:{8C80C39D-F376-45DD-BE99-510CD7820EB3};Command;Curve Reparameterize;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC7C-F6B6-11D2-AC7E-00A02485CECB};Command;Set Curve Knot Multiplicity;{50830560-31B5-11D0-82E7-00A0243E268D}:{F296A100-1154-43B6-A647-F083A5A2E592};Command;Curve Stitch;{50830560-31B5-11D0-82E7-00A0243E268D}:{2861BC9F-F6B6-11D2-AC7E-00A02485CECB}" language="Python" name="Edit NURBS Curve" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="QMenu_MenuItem;Rename;{73EA2205-3B73-4756-AD8C-852F2D54F231};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Select Tree;{50830560-31B5-11D0-82E7-00A0243E268D}:{32DDA350-0A24-11D3-B8A0-080036F3CC02};Command;Select Model;{50830560-31B5-11D0-82E7-00A0243E268D}:{C973C090-1FAB-11D3-8BE6-00AA006130EF};Command;SelectMaterials;{50830560-31B5-11D0-82E7-00A0243E268D}:{31E095B8-43C8-4BCD-8B4B-192CDCA534FF};Command;Invert Selection Using Filter;{50830560-31B5-11D0-82E7-00A0243E268D}:{558B6839-03E9-11D3-B89E-080036F3CC02};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Duplicate;{50830560-31B5-11D0-82E7-00A0243E268D}:{E2B59DF2-9C38-11D3-8106-00A0C9AC19A9};Command;Clone Single;{50830560-31B5-11D0-82E7-00A0243E268D}:{E2B59DF3-9C38-11D3-8106-00A0C9AC19A9};Command;Instantiate;{50830560-31B5-11D0-82E7-00A0243E268D}:{AC8A969A-3858-42B2-9B45-24D973C44360};Command;Duplicate/Instantiate Options;{50830560-31B5-11D0-82E7-00A0243E268D}:{291E04D0-6068-11D1-9987-00A0243F0E60};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Create Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{DBB3A7E0-893D-11D2-B906-00A024C78EE3};Command;Add to Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{DBB3A7E1-893D-11D2-B906-00A024C78EE3};Command;Remove from Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{48F78661-894D-11D2-B906-00A024C78EE3};Command;Create Transform Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{23424001-3DAB-45C7-874E-3B0B1CA1186F};QMenuSeparator;NewSeparator;{0CE322CF-1EB2-42A9-96EB-DABFEB72B545};Command;Info Selection;{50830560-31B5-11D0-82E7-00A0243E268D}:{4BDCDC62-E18E-11D3-8079-00A0C9ED67BD}" language="Python" name="Edit General" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu><QMenu_Menu executeCode="False" items="Command;Remove Transform Group;{50830560-31B5-11D0-82E7-00A0243E268D}:{B8ECB928-8AA6-4F73-8698-C50F1AFC0547}" language="Python" name="Edit Transform Groups" type="QMenu_Menu">def QMenu_Menu_Execute(self, QMenu_MenuItems, QMenu_Menus, QMenu_MenuSets):	#Don't rename this function
	#Add your script code here
	pass</QMenu_Menu></QMenu_Menus><QMenu_MenuSets><QMenu_MenuSet AContexts="Transform Group;NURBS_Curve (multiple);NURBS_Curve (or components);Polymesh (multiple);Polymesh (or components);Default" AMenus="Edit Transform Groups;Edit NURBS Curves (multiple);Edit NURBS Curve (general);Edit Polymeshes (multiple);Edit Polymesh (general);None" BContexts="Default" BMenus="Edit General" CContexts="Default" CMenus="None" DContexts="NURBS_Curve (single);NURBS_Curve_Subcurve;NURBS_Curve_IsoPoint;NURBS_Curve_Knot;NURBS_Curve_Point;Polymesh (single);Polymesh_Polygons;Polymesh_Edges;Polymesh_Points;Default" DMenus="Edit NURBS Curve;Edit NURBS Curve Subcurve;Edit NURBS Curve IsoPoint;Edit NURBS Curve Knot;None;Edit Polymesh;Edit Polymesh Polygons;Edit Polymesh Edges;Edit Polymesh Points;None" name="Modeling" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="Edit UVs" BContexts="Default" BMenus="None" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="UV Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="Edit Shading Nodes" BContexts="Default" BMenus="None" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Shader Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Polymesh (or components);Default" AMenus="Create Texture Projection;None" BContexts="Default" BMenus="Shading Properties" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Lighting and shading" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="Property Editing - Set Value" BContexts="Default" BMenus="Property Editing - Add Value" CContexts="Default" CMenus="Property Editing - Subtract Value" DContexts="Default" DMenus="None" name="Property Editing" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="Set View to..." BContexts="Default" BMenus="Display Modes" CContexts="Default" CMenus="Preferences -  QMenu" DContexts="Default" DMenus="None" name="Views" type="QMenu_MenuSet"/><QMenu_MenuSet AContexts="Default" AMenus="None" BContexts="Default" BMenus="Preferences - Scripting" CContexts="Default" CMenus="None" DContexts="Default" DMenus="None" name="Scripting" type="QMenu_MenuSet"/></QMenu_MenuSets><QMenu_MenuDisplayContexts><QMenu_MenuDisplayContext language="Python" name="Polymesh (or components)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		Type = Types[0]
		if Type == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
			return True
		if ((Type == &quot;edgeSubComponent&quot;) or (Type == &quot;pntSubComponent&quot;) or (Type == &quot;polySubComponent&quot;)):
			if ComponentParentTypes[0] == &quot;polymsh&quot;:  #Is the parent of the selected component(s) a polymesh?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Default" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #Don't rename this function
	return True</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Points" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if (Types[0] == &quot;pntSubComponent&quot;):
			if ComponentParentTypes[0] == &quot;polymsh&quot;: #Is the parent of the selected component(s) a polymesh?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Edges" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames):  #This function must not be renamed!
	if (len(selection) &gt; 0):  #Is something selected?
		#Is the first selected object an edge of on a Polymesh?
		if Types[0] == &quot;edgeSubComponent&quot;: 
			#if ComponentParentTypes[0] == &quot;polymsh&quot;: 	
			return True	#This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh_Polygons" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		#Is the first selected object a polygont on a Polymesh?
		if Types[0] == &quot;polySubComponent&quot;:
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Subcurve" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames ): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		#Is the first selected object a subcurve of a NURBS curve list?
			if Types[0] == &quot;subcrvSubComponent&quot;: 	
				return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh (multiple)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents ,ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 1): #Is something selected?
		if Types[0] == &quot;polymsh&quot; and Types[1] == &quot;polymsh&quot;: #Are the first two selected objects polymeshes?
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Polymesh (single)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): 	#Is something selected?
		if Types[0] == &quot;polymsh&quot;:  #Is the first selected object a Polymesh?
			return True
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve (single)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute (selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0):  #Is something selected?
		#Is the first selected object a NURBS curvelist?
		if Types[0] == &quot;crvlist&quot;: 
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve (or components)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if Types[0] == &quot;crvlist&quot;:  #Is the first selected object a curve list?
			return True
		if ((Types[0] == &quot;knotSubComponent&quot;) or (Types[0] == &quot;isopntSubComponent&quot;) or (Types[0] == &quot;pntSubComponent&quot;) or (Types[0] ==&quot;subcrvSubComponent&quot;)):
			if ComponentParentTypes[0] == &quot;crvlist&quot;:  #Is the parent of the selected component(s) a polymesh?
				return True								
	return False  #This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Point" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if Types[0] == &quot;pntSubComponent&quot;:
			if ComponentParentTypes[0] == &quot;crvlist&quot;: 		#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_IsoPoint" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): 	#This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if Types[0] == &quot;isopntSubComponent&quot;:
			if ComponentParentTypes[0] == &quot;crvlist&quot;:	#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve_Knot" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 0): #Is something selected?
		if Types[0] == &quot;knotSubComponent&quot;:
			if ComponentParentTypes[0] == &quot;crvlist&quot;: 		#Is the parent of the selected component(s) a curve list?
				return True								
	return False	#This function must return a boolean!</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="NURBS_Curve (multiple)" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents,ComponentParentTypes,ComponentParentClassNames): #This function must not be renamed!
	if (len(selection) &gt; 1): #Is more than one obj selected?
		if Types[0] == &quot;crvlist&quot; and Types[1] == &quot;crvlist&quot;: #Are the first two selected objects curves?
			return True #This function must return a boolean!
	return False</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="JScript" name="Jscript_Test_DisplayContext" type="QMenu_MenuDisplayContext">function QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents, ComponentParentTypes, ComponentParentClassNames) //This function must not be renamed!
{
	Application.LogMessage(&quot;Executing Jscript_Test_DisplayContext&quot;)
	Application.LogMessage(selection)
	Application.LogMessage(ClassNames)
	Application.LogMessage(ComponentClassNames)
	Application.LogMessage(ComponentParents)
	Application.LogMessage(ComponentParentTypes)
	Application.LogMessage(ComponentParentClassNames)
	return true	//This function must return a boolean
}</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="VBScript" name="VBScript_Test_DisplayContext" type="QMenu_MenuDisplayContext">Function QMenuContext_Execute(selection, Types, ClassNames, ComponentClassNames, ComponentParents, ComponentParentTypes, ComponentParentClassNames) 'This function must not be renamed!
	LogMessage(&quot;Executing VBScript_Test_DisplayContext&quot;)
	Application.LogMessage(selection)
	Application.LogMessage(ClassNames)
	Application.LogMessage(ComponentClassNames)
	Application.LogMessage(ComponentParents)
	Application.LogMessage(ComponentParentTypes)
	Application.LogMessage(ComponentParentClassNames)
	QMenuContext_Execute =  True	'This function must return a boolean
 end Function</QMenu_MenuDisplayContext><QMenu_MenuDisplayContext language="Python" name="Transform Group" type="QMenu_MenuDisplayContext">def QMenuContext_Execute(selection , Types , ClassNames , ComponentClassNames , ComponentParents , ComponentParentTypes , ComponentParentClassNames): #This function must not be renamed!
	if Types[0] == &quot;TransfoGroup&quot;:
		return True	#This function must return a boolean</QMenu_MenuDisplayContext></QMenu_MenuDisplayContexts><QMenuViewSignatures><QMenuViewSignature menuSets="Modeling;Lighting and shading;Views" name="3D Views" signature="Viewer;DS_ChildViewManager;DS_ChildRelationalView;TrayClientWindow;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="UV Editing" name="Texture Editor" signature="" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Shader Editing" name="Render Tree" signature="" type="QMenuViewSignature"/><QMenuViewSignature menuSets="" name="Animation Editor  - FCurve Editor" signature="FcurveViewer;DS_ChildAnimationEditor;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="" name="Animation Mixer" signature="DS_ChildAnimationMixer;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="" name="Animation Editor - DopeSheet" signature="DopesheetView;DS_ChildDopeSheet;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="" name="Shape Manager" signature="Viewer;DS_ChildViewManager;DS_ChildRelationalView;TrayClientWindow;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Property Editing" name="Property Editor" signature="DSPropertyInspectorPagesArea;Tab;DS_ChildPropertyEditor;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/><QMenuViewSignature menuSets="Scripting" name="Script History" signature="ScintillaTabControl;DS_ChildScriptEditor;TrayClientWindow;XSIFloatingView;" type="QMenuViewSignature"/></QMenuViewSignatures><QMenuDisplayEvents><QMenuDisplayEvent key="49" keyMask="0" number="0" type="QMenuDisplayEvent"/><QMenuDisplayEvent key="50" keyMask="0" number="0" type="QMenuDisplayEvent"/><QMenuDisplayEvent key="220" keyMask="0" number="0" type="QMenuDisplayEvent"/></QMenuDisplayEvents></QMenuComponents>